[{"id":"d84e4935.20e1e8","type":"tab","label":"Rasta"},{"id":"e8a0fdac.623e1","type":"function","z":"d84e4935.20e1e8","name":"Hello to serialmux","func":"msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x04, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37]);\n\n\nreturn msg;","outputs":1,"noerr":0,"x":648,"y":180,"wires":[["e97b794c.807918"]]},{"id":"f291f185.0c28b","type":"inject","z":"d84e4935.20e1e8","name":"Connect","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":399.4285202026367,"y":87.14283752441406,"wires":[["e8a0fdac.623e1"]]},{"id":"7aa04ec1.a7ff4","type":"debug","z":"d84e4935.20e1e8","name":"from mux","active":false,"console":false,"complete":"payload","x":1396.0950241088867,"y":150.6190185546875,"wires":[]},{"id":"fa9570e5.4e81d","type":"function","z":"d84e4935.20e1e8","name":"Subscribe","func":"msg.payload = msg.payload.toString('hex');\n\nif (msg.payload == \"a740a0f500050000010004\") //hell0 response - send subscribe\n{\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0B, 0x00, 0x00, 0x16, 0xFF, 0xFF, 0xFF, 0x50, 0xFF, 0xFF, 0xFF, 0x50]);\n\nreturn msg;\n} else if (msg.payload == \"a740a0f5000400000101\")\n{\n//msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0B, 0x00, 0x00, 0x16, 0xFF, 0xFF, 0xFF, 0x50, 0xFF, 0xFF, 0xFF, 0x50]);\n\nreturn msg;\n} else if (msg.payload == \"a740a0f5000400001600\") //subscribe response - send gettime\n{\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);\n\nreturn msg;\n} else\n{\nreturn null;\n\n}\n","outputs":1,"noerr":0,"x":656.3809547424316,"y":316.61901473999023,"wires":[["e97b794c.807918"]]},{"id":"b5dad46c.2979f8","type":"function","z":"d84e4935.20e1e8","name":"to hexstring","func":"msg.payload = msg.payload.toString('hex');\n\nreturn msg;\n","outputs":1,"noerr":0,"x":1184.5238037109375,"y":152.71425247192383,"wires":[["7aa04ec1.a7ff4"]]},{"id":"e97b794c.807918","type":"tcp request","z":"d84e4935.20e1e8","server":"192.168.1.1","port":"9900","out":"sit","splitc":"0","name":"","x":896.7143020629883,"y":316.2856845855713,"wires":[["b5dad46c.2979f8","def491db.89478","b7d6fd66.7b2cc"]]},{"id":"da3bef0d.5a9c9","type":"link in","z":"d84e4935.20e1e8","name":"","links":["def491db.89478"],"x":504.7143020629883,"y":369.2856845855713,"wires":[["fa9570e5.4e81d"]]},{"id":"def491db.89478","type":"link out","z":"d84e4935.20e1e8","name":"Listen","links":["da3bef0d.5a9c9"],"x":1145.7143020629883,"y":369.95237159729004,"wires":[]},{"id":"b7d6fd66.7b2cc","type":"function","z":"d84e4935.20e1e8","name":"notification to json","func":"msg.payload = msg.payload.toString('hex');\n\nvar msg_out=[];\n\nif (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"04\") // inkommende pakke er en \"data\"\n{\n    \n    while (msg.payload.length>0){\n    \n        var msg2 = {payload:{header_token: msg.payload.substring(0,8), \n            packet_type: msg.payload.substring(16,18),\n            notifType: msg.payload.substring(18,20),\n            payload_length: msg.payload.substring(8,12),\n            macAddress: msg.payload.substring(44,60),\n            timestamp: msg.payload.substring(20,44),\n            srcPort: msg.payload.substring(60,64),\n            dstPort: msg.payload.substring(64,68),\n            data: msg.payload.substring(68,12+(2* parseInt(msg.payload.substring(8,12),16)))}};\n    \n        msg_out.push(msg2);\n    \n        msg.payload = msg.payload.substring(12+(2* parseInt(msg.payload.substring(8,12),16)));\n    \n    }\n\n    return [msg_out,null,null];\n \n}else if (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"06\" && msg.payload.substring(36,38) == \"80\") // inkommende pakke er en \"device health report\"\n{  \n    \n    var healthReport = {payload:{\n        //notiftype:msg.payload.substring(36,38), \n        battery_mote: parseInt(msg.payload.substring(52,56),16)/1000,\n        temperature_mote: hexToSignedInt(msg.payload.substring(50,52)),\n        //payload: msg.payload,\n        mac_adress: msg.payload.substring(20,36),\n        packet_type: \"device_healthReport\"}};\n    \n    return [null,healthReport,null];\n    \n}else if (msg.payload.substring(16,18) == \"17\") // inkommende pakke er en \"networktime\"\n{    \n \n    network_time = parseInt(msg.payload.substring(28,44),16)*1000 + parseInt(msg.payload.substring(44,52),16)/1000; //tidspungt når pakke ble sendt - msec since 1 january 1970 \n    gateway_time = new Date().getTime(); //msec since 1 january 1970  \n    time_diff = gateway_time - network_time;\n\n    flow.set('time_diff',time_diff);\n\n    var time_msg = {payload:{\n\n        network_time: network_time,\n        gateway_time: gateway_time,\n        time_diff: time_diff}};\n    \n    return [null,null,time_msg];\n    \n}else{\n    \n    return [null,null,null];\n}\n\n\nfunction hexToSignedInt(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = \"0\" + hex;\n    }\n    var num = parseInt(hex, 16);\n    var maxVal = Math.pow(2, hex.length / 2 * 8);\n    if (num > maxVal / 2 - 1) {\n        num = num - maxVal;\n    }\n    return num;\n}\n","outputs":"3","noerr":0,"x":656.7143020629883,"y":705.785717010498,"wires":[["79985821.fa67e8","ad9e1476.d18de8"],["5b31d72b.a2f8c8","468152c8.7b48ac","a44d3bcc.343a68"],["fbcd76ff.ae5af8"]]},{"id":"79985821.fa67e8","type":"function","z":"d84e4935.20e1e8","name":"RMAD packets to Azure","func":"if (msg.payload.notifType == \"04\") //is data notification\n{\n  \n\nvar time_diff = flow.get('time_diff') || 0;\n\nif (msg.payload.data.substring(0,2) == \"07\")  //is AUX datapaket\n{\n    \nvar aux_is_signedint = parseInt(msg.payload.data.substring(16,18),16).toString(2).split('').map(x => x === '1');\nvar num_aux = (msg.payload.data.length - 18) / 4;\nvar aux_data = [];\n\nvar i;\nfor (i = 0; i < num_aux; i++) { \n    if (aux_is_signedint[i]) {\n        aux_data[i] = Math.round((hexToSignedInt(msg.payload.data.substring(18+4*i+2,18+4*i+4)+msg.payload.data.substring(18+4*i,18+4*i+2)))*1000)/1000; //*2.5/65536 kommentert ut utregning til volt\n    } else {\n        aux_data[i] = Math.round((parseInt(msg.payload.data.substring(18+4*i+2,18+4*i+4)+msg.payload.data.substring(18+4*i,18+4*i+2),16))*1000)/1000; //*2.5/65536 kommentert ut utregning til volt for å test triggnivå\n    }\n}\n\n\nvar aux_msg = {\n\n                payload:    \n\n\n                {config:    {type:parseInt(msg.payload.data.substring(2,3),16),\n                                        sw:parseInt(msg.payload.data.substring(3,4),16),\n                                        hw:parseInt(msg.payload.data.substring(4,5),16),\n                                        radio:parseInt(msg.payload.data.substring(5,6),16)},\n                                        \n                            state:     {charge_enabled: ((parseInt(msg.payload.data.substring(6,8),16) & 1) == 1) ? 1 : 0,\n                                        fast_charge: ((parseInt(msg.payload.data.substring(6,8),16) & 2) == 2) ? 1 : 0,\n                                        acmp1_out: ((parseInt(msg.payload.data.substring(6,8),16) & 4) == 4) ? 1 : 0,\n                                        acmp2_out: ((parseInt(msg.payload.data.substring(6,8),16) & 8) == 8) ? 1 : 0,\n                                        acmp_vddref: ((parseInt(msg.payload.data.substring(6,8),16) & 16) == 16) ? 1 : 0},\n                                    \n                            //charge_enabled: Boolean(parseInt(msg.payload.data.substring(6,8),16) & 1 == 1),\n                            battery: Math.round((parseInt(msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16)*(3*2.5/65536)+0.69)*1000)/1000,\n                            temperature: hexToSignedInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14),16)/100,\n                            aux: aux_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"aux_data\"\n                            },\n                        \n\n};\n            \n\nreturn [aux_msg,null,null,null,null];\n\n} \nelse if (msg.payload.data.substring(0,2) == \"00\")  //is SVV avalanch packet\n{\n \nvar svv_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46))),\n                            G4_std: Math.round(parseFloatHex(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_max: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G3_max: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G4_max: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78),16),\n                            G2_min: parseInt(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82),16),\n                            G3_min: parseInt(msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86),16),\n                            G4_min: parseInt(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(98,100) + msg.payload.data.substring(96,98),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102),16),\n                            G4_maxS: parseInt(msg.payload.data.substring(106,108) + msg.payload.data.substring(104,106),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(110,112) + msg.payload.data.substring(108,110),16),\n                            G2_minS: parseInt(msg.payload.data.substring(114,116) + msg.payload.data.substring(112,114),16),\n                            G3_minS: parseInt(msg.payload.data.substring(118,120) + msg.payload.data.substring(116,118),16),\n                            G4_minS: parseInt(msg.payload.data.substring(122,124) + msg.payload.data.substring(120,122),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_svv\"\n                            },\n                            \n\n};  \n\n \n  \nreturn [null,svv_msg,null,null,null];\n    \n} \nelse if (msg.payload.data.substring(0,2) == \"08\")  //is JBV avalanch packet\n{\n \n  var jbv_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: parseInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: parseInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: parseInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_jbv\"\n                            },\n                            \n\n};  \n\n \n  \nreturn [null,jbv_msg,null,null,null]; \n\n} \nelse if (msg.payload.data.substring(0,2) == \"0a\") //is event packet\n{  \n\nif (msg.payload.data.length == 170){ var event_msg = {payload:   //4 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G4_std: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            G3_mean: Math.round(parseFloatHex(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92))),\n                            G4_mean: Math.round(parseFloatHex(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(108,110) + msg.payload.data.substring(106,108),16),\n                            G2_max: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                            G3_max: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n                            G4_max: parseInt(msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(124,126) + msg.payload.data.substring(122,124),16),\n                            G2_min: parseInt(msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128),16),\n                            G3_min: parseInt(msg.payload.data.substring(132,134) + msg.payload.data.substring(130,132),16),\n                            G4_min: parseInt(msg.payload.data.substring(136,138) + msg.payload.data.substring(134,136),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(140,142) + msg.payload.data.substring(138,140),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(144,146) + msg.payload.data.substring(142,144),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(148,150) + msg.payload.data.substring(146,148),16),\n                            G4_maxS: parseInt(msg.payload.data.substring(152,154) + msg.payload.data.substring(150,152),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(156,158) + msg.payload.data.substring(154,156),16),\n                            G2_minS: parseInt(msg.payload.data.substring(160,162) + msg.payload.data.substring(158,160),16),\n                            G3_minS: parseInt(msg.payload.data.substring(164,166) + msg.payload.data.substring(162,164),16),\n                            G4_minS: parseInt(msg.payload.data.substring(168,170) + msg.payload.data.substring(166,168),16),\n                            \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n                            \n\n} \n\n} \nelse if (msg.payload.data.length == 138){ var event_msg = {payload:   //3 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G3_mean: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            G2_max: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96),16),\n                            G3_max: parseInt(msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104),16),\n                            G2_min: parseInt(msg.payload.data.substring(108,110) + msg.payload.data.substring(106,108),16),\n                            G3_min: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(124,126) + msg.payload.data.substring(122,124),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128),16),\n                            G2_minS: parseInt(msg.payload.data.substring(132,134) + msg.payload.data.substring(130,132),16),\n                            G3_minS: parseInt(msg.payload.data.substring(136,138) + msg.payload.data.substring(134,136),16),\n                           \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n                            \n\n} \n\n} \nelse if (msg.payload.data.length == 106){var event_msg = {payload:  //2 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76),16),\n                            G2_max: parseInt(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80),16),\n                           \n                            G1_min: parseInt(msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84),16),\n                            G2_min: parseInt(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96),16),\n                          \n                            G1_minS: parseInt(msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            G2_minS: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104),16),\n                        \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n\n\n}\n\n\n} \nelse if (msg.payload.data.length == 74) {var event_msg = {payload:  //1 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60),16),\n                           \n                            G1_min: parseInt(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72),16),\n                            \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n\n\n}\n}\nreturn [null,event_msg,null,null,null];\n\n} \nelse if (msg.payload.data.substring(0,2) == \"09\")  //is JBV diff avalanch packet\n{\n \n \n \n var jbv_diff_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: hexToSignedInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: hexToSignedInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: hexToSignedInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: hexToSignedInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_jbv\"\n                            },\n \n    \n};  \n\n \n  \nreturn [null,jbv_diff_msg,null,null,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"03\")  //is Recent event packet\n{\n \n var recent_event_msg = {payload:\n \n\n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            sps: parseInt(msg.payload.data.substring(32,34)+msg.payload.data.substring(30,32),16)/100,\n                            num_samples: parseInt(msg.payload.data.substring(36,38)+msg.payload.data.substring(34,36),16),\n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20) + msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8),16)*1000 + parseInt(msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28) + msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"recent_event\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,recent_event_msg,null,null];      \n\n} \nelse if (msg.payload.data.substring(0,2) == \"06\")  //is raw dat packet\n{\n    \nvar num_raw = (msg.payload.data.length - 24) / 4;\nvar raw_data = [];\n\nvar i;\nfor (i = 0; i < num_raw; i++) { \n\n        raw_data[i] = parseInt(msg.payload.data.substring(24+4*i+2,24+4*i+4)+msg.payload.data.substring(24+4*i,24+4*i+2),16);\n\n}\n \n var raw_data_msg = {payload:\n \n                \n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            channels: parseInt(msg.payload.data.substring(6,8),16),\n                            \n                            scan_start: parseInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14)+msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16),\n                            scan_stop: parseInt(msg.payload.data.substring(22,24)+msg.payload.data.substring(20,22)+msg.payload.data.substring(18,20)+msg.payload.data.substring(16,18),16),\n                            \n                            samples: raw_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"raw_data\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,null,raw_data_msg,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"0a\")  //is raw diff dat packet\n{\n    \nvar num_raw = (msg.payload.data.length - 24) / 4;\nvar raw_data = [];\n\nvar i;\nfor (i = 0; i < num_raw; i++) { \n\n        raw_data[i] = hexToSignedInt(msg.payload.data.substring(24+4*i+2,24+4*i+4)+msg.payload.data.substring(24+4*i,24+4*i+2),16);\n\n}\n \n var raw_data_diff_msg = {payload:\n \n                \n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            channels: parseInt(msg.payload.data.substring(6,8),16),\n                            \n                            scan_start: parseInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14)+msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16),\n                            scan_stop: parseInt(msg.payload.data.substring(22,24)+msg.payload.data.substring(20,22)+msg.payload.data.substring(18,20)+msg.payload.data.substring(16,18),16),\n                            \n                            samples: raw_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"raw_data\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,null,raw_data_diff_msg,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"04\")  //is adjustable param pacjet\n{\n \nvar par_msg = {payload:\n \n\n                {           \n                    \n                            Min_samples: parseInt(msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16),\n                            Sample_cont: parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12),16),\n                            Max_samples: parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16),\n                            \n                            \n                            \n                            G1_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28))),\n                            G2_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36))),\n                            \n                            G3_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G4_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G2_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G3_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G4_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            \n                            Trig_level: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            Start_delay: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            \n                            Trig_ch0: parseInt(msg.payload.data.substring(106,108),16),\n                            Trig_ch1: parseInt(msg.payload.data.substring(108,110),16),\n                            \n                            Amp_trig: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                            Amp_logging: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n          \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"prosessing_params\"\n                            },\n                            \n\n};\n\n \n  \nreturn [null,null,null,null,par_msg];\n}\n\n\n}\n\nfunction hexToSignedInt(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = \"0\" + hex;\n    }\n    var num = parseInt(hex, 16);\n    var maxVal = Math.pow(2, hex.length / 2 * 8);\n    if (num > maxVal / 2 - 1) {\n        num = num - maxVal;\n    }\n    return num;\n}\n\nfunction parseFloatHex(str) {\n    var float = 0, sign, order, mantiss,exp,\n    int = 0, multi = 1;\n    int = parseInt(str,16);\n    sign = (int>>>31)?-1:1;\n    exp = (int >>> 23 & 0xff) - 127;\n    mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n    for (i=0; i<mantissa.length; i+=1){\n        float += parseInt(mantissa[i])? Math.pow(2,exp):0;\n        exp--;\n    }\n    return float*sign;\n}","outputs":"5","noerr":0,"x":1052.706283569336,"y":664.2737674713135,"wires":[["ffc9e3ba.c132","deb15fc5.64892","a44d3bcc.343a68","468152c8.7b48ac"],["9e568ca2.5a5e9","a44d3bcc.343a68","468152c8.7b48ac"],["e8a227b.08065d8","d0c78ee.266ba7","a44d3bcc.343a68"],["a26c13da.2b2a9","a44d3bcc.343a68"],["9ac654f1.bb10c8","2d8b9db0.7c71f2","a44d3bcc.343a68"]]},{"id":"5b31d72b.a2f8c8","type":"debug","z":"d84e4935.20e1e8","name":"mesh status","active":false,"console":"false","complete":"payload","x":944.4166831970215,"y":824.6071472167969,"wires":[]},{"id":"ffc9e3ba.c132","type":"debug","z":"d84e4935.20e1e8","name":"AUX","active":true,"console":"false","complete":"payload","x":1443.9997482299805,"y":509.3570556640625,"wires":[]},{"id":"468152c8.7b48ac","type":"mqtt out","z":"d84e4935.20e1e8","name":"MQTT to broker.hivemq.com","topic":"RMAD/rasta","qos":"1","retain":"false","broker":"701aadff.456294","x":1481.3571853637695,"y":879.0357866287231,"wires":[]},{"id":"f6bcbad5.350518","type":"status","z":"d84e4935.20e1e8","name":"","scope":["e97b794c.807918"],"x":123.67861938476562,"y":153.035737991333,"wires":[["c04deee1.206fb"]]},{"id":"c04deee1.206fb","type":"switch","z":"d84e4935.20e1e8","name":"","property":"status.text","propertyType":"msg","rules":[{"t":"eq","v":"common.status.disconnected","vt":"str"}],"checkall":"true","outputs":1,"x":280.6786193847656,"y":153.03576850891113,"wires":[["d4aad3c4.e28ea"]]},{"id":"d4aad3c4.e28ea","type":"delay","z":"d84e4935.20e1e8","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":421.9285583496094,"y":154.53567695617676,"wires":[["e8a0fdac.623e1"]]},{"id":"f155b7cb.73ab98","type":"function","z":"d84e4935.20e1e8","name":"Correct time","func":"\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);//subscribe response - send gettime\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":648.1785888671875,"y":249.03567504882812,"wires":[["e97b794c.807918"]]},{"id":"b0f4ef2a.663ed","type":"inject","z":"d84e4935.20e1e8","name":"Time","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"10 00 * * *","once":false,"x":364.1785888671875,"y":238.03567504882812,"wires":[["f155b7cb.73ab98"]]},{"id":"a44d3bcc.343a68","type":"mqtt out","z":"d84e4935.20e1e8","name":"MQTT to Azure bn-msd-prod","topic":"devices/rasta/messages/events/$.ct=application%2Fjson&$.ce=utf-8","qos":"1","retain":"false","broker":"a4f9346f.f9c2b8","x":1419.9998779296875,"y":397.32135009765625,"wires":[]},{"id":"b1c97f44.ec4e6","type":"link in","z":"d84e4935.20e1e8","name":"COM out","links":["86944a3f.e67d88"],"x":710.4762229919434,"y":448.5714282989502,"wires":[["e97b794c.807918"]]},{"id":"9e568ca2.5a5e9","type":"debug","z":"d84e4935.20e1e8","name":"Avalanch","active":true,"console":"false","complete":"payload","x":1448.5917892456055,"y":560.008222579956,"wires":[]},{"id":"e8a227b.08065d8","type":"debug","z":"d84e4935.20e1e8","name":"Last Event","active":true,"console":"false","complete":"payload","x":1451.4487075805664,"y":671.4366683959961,"wires":[]},{"id":"a26c13da.2b2a9","type":"debug","z":"d84e4935.20e1e8","name":"Raw data","active":false,"console":"false","complete":"payload","x":1478.5917510986328,"y":724.2938375473022,"wires":[]},{"id":"9ac654f1.bb10c8","type":"debug","z":"d84e4935.20e1e8","name":"Params","active":false,"console":"false","complete":"payload","x":1438.5916290283203,"y":800.0082187652588,"wires":[]},{"id":"fbcd76ff.ae5af8","type":"debug","z":"d84e4935.20e1e8","name":"time event","active":false,"console":"false","complete":"payload","x":948.8513984680176,"y":885.7224044799805,"wires":[]},{"id":"deb15fc5.64892","type":"link out","z":"d84e4935.20e1e8","name":"aux out","links":["f3ea2722.92c888"],"x":1368.778455734253,"y":479.02996730804443,"wires":[]},{"id":"d0c78ee.266ba7","type":"link out","z":"d84e4935.20e1e8","name":"event out","links":["77ab5b6c.8eb924"],"x":1408.7904567718506,"y":601.8749752044678,"wires":[]},{"id":"2d8b9db0.7c71f2","type":"link out","z":"d84e4935.20e1e8","name":"param out","links":["9030f699.101e58"],"x":1400.2109336853027,"y":759.0218315124512,"wires":[]},{"id":"f7203eca.19973","type":"debug","z":"d84e4935.20e1e8","name":"","active":true,"console":"false","complete":"payload","x":1320.2857475280762,"y":1066.2856903076172,"wires":[]},{"id":"4f159599.2b975c","type":"wzzard in","z":"d84e4935.20e1e8","name":"","topic":"BB/+/data","qos":"2","broker":"c92fbebe.7c0d3","x":587.1904373168945,"y":1045.333333015442,"wires":[["ec7e34be.0d82d8"]]},{"id":"c65d1efd.0b762","type":"sys info","z":"d84e4935.20e1e8","name":"","x":994.0952072143555,"y":1124.8572664260864,"wires":[["f7203eca.19973"]]},{"id":"5889efa4.29b6b","type":"inject","z":"d84e4935.20e1e8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":750.0475769042969,"y":1123.1905603408813,"wires":[["c65d1efd.0b762"]]},{"id":"ea0a82e9.d26f1","type":"change","z":"d84e4935.20e1e8","name":"","rules":[{"t":"set","p":"payload.mac_adress","pt":"msg","to":"topic","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1032.6666946411133,"y":1050.3335371017456,"wires":[["f7203eca.19973","468152c8.7b48ac"]]},{"id":"ec7e34be.0d82d8","type":"json","z":"d84e4935.20e1e8","name":"","x":794.3333206176758,"y":1047.0001583099365,"wires":[["ea0a82e9.d26f1"]]},{"id":"d6d77568.2d9a28","type":"function","z":"d84e4935.20e1e8","name":"Set Advertisement","func":"\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x04, 0x00, 0x00, 0x32, 0x00]);//subscribe response - send gettime\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":499.9999694824219,"y":453.33331298828125,"wires":[["e97b794c.807918"]]},{"id":"3ea84cd3.6b6024","type":"inject","z":"d84e4935.20e1e8","name":"Advertisement","topic":"","payload":"","payloadType":"date","repeat":"10800","crontab":"","once":false,"x":279.3332977294922,"y":455.6666536331177,"wires":[["d6d77568.2d9a28"]]},{"id":"ad9e1476.d18de8","type":"debug","z":"d84e4935.20e1e8","name":"","active":true,"console":"false","complete":"false","x":946.6666666666665,"y":518.3333333333333,"wires":[]},{"id":"701aadff.456294","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"a4f9346f.f9c2b8","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"e6cbc464.69a388","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"c92fbebe.7c0d3","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"e6cbc464.69a388","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true}]