[{"id":"33dae4d6.60cddc","type":"tab","label":"RMAD Gateway"},{"id":"92fd8dc0.84ce3","type":"tab","label":"RMAD Dashboard"},{"id":"3c5ef21a.a2cf5e","type":"tab","label":"RMAD Avalanch Alarm"},{"id":"304a8277.ba5dae","type":"mqtt-broker","z":"","broker":"3z75l5.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"g:3z75l5:SmartSwarm342:Rensken","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"a4f2aa70.beaeb8","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"77c845c5.5e814c","type":"mqtt-broker","z":"","broker":"da-gateway-rockslide-iothub.azure-devices.net","port":"8883","tls":"a4f2aa70.beaeb8","clientid":"rockfallgateway","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"devices/rockfallgateway/messages/events/$.ct=application%2Fjson&$.ce=utf-8","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"d8dcfddb.2ae7","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"Helvetica Neue","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Helvetica Neue","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"Helvetica Neue"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#000000","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"c7d32f16.f2d9f","type":"mqtt-broker","z":"","broker":"3z75l5.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"g:3z75l5:SmartSwarm342:Rensken","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"506f9a10.ad4494","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"a4f2aa70.beaeb8","clientid":"renskendev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"567ac106.47b4f","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"b5ffc540.3c7c38","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"f747f84c.76df28","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"a4f2aa70.beaeb8","clientid":"sandneslia","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"39151131.2b3c0e","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"f502c1f8.9b9cc","clientid":"f46dev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"cf4ae4c9.751098","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"c6006e60.f9c09","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"f502c1f8.9b9cc","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"f502c1f8.9b9cc","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"181d4857.27df98","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"Helvetica Neue","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Helvetica Neue","edited":false},"customTheme":{"name":"","default":"#4B7930","baseColor":"#4B7930","baseFont":"Helvetica Neue"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#000000","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"caf02e50.14b2a","type":"ui_group","z":"","name":"Group","tab":"","order":null,"disp":true,"width":"6"},{"id":"aec3f2f8.af375","type":"ui_tab","z":"","name":"RMAD Dashboard","icon":"dashboard"},{"id":"d76f1d66.e278a","type":"ui_group","z":"","name":"AUX data","tab":"aec3f2f8.af375","order":2,"disp":true,"width":"14"},{"id":"98dde1c3.49879","type":"ui_group","z":"","name":"Mesh status","tab":"aec3f2f8.af375","order":6,"disp":true,"width":"6"},{"id":"3052b100.90849","type":"ui_group","z":"","name":"Send to RMAD-EDGE","tab":"aec3f2f8.af375","order":1,"disp":true,"width":"6"},{"id":"470717df.c91e38","type":"ui_group","z":"","name":"Last events","tab":"aec3f2f8.af375","order":3,"disp":true,"width":"9"},{"id":"ba16e19a.cce32","type":"ui_group","z":"","name":"Prosessing parameters","tab":"aec3f2f8.af375","order":4,"disp":true,"width":"15"},{"id":"52f759fd.020d68","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"f7618743.fddf18","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"34d15e86.b243f2","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"90d9832d.16ec8","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"325b3de4.a4b0a2","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"90d9832d.16ec8","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"3bce038e.8348cc","type":"function","z":"33dae4d6.60cddc","name":"Hello to serialmux","func":"msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x04, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37]);\n\n\nreturn msg;","outputs":1,"noerr":0,"x":648,"y":180,"wires":[["3e1e8c42.cbd914"]]},{"id":"4734e98e.916208","type":"inject","z":"33dae4d6.60cddc","name":"Connect","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":399.4285202026367,"y":87.14283752441406,"wires":[["3bce038e.8348cc"]]},{"id":"4143527c.31c8cc","type":"debug","z":"33dae4d6.60cddc","name":"from mux","active":false,"console":false,"complete":"payload","x":1446.333023071289,"y":153.4761619567871,"wires":[]},{"id":"5c4f28b5.14d1a8","type":"function","z":"33dae4d6.60cddc","name":"Subscribe","func":"msg.payload = msg.payload.toString('hex');\n\nif (msg.payload == \"a740a0f500050000010004\") //hell0 response - send subscribe\n{\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0B, 0x00, 0x00, 0x16, 0xFF, 0xFF, 0xFF, 0x50, 0xFF, 0xFF, 0xFF, 0x50]);\n\nreturn msg;\n} else if (msg.payload == \"a740a0f5000400000101\")\n{\n//msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0B, 0x00, 0x00, 0x16, 0xFF, 0xFF, 0xFF, 0x50, 0xFF, 0xFF, 0xFF, 0x50]);\n\nreturn msg;\n} else if (msg.payload == \"a740a0f5000400001600\") //subscribe response - send gettime\n{\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);\n\nreturn msg;\n} else\n{\nreturn null;\n\n}\n","outputs":1,"noerr":0,"x":656.3809547424316,"y":316.61901473999023,"wires":[["3e1e8c42.cbd914"]]},{"id":"435550bd.6ef47","type":"function","z":"33dae4d6.60cddc","name":"Payload to hexstring","func":"msg.payload = msg.payload.toString('hex');\n\nreturn msg;\n","outputs":1,"noerr":0,"x":1214.5238037109375,"y":152.71425247192383,"wires":[["4143527c.31c8cc"]]},{"id":"3e1e8c42.cbd914","type":"tcp request","z":"33dae4d6.60cddc","server":"192.168.1.1","port":"9900","out":"sit","splitc":"0","name":"Serial_MUX","x":916.7142944335938,"y":317.71424102783203,"wires":[["435550bd.6ef47","64c5df95.f9345","8427c2e1.ab161"]]},{"id":"9075f9da.ebc118","type":"link in","z":"33dae4d6.60cddc","name":"loop in","links":["64c5df95.f9345"],"x":504.7143020629883,"y":369.2856845855713,"wires":[["5c4f28b5.14d1a8"]]},{"id":"64c5df95.f9345","type":"link out","z":"33dae4d6.60cddc","name":"loop out","links":["9075f9da.ebc118"],"x":1145.7143020629883,"y":369.95237159729004,"wires":[]},{"id":"8427c2e1.ab161","type":"function","z":"33dae4d6.60cddc","name":"SmaertMeshIP to JSON","func":"msg.payload = msg.payload.toString('hex');\n\nvar msg_out=[];\n\nif (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"04\") // inkommende pakke er en \"data\"\n{\n    \n    while (msg.payload.length>0){\n    \n        var msg2 = {payload:{header_token: msg.payload.substring(0,8), \n            packet_type: msg.payload.substring(16,18),\n            notifType: msg.payload.substring(18,20),\n            payload_length: msg.payload.substring(8,12),\n            macAddress: msg.payload.substring(44,60),\n            timestamp: msg.payload.substring(20,44),\n            srcPort: msg.payload.substring(60,64),\n            dstPort: msg.payload.substring(64,68),\n            data: msg.payload.substring(68,12+(2* parseInt(msg.payload.substring(8,12),16)))}};\n    \n        msg_out.push(msg2);\n    \n        msg.payload = msg.payload.substring(12+(2* parseInt(msg.payload.substring(8,12),16)));\n    \n    }\n\n    return [msg_out,null,null];\n \n}else if (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"06\" && msg.payload.substring(36,38) == \"80\") // inkommende pakke er en \"device health report\"\n{  \n    \n    var healthReport = {payload:{\n        //notiftype:msg.payload.substring(36,38), \n        battery_mote: parseInt(msg.payload.substring(52,56),16)/1000,\n        temperature_mote: hexToSignedInt(msg.payload.substring(50,52)),\n        //payload: msg.payload,\n        mac_adress: msg.payload.substring(20,36),\n        packet_type: \"device_healthReport\"}};\n    \n    return [null,healthReport,null];\n    \n}else if (msg.payload.substring(16,18) == \"17\") // inkommende pakke er en \"networktime\"\n{    \n \n    network_time = parseInt(msg.payload.substring(28,44),16)*1000 + parseInt(msg.payload.substring(44,52),16)/1000; //tidspungt når pakke ble sendt - msec since 1 january 1970 \n    gateway_time = new Date().getTime(); //msec since 1 january 1970  \n    time_diff = gateway_time - network_time;\n\n    flow.set('time_diff',time_diff);\n\n    var time_msg = {payload:{\n\n        network_time: network_time,\n        gateway_time: gateway_time,\n        time_diff: time_diff}};\n    \n    return [null,null,time_msg];\n    \n}else{\n    \n    return [null,null,null];\n}\n\n\nfunction hexToSignedInt(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = \"0\" + hex;\n    }\n    var num = parseInt(hex, 16);\n    var maxVal = Math.pow(2, hex.length / 2 * 8);\n    if (num > maxVal / 2 - 1) {\n        num = num - maxVal;\n    }\n    return num;\n}\n","outputs":"3","noerr":0,"x":676.7143020629883,"y":705.785717010498,"wires":[["2cb83f99.87ed3"],["4a712dc6.9298c4","b2793e7d.196df"],["be2050d5.a22f4"]]},{"id":"2cb83f99.87ed3","type":"function","z":"33dae4d6.60cddc","name":"RMAD to Azure","func":"if (msg.payload.notifType == \"04\") //is data notification\n{\n  \n\nvar time_diff = flow.get('time_diff') || 0;\n\nif (msg.payload.data.substring(0,2) == \"07\")  //is AUX datapaket\n{\n    \nvar aux_is_signedint = parseInt(msg.payload.data.substring(16,18),16).toString(2).split('').map(x => x === '1');\nvar num_aux = (msg.payload.data.length - 18) / 4;\nvar aux_data = [];\n\nvar i;\nfor (i = 0; i < num_aux; i++) { \n    if (aux_is_signedint[i]) {\n        aux_data[i] = Math.round((hexToSignedInt(msg.payload.data.substring(18+4*i+2,18+4*i+4)+msg.payload.data.substring(18+4*i,18+4*i+2)))*1000)/1000; //*2.5/65536 kommentert ut utregning til volt\n    } else {\n        aux_data[i] = Math.round((parseInt(msg.payload.data.substring(18+4*i+2,18+4*i+4)+msg.payload.data.substring(18+4*i,18+4*i+2),16))*1000)/1000; //*2.5/65536 kommentert ut utregning til volt for å test triggnivå\n    }\n}\n\n\nvar aux_msg = {\n\n                payload:    \n\n\n                {config:    {type:parseInt(msg.payload.data.substring(2,3),16),\n                                        sw:parseInt(msg.payload.data.substring(3,4),16),\n                                        hw:parseInt(msg.payload.data.substring(4,5),16),\n                                        radio:parseInt(msg.payload.data.substring(5,6),16)},\n                                        \n                            state:     {charge_enabled: ((parseInt(msg.payload.data.substring(6,8),16) & 1) == 1) ? 1 : 0,\n                                        fast_charge: ((parseInt(msg.payload.data.substring(6,8),16) & 2) == 2) ? 1 : 0,\n                                        acmp1_out: ((parseInt(msg.payload.data.substring(6,8),16) & 4) == 4) ? 1 : 0,\n                                        acmp2_out: ((parseInt(msg.payload.data.substring(6,8),16) & 8) == 8) ? 1 : 0,\n                                        acmp_vddref: ((parseInt(msg.payload.data.substring(6,8),16) & 16) == 16) ? 1 : 0},\n                                    \n                            //charge_enabled: Boolean(parseInt(msg.payload.data.substring(6,8),16) & 1 == 1),\n                            battery: Math.round((parseInt(msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16)*(3*2.5/65536)+0.69)*1000)/1000,\n                            temperature: hexToSignedInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14),16)/100,\n                            aux: aux_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"aux_data\"\n                            },\n                        \n\n};\n            \n\nreturn [aux_msg,null,null,null,null];\n\n} \nelse if (msg.payload.data.substring(0,2) == \"00\")  //is SVV avalanch packet\n{\n \nvar svv_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46))),\n                            G4_std: Math.round(parseFloatHex(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_max: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G3_max: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G4_max: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78),16),\n                            G2_min: parseInt(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82),16),\n                            G3_min: parseInt(msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86),16),\n                            G4_min: parseInt(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(98,100) + msg.payload.data.substring(96,98),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102),16),\n                            G4_maxS: parseInt(msg.payload.data.substring(106,108) + msg.payload.data.substring(104,106),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(110,112) + msg.payload.data.substring(108,110),16),\n                            G2_minS: parseInt(msg.payload.data.substring(114,116) + msg.payload.data.substring(112,114),16),\n                            G3_minS: parseInt(msg.payload.data.substring(118,120) + msg.payload.data.substring(116,118),16),\n                            G4_minS: parseInt(msg.payload.data.substring(122,124) + msg.payload.data.substring(120,122),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_svv\"\n                            },\n                            \n\n};  \n\n \n  \nreturn [null,svv_msg,null,null,null];\n    \n} \nelse if (msg.payload.data.substring(0,2) == \"08\")  //is JBV avalanch packet\n{\n \n  var jbv_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: parseInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: parseInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: parseInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_jbv\"\n                            },\n                            \n\n};  \n\n \n  \nreturn [null,jbv_msg,null,null,null]; \n\n} \nelse if (msg.payload.data.substring(0,2) == \"0a\") //is event packet\n{  \n\nif (msg.payload.data.length == 170){ var event_msg = {payload:   //4 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G4_std: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            G3_mean: Math.round(parseFloatHex(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92))),\n                            G4_mean: Math.round(parseFloatHex(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(108,110) + msg.payload.data.substring(106,108),16),\n                            G2_max: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                            G3_max: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n                            G4_max: parseInt(msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(124,126) + msg.payload.data.substring(122,124),16),\n                            G2_min: parseInt(msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128),16),\n                            G3_min: parseInt(msg.payload.data.substring(132,134) + msg.payload.data.substring(130,132),16),\n                            G4_min: parseInt(msg.payload.data.substring(136,138) + msg.payload.data.substring(134,136),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(140,142) + msg.payload.data.substring(138,140),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(144,146) + msg.payload.data.substring(142,144),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(148,150) + msg.payload.data.substring(146,148),16),\n                            G4_maxS: parseInt(msg.payload.data.substring(152,154) + msg.payload.data.substring(150,152),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(156,158) + msg.payload.data.substring(154,156),16),\n                            G2_minS: parseInt(msg.payload.data.substring(160,162) + msg.payload.data.substring(158,160),16),\n                            G3_minS: parseInt(msg.payload.data.substring(164,166) + msg.payload.data.substring(162,164),16),\n                            G4_minS: parseInt(msg.payload.data.substring(168,170) + msg.payload.data.substring(166,168),16),\n                            \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n                            \n\n} \n\n} \nelse if (msg.payload.data.length == 138){ var event_msg = {payload:   //3 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G3_mean: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            G2_max: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96),16),\n                            G3_max: parseInt(msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104),16),\n                            G2_min: parseInt(msg.payload.data.substring(108,110) + msg.payload.data.substring(106,108),16),\n                            G3_min: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(124,126) + msg.payload.data.substring(122,124),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128),16),\n                            G2_minS: parseInt(msg.payload.data.substring(132,134) + msg.payload.data.substring(130,132),16),\n                            G3_minS: parseInt(msg.payload.data.substring(136,138) + msg.payload.data.substring(134,136),16),\n                           \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n                            \n\n} \n\n} \nelse if (msg.payload.data.length == 106){var event_msg = {payload:  //2 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76),16),\n                            G2_max: parseInt(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80),16),\n                           \n                            G1_min: parseInt(msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84),16),\n                            G2_min: parseInt(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96),16),\n                          \n                            G1_minS: parseInt(msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            G2_minS: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104),16),\n                        \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n\n\n}\n\n\n} \nelse if (msg.payload.data.length == 74) {var event_msg = {payload:  //1 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60),16),\n                           \n                            G1_min: parseInt(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72),16),\n                            \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n\n\n}\n}\nreturn [null,event_msg,null,null,null];\n\n} \nelse if (msg.payload.data.substring(0,2) == \"09\")  //is JBV diff avalanch packet\n{\n \n \n \n var jbv_diff_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: hexToSignedInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: hexToSignedInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: hexToSignedInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: hexToSignedInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_jbv\"\n                            },\n \n    \n};  \n\n \n  \nreturn [null,jbv_diff_msg,null,null,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"03\")  //is Recent event packet\n{\n \n var recent_event_msg = {payload:\n \n\n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            sps: parseInt(msg.payload.data.substring(32,34)+msg.payload.data.substring(30,32),16)/100,\n                            num_samples: parseInt(msg.payload.data.substring(36,38)+msg.payload.data.substring(34,36),16),\n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20) + msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8),16)*1000 + parseInt(msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28) + msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"recent_event\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,recent_event_msg,null,null];      \n\n} \nelse if (msg.payload.data.substring(0,2) == \"06\")  //is raw dat packet\n{\n    \nvar num_raw = (msg.payload.data.length - 24) / 4;\nvar raw_data = [];\n\nvar i;\nfor (i = 0; i < num_raw; i++) { \n\n        raw_data[i] = parseInt(msg.payload.data.substring(24+4*i+2,24+4*i+4)+msg.payload.data.substring(24+4*i,24+4*i+2),16);\n\n}\n \n var raw_data_msg = {payload:\n \n                \n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            channels: parseInt(msg.payload.data.substring(6,8),16),\n                            \n                            scan_start: parseInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14)+msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16),\n                            scan_stop: parseInt(msg.payload.data.substring(22,24)+msg.payload.data.substring(20,22)+msg.payload.data.substring(18,20)+msg.payload.data.substring(16,18),16),\n                            \n                            samples: raw_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"raw_data\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,null,raw_data_msg,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"0a\")  //is raw diff dat packet\n{\n    \nvar num_raw = (msg.payload.data.length - 24) / 4;\nvar raw_data = [];\n\nvar i;\nfor (i = 0; i < num_raw; i++) { \n\n        raw_data[i] = hexToSignedInt(msg.payload.data.substring(24+4*i+2,24+4*i+4)+msg.payload.data.substring(24+4*i,24+4*i+2),16);\n\n}\n \n var raw_data_diff_msg = {payload:\n \n                \n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            channels: parseInt(msg.payload.data.substring(6,8),16),\n                            \n                            scan_start: parseInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14)+msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16),\n                            scan_stop: parseInt(msg.payload.data.substring(22,24)+msg.payload.data.substring(20,22)+msg.payload.data.substring(18,20)+msg.payload.data.substring(16,18),16),\n                            \n                            samples: raw_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"raw_data\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,null,raw_data_diff_msg,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"04\")  //is adjustable param pacjet\n{\n \nvar par_msg = {payload:\n \n\n                {           \n                    \n                            Min_samples: parseInt(msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16),\n                            Sample_cont: parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12),16),\n                            Max_samples: parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16),\n                            \n                            \n                            \n                            G1_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28))),\n                            G2_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36))),\n                            \n                            G3_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G4_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G2_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G3_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G4_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            \n                            Trig_level: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            Start_delay: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            \n                            Trig_ch0: parseInt(msg.payload.data.substring(106,108),16),\n                            Trig_ch1: parseInt(msg.payload.data.substring(108,110),16),\n                            \n                            Amp_trig: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                            Amp_logging: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n          \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"prosessing_params\"\n                            },\n                            \n\n};\n\n \n  \nreturn [null,null,null,null,par_msg];\n}\n\n\n}\n\nfunction hexToSignedInt(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = \"0\" + hex;\n    }\n    var num = parseInt(hex, 16);\n    var maxVal = Math.pow(2, hex.length / 2 * 8);\n    if (num > maxVal / 2 - 1) {\n        num = num - maxVal;\n    }\n    return num;\n}\n\nfunction parseFloatHex(str) {\n    var float = 0, sign, order, mantiss,exp,\n    int = 0, multi = 1;\n    int = parseInt(str,16);\n    sign = (int>>>31)?-1:1;\n    exp = (int >>> 23 & 0xff) - 127;\n    mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n    for (i=0; i<mantissa.length; i+=1){\n        float += parseInt(mantissa[i])? Math.pow(2,exp):0;\n        exp--;\n    }\n    return float*sign;\n}","outputs":"5","noerr":0,"x":1027.706314086914,"y":602.1309299468994,"wires":[["61aa980f.65c7a8","f4b3191.101b7e8","e27cf160.08ec9","b2793e7d.196df"],["d3f67a41.8066a8","e27cf160.08ec9","b2793e7d.196df","1470bb8e.117ea4"],["777804a5.a6461c","805e4969.982e18","e27cf160.08ec9"],["a19c720a.8320f","e27cf160.08ec9","dd0d07c.94179f8"],["750c6f48.5bd8f","6641b9bb.a6d1b8","e27cf160.08ec9"]]},{"id":"4a712dc6.9298c4","type":"debug","z":"33dae4d6.60cddc","name":"mesh status","active":false,"console":"false","complete":"payload","x":947.75,"y":828.892879486084,"wires":[]},{"id":"61aa980f.65c7a8","type":"debug","z":"33dae4d6.60cddc","name":"AUX","active":true,"console":"false","complete":"payload","x":1412.5710372924805,"y":470.7856321334839,"wires":[]},{"id":"f1149c3c.ac514","type":"status","z":"33dae4d6.60cddc","name":"","scope":["3e1e8c42.cbd914"],"x":123.67861938476562,"y":153.035737991333,"wires":[["36a10c93.543b44"]]},{"id":"36a10c93.543b44","type":"switch","z":"33dae4d6.60cddc","name":"","property":"status.text","propertyType":"msg","rules":[{"t":"eq","v":"common.status.disconnected","vt":"str"}],"checkall":"true","outputs":1,"x":280.6786193847656,"y":153.03576850891113,"wires":[["f4bfd066.1f866"]]},{"id":"f4bfd066.1f866","type":"delay","z":"33dae4d6.60cddc","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":421.9285583496094,"y":154.53567695617676,"wires":[["3bce038e.8348cc"]]},{"id":"604a3b45.48c2c4","type":"function","z":"33dae4d6.60cddc","name":"Correct time","func":"\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);//subscribe response - send gettime\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":648.1785888671875,"y":249.03567504882812,"wires":[["3e1e8c42.cbd914"]]},{"id":"41e653aa.e5ff7c","type":"inject","z":"33dae4d6.60cddc","name":"Get Time","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"10 00 * * *","once":false,"x":394.17858123779297,"y":248.03567504882812,"wires":[["604a3b45.48c2c4"]]},{"id":"ab530d91.ce747","type":"function","z":"92fd8dc0.84ce3","name":"Sort AUX","func":"var msg2 = msg;\n\nmsg2.payload.reverse();\n\nvar aux_array = [];\nvar mac_array = [];\nvar node_string = [];\nvar mac_string,battery_string,temperature_string,time_string,aux_string; \nvar i,k;\nvar j = 0;\nvar exist;\n\nfor (i = 0; i < msg2.payload.length; i++){\n    \n    if (msg2.payload[i] !== 0){\n        \n        for (k=0; k < aux_array.length; k++){\n            \n            if (msg2.payload[i].mac_adress == aux_array[k].mac_adress){\n                exist = true;\n                break;\n            }\n            exist = false;\n          \n        }\n        \n        if (!exist){\n            \n            aux_array[j] = msg2.payload[i];\n            mac_array[j] = msg2.payload[i].mac_adress;\n        \n            mac_string = msg2.payload[i].mac_adress;\n            type_string = msg2.payload[i].config.type;\n            sw_string = msg2.payload[i].config.sw;\n            hw_string = msg2.payload[i].config.hw;\n            chargeenable_string = msg2.payload[i].state.charge_enabled;\n            fastcharge_string = msg2.payload[i].state.fast_charge;\n            acom1_string = msg2.payload[i].state.acmp1_out;\n            acom2_string = msg2.payload[i].state.acmp2_out;\n            acmp_vddref_string = msg2.payload[i].state.acmp_vddref;\n            battery_string = msg2.payload[i].battery;\n            temperature_string = msg2.payload[i].temperature;\n            const time = new Date(msg2.payload[i].packet_sent + 2*3600000)\n            time_string = time.getHours() + \":\" + time.getMinutes() + \":\" + time.getSeconds();\n            \n            \n            aux_string = msg2.payload[i].aux;\n        \n            node_string[j] =  mac_string.concat(\"--\",type_string,\":\",sw_string,\":\",hw_string,\"--\",chargeenable_string,\":\",fastcharge_string,\":\",acom1_string,\":\",acom2_string,\":\",acmp_vddref_string,\"--\",time_string,\"--\",battery_string,\"--\",temperature_string,\"--\",aux_string,\"       \\n\");\n        \n            j++\n \n            \n        }\n\n    \n    }\n    \n}\n\nvar table_string = node_string.sort().join(\"\\n\");\nvar sort_mac_array = mac_array.sort();\n\n\nvar string = {payload: table_string};\nvar sorted_mac_array = {payload: sort_mac_array};\n\nflow.set('sorted_mac_array',sorted_mac_array);\n\n\nreturn [string, sorted_mac_array ,msg2.payload[0]];\n\n","outputs":"3","noerr":0,"x":502.5714874267578,"y":281.7500114440918,"wires":[["1e73f72f.33f079","ef38f8c.b0b7b08"],["ef38f8c.b0b7b08"],["ef38f8c.b0b7b08"]]},{"id":"1e73f72f.33f079","type":"ui_text","z":"92fd8dc0.84ce3","group":"d76f1d66.e278a","order":0,"width":"13","height":"7","name":"AUX table","label":"","format":"{{msg.payload}}","layout":"row-left","x":773.2143096923828,"y":194.78964519500732,"wires":[]},{"id":"31040509.18463a","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":1,"width":0,"height":0,"label":"Transport mode","color":"","bgcolor":"","icon":"","payload":"12","payloadType":"num","topic":"","x":1170.0000839233398,"y":354.2856454849243,"wires":[["3a715bf9.edca24"]]},{"id":"d87d646.d2dfc98","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":"false","complete":"true","x":1700.0003356933594,"y":501.4285583496094,"wires":[]},{"id":"40f262f9.a26d7c","type":"link in","z":"33dae4d6.60cddc","name":"to mote in","links":["86174797.3f93b8"],"x":677.1428571428571,"y":428.57142857142856,"wires":[["3e1e8c42.cbd914"]]},{"id":"86174797.3f93b8","type":"link out","z":"92fd8dc0.84ce3","name":"to mote out","links":["40f262f9.a26d7c"],"x":1705.7144832611084,"y":637.1428298950195,"wires":[]},{"id":"3a715bf9.edca24","type":"function","z":"92fd8dc0.84ce3","name":"NGI packet to logger","func":"\nvar mac_address = flow.get('mac_address') || 0;\n\n\nvar mac_1  = parseInt(mac_address.payload.toString().substr(0,2),16);\nvar mac_2  = parseInt(mac_address.payload.toString().substr(2,2),16);\nvar mac_3  = parseInt(mac_address.payload.toString().substr(4,2),16);\nvar mac_4  = parseInt(mac_address.payload.toString().substr(6,2),16);\nvar mac_5  = parseInt(mac_address.payload.toString().substr(8,2),16);\nvar mac_6  = parseInt(mac_address.payload.toString().substr(10,2),16);\nvar mac_7  = parseInt(mac_address.payload.toString().substr(12,2),16);\nvar mac_8  = parseInt(mac_address.payload.toString().substr(14,2),16);\n\n\n//msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);//subscribe response - send gettime\n\n//var msg_out = {payload: new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x12, 0x00, 0x00, 0x2c ,0x00, 0x17, 0x0d, 0x00, 0x00, 0x30, 0xe2, 0xa9, 0x01, 0xf0, 0xb9, 0xf0, 0xb9,  0x00, msg.payload, mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8])};//set transport mode\n\nvar msg_out = {payload: new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x12, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9,  0x00, msg.payload])};//set transport mode\n\n\n//mac = new Buffer ([0x00, 0x17, 0x0d, 0x00, 0x00, 0x30, 0xe2, 0xa9]);//set transport mode\n\n//tail = new Buffer ([0x01, 0xf0, 0xb9, 0xf0, 0xc9, 0x00, 0x0c]);//set transport mode\n\n\nreturn [msg_out, mac_address];\n\n","outputs":"2","noerr":0,"x":1432.8572006225586,"y":560.0000171661377,"wires":[["d87d646.d2dfc98","86174797.3f93b8"],[]]},{"id":"424cf5fd.13225c","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":2,"width":0,"height":0,"label":"External reset","color":"","bgcolor":"","icon":"","payload":"0","payloadType":"str","topic":"","x":1165.7142715454102,"y":442.85709953308105,"wires":[["3a715bf9.edca24"]]},{"id":"dc2fc41e.4fa5c8","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":3,"width":0,"height":0,"label":"Get AUX","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"","x":1145.7142715454102,"y":527.1428356170654,"wires":[["3a715bf9.edca24"]]},{"id":"21cd5526.eebdda","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":4,"width":0,"height":0,"label":"Start Logging","color":"","bgcolor":"","icon":"","payload":"4","payloadType":"num","topic":"","x":1148.5712585449219,"y":608.5714359283447,"wires":[["3a715bf9.edca24"]]},{"id":"c0c85a7a.94a318","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":5,"width":0,"height":0,"label":"Get Params","color":"","bgcolor":"","icon":"","payload":"5","payloadType":"num","topic":"","x":1144.2859268188477,"y":689.9999885559082,"wires":[["3a715bf9.edca24"]]},{"id":"785fff33.3ca1b","type":"ui_numeric","z":"92fd8dc0.84ce3","name":"","label":"Mac number","group":"3052b100.90849","order":10,"width":0,"height":0,"passthru":true,"topic":"","format":"{{value}}","min":"1","max":"101","step":1,"x":1142.3807525634766,"y":144.7617883682251,"wires":[["ba85602a.5c73"]]},{"id":"d7d1b4de.b4c9c8","type":"ui_text","z":"92fd8dc0.84ce3","group":"3052b100.90849","order":11,"width":0,"height":0,"name":"","label":"Mac address","format":"{{msg.payload}}","layout":"row-spread","x":1677.1427383422852,"y":208.57140350341797,"wires":[]},{"id":"ba85602a.5c73","type":"function","z":"92fd8dc0.84ce3","name":"Get mac address from number","func":"var sorted_mac_array = flow.get('sorted_mac_array') || 0\n\nvar mac_address = {payload:sorted_mac_array.payload[msg.payload-1]}\n\nflow.set('mac_address',mac_address);\n\nreturn mac_address;","outputs":1,"noerr":0,"x":1422.8570556640625,"y":144.2856855392456,"wires":[["a539a391.354a2","d7d1b4de.b4c9c8"]]},{"id":"a539a391.354a2","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":"false","complete":"true","x":1662.857177734375,"y":102.85714054107666,"wires":[]},{"id":"56e71693.60ce98","type":"function","z":"92fd8dc0.84ce3","name":"Sort Events","func":"\n\n//msg.payload.reverse();\n\nvar event_array = [];\nvar mac_array = [];\nvar node_string = [];\nvar mac_string,flash_ID_string,sps_string,num_samples_string,trigg_timestamp_string,packet_sent_string; \nvar i,k;\nvar j = 0;\nvar exist;\n\nfor (i = 0; i < msg.payload.length; i++){\n    \n    if (msg.payload[i] !== 0){\n        \n\n            //event_array[i] = msg.payload[i];\n           // mac_array[i] = msg.payload[i].mac_adress;\n        \n            mac_string = msg.payload[i].mac_adress;\n            flash_ID_string = msg.payload[i].flash_ID;\n            sps_string = msg.payload[i].sps;\n            num_samples_string = msg.payload[i].num_samples;\n            //trigg_timestamp_string = msg.payload[i].trigg_timestamp;\n            //packet_sent_string = msg.payload[i].packet_sent;\n            \n            const trigg_time = new Date(msg.payload[i].trigg_timestamp + 2*3600000)\n            trigg_timestamp_string = trigg_time.getHours() + \":\" + trigg_time.getMinutes() + \":\" + trigg_time.getSeconds();\n            \n            \n            const time = new Date(msg.payload[i].packet_sent + 2*3600000)\n            packet_sent_string = time.getHours() + \":\" + time.getMinutes() + \":\" + time.getSeconds();\n            \n            \n            //aux_string = msg.payload[i].aux;\n        \n            node_string[j] =  trigg_timestamp_string.concat(\"--\",mac_string,\"--\",flash_ID_string,\"--\",sps_string,\"--\",num_samples_string,\"       \\n\");  //\"--\",packet_sent_string,\n            j++\n            \n        }\n\n\n}\n\nvar table_string = node_string.reverse().join(\"\\n\");\n//var sort_mac_array = mac_array.sort();\n\n\nvar string = {payload: table_string};\n//var sorted_mac_array = {payload: sort_mac_array};\n\n//flow.set('sorted_mac_array',sorted_mac_array);\n\n\nreturn [string, msg.payload[100]];\n","outputs":"2","noerr":0,"x":522.8572807312012,"y":532.8571395874023,"wires":[["6f1c8b3a.1572f4"],[]]},{"id":"6f1c8b3a.1572f4","type":"ui_text","z":"92fd8dc0.84ce3","group":"470717df.c91e38","order":0,"width":"8","height":"7","name":"Event table","label":"","format":"{{msg.payload}}","layout":"row-left","x":772.3216018676758,"y":549.642951965332,"wires":[]},{"id":"55c9e7a.48e1c18","type":"function","z":"92fd8dc0.84ce3","name":"Sort param","func":"var msg3 = msg;\n\nmsg3.payload.reverse();\n\nvar event_array = [];\nvar mac_array = [];\nvar node_string = [];\nvar mac_string,Min_samples_string,Sample_cont_string,Max_samples_string;\nvar G1_std_lim_string,G2_std_lim_string,G3_std_lim_string,G4_std_lim_string;\nvar G1_cont_lim_string,G2_cont_lim_string,G3_cont_lim_string,G4_cont_lim_string;\nvar Trig_level_string,Start_delay_string,Trig_ch0_string,Trig_ch1_string,Amp_trig_string,Amp_logging_string; \nvar i,k;\nvar j = 0;\nvar exist;\n\n\nfor (i = 0; i < msg3.payload.length; i++){\n    \n    if (msg3.payload[i] !== 0){\n        \n        for (k=0; k < mac_array.length; k++){\n            \n            if (msg3.payload[i].mac_adress == event_array[k].mac_adress){\n                exist = true;\n                break;\n            }\n            \n            exist = false;\n          \n        }\n        \n        if (!exist){\n            \n            event_array[j] = msg3.payload[i];\n            mac_array[j] = msg3.payload[i].mac_adress;\n        \n            mac_string = msg3.payload[i].mac_adress;\n            Min_samples_string = msg3.payload[i].Min_samples;\n            Sample_cont_string = msg3.payload[i].Sample_cont;\n            Max_samples_string = msg3.payload[i].Max_samples;\n            G1_std_lim_string = msg3.payload[i].G1_std_lim;\n            G2_std_lim_string = msg3.payload[i].G2_std_lim;\n            G3_std_lim_string = msg3.payload[i].G3_std_lim;\n            G4_std_lim_string = msg3.payload[i].G4_std_lim;\n            G1_cont_lim_string = msg3.payload[i].G1_cont_lim;\n            G2_cont_lim_string = msg3.payload[i].G2_cont_lim;\n            G3_cont_lim_string = msg3.payload[i].G3_cont_lim;\n            G4_cont_lim_string = msg3.payload[i].G4_cont_lim;\n            \n            Trig_level_string = msg3.payload[i].Trig_level;\n            Start_delay_string = msg3.payload[i].Start_delay;\n            Trig_ch0_string = msg3.payload[i].Trig_ch0;\n            Trig_ch1_string = msg3.payload[i].Trig_ch1;\n            Amp_trig_string = msg3.payload[i].Amp_trig;\n            Amp_logging_string = msg3.payload[i].Amp_logging;\n            \n            \n            const time = new Date(msg3.payload[i].packet_sent + 2*3600000)\n            time_string = time.getHours() + \":\" + time.getMinutes() + \":\" + time.getSeconds();\n            \n            \n            node_string[j] =  mac_string.concat(\"--\",Min_samples_string,\":\",Sample_cont_string,\":\",Max_samples_string,\"--\",\n            G1_std_lim_string,\":\",G2_std_lim_string,\":\",G3_std_lim_string,\":\",G4_std_lim_string,\"--\",\n            G1_cont_lim_string,\":\",G2_cont_lim_string,\":\",G3_cont_lim_string,\":\",G4_cont_lim_string,\"--\",\n            Trig_level_string,\":\",Start_delay_string,\"--\",\n            Trig_ch0_string,\":\",Trig_ch1_string,\":\",Amp_trig_string,\":\",Amp_logging_string,\"--\",time_string,\"\\n\");\n        \n            j++\n \n            \n        }\n\n    \n    }\n    \n}\n\nvar table_string = node_string.sort().join(\"\\n\");\nvar sort_mac_array = mac_array.sort();\n\n\nvar string = {payload: table_string};\nvar sorted_mac_array = {payload: sort_mac_array};\n\n//flow.set('sorted_mac_array',sorted_mac_array);\n\n\nreturn [string, sorted_mac_array ,msg3.payload[0]];\n\n","outputs":"3","noerr":0,"x":505.2499771118164,"y":643.9643001556396,"wires":[["f600b338.8b26"],[],[]]},{"id":"f600b338.8b26","type":"ui_text","z":"92fd8dc0.84ce3","group":"ba16e19a.cce32","order":0,"width":"15","height":"7","name":"Param table","label":"","format":"{{msg.payload}}","layout":"row-left","x":773.749885559082,"y":647.5396213531494,"wires":[]},{"id":"d3f67a41.8066a8","type":"debug","z":"33dae4d6.60cddc","name":"Event","active":true,"console":"false","complete":"payload","x":1414.306022644043,"y":561.4368095397949,"wires":[]},{"id":"777804a5.a6461c","type":"debug","z":"33dae4d6.60cddc","name":"Recent Event","active":false,"console":"false","complete":"payload","x":1442.877296447754,"y":665.7223930358887,"wires":[]},{"id":"a19c720a.8320f","type":"debug","z":"33dae4d6.60cddc","name":"Raw data","active":false,"console":"false","complete":"payload","x":1421.4489135742188,"y":757.150972366333,"wires":[]},{"id":"750c6f48.5bd8f","type":"debug","z":"33dae4d6.60cddc","name":"Params","active":false,"console":"false","complete":"payload","x":1420.0202026367188,"y":845.7225112915039,"wires":[]},{"id":"be2050d5.a22f4","type":"debug","z":"33dae4d6.60cddc","name":"time event","active":false,"console":"false","complete":"payload","x":924.0299835205078,"y":883.7581310272217,"wires":[]},{"id":"ef38f8c.b0b7b08","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":"false","complete":"false","x":772.6744842529296,"y":311.89933776855463,"wires":[]},{"id":"7088c981.461498","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":"false","complete":"payload","x":516.9642639160156,"y":589.0381526947021,"wires":[]},{"id":"ab97f1ac.2d791","type":"buffer-array","z":"92fd8dc0.84ce3","name":"","bufferLen":"19","startWhenFilled":false,"x":316.8343963623047,"y":534.8254528045654,"wires":[["56e71693.60ce98","d8080e06.56af"]]},{"id":"d8080e06.56af","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":"false","complete":"payload","x":513.9853363037109,"y":439.43990325927734,"wires":[]},{"id":"bf87c198.7087d","type":"buffer-array","z":"92fd8dc0.84ce3","name":"","bufferLen":"101","startWhenFilled":false,"x":301.44886016845703,"y":648.5795283317566,"wires":[["7088c981.461498","55c9e7a.48e1c18"]]},{"id":"a7364581.cc3d98","type":"buffer-array","z":"92fd8dc0.84ce3","name":"","bufferLen":"101","startWhenFilled":false,"x":302.8774719238281,"y":280.00810146331787,"wires":[["6072a4f2.25e68c","ab530d91.ce747"]]},{"id":"6072a4f2.25e68c","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":"false","complete":"payload","x":518.2710702078682,"y":173.7094007219587,"wires":[]},{"id":"f4b3191.101b7e8","type":"link out","z":"33dae4d6.60cddc","name":"aux out","links":["3b9924aa.05737c"],"x":1383.0640449523926,"y":429.02995681762695,"wires":[]},{"id":"3b9924aa.05737c","type":"link in","z":"92fd8dc0.84ce3","name":"aux in","links":["f4b3191.101b7e8"],"x":128.26703643798828,"y":281.7248115539551,"wires":[["a7364581.cc3d98"]]},{"id":"805e4969.982e18","type":"link out","z":"33dae4d6.60cddc","name":"recent event out","links":["d0b10a6d.8c6248"],"x":1377.3618621826172,"y":621.8749198913574,"wires":[]},{"id":"6641b9bb.a6d1b8","type":"link out","z":"33dae4d6.60cddc","name":"param out","links":["14c1ef45.4d4dc1"],"x":1381.6395072937012,"y":804.7361240386963,"wires":[]},{"id":"d0b10a6d.8c6248","type":"link in","z":"92fd8dc0.84ce3","name":"event in","links":["805e4969.982e18"],"x":126.84251689910889,"y":531.7126312255859,"wires":[["ab97f1ac.2d791"]]},{"id":"14c1ef45.4d4dc1","type":"link in","z":"92fd8dc0.84ce3","name":"param in","links":["6641b9bb.a6d1b8"],"x":122.55680704116821,"y":647.4310035705566,"wires":[["bf87c198.7087d"]]},{"id":"b2793e7d.196df","type":"mqtt out","z":"33dae4d6.60cddc","name":"","topic":"RMAD/Sandneslia","qos":"1","retain":"false","broker":"567ac106.47b4f","x":1452.8393783569336,"y":907.8035974502563,"wires":[]},{"id":"e27cf160.08ec9","type":"mqtt out","z":"33dae4d6.60cddc","name":"MQTT to Azure bn-msd-prod","topic":"devices/sandneslia/messages/events/$.ct=application%2Fjson&$.ce=utf-8","qos":"1","retain":"false","broker":"f747f84c.76df28","x":1475.1787033081055,"y":364.19289207458496,"wires":[]},{"id":"3d549975.6d5b76","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":6,"width":0,"height":0,"label":"Enable fast charge","color":"","bgcolor":"","icon":"","payload":"14","payloadType":"num","topic":"","x":1122.857177734375,"y":764.2857055664062,"wires":[["3a715bf9.edca24"]]},{"id":"43e84a2c.a06b44","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":7,"width":0,"height":0,"label":"Disable fast charge","color":"","bgcolor":"","icon":"","payload":"13","payloadType":"num","topic":"","x":1122.8570861816406,"y":808.571418762207,"wires":[["3a715bf9.edca24"]]},{"id":"c6f90e6.9a8a4f","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":8,"width":0,"height":0,"label":"DAC trigg ref","color":"","bgcolor":"","icon":"","payload":"15","payloadType":"num","topic":"","x":1164.2856979370117,"y":852.857120513916,"wires":[["3a715bf9.edca24"]]},{"id":"8e059983.76c378","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":9,"width":0,"height":0,"label":"VDD trigg ref","color":"","bgcolor":"","icon":"","payload":"16","payloadType":"num","topic":"","x":1164.2856979370117,"y":892.857120513916,"wires":[["3a715bf9.edca24"]]},{"id":"75666c1e.8ad094","type":"function","z":"33dae4d6.60cddc","name":"Set Advertisement","func":"\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x04, 0x00, 0x00, 0x32, 0x00]);//subscribe response - send gettime\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":445,"y":446,"wires":[["3e1e8c42.cbd914"]]},{"id":"675cc9a9.50e6e8","type":"inject","z":"33dae4d6.60cddc","name":"Advertisement","topic":"","payload":"","payloadType":"date","repeat":"10800","crontab":"","once":false,"x":220.9999885559082,"y":444.99999713897705,"wires":[["75666c1e.8ad094"]]},{"id":"1470bb8e.117ea4","type":"link out","z":"33dae4d6.60cddc","name":"event out","links":["28baca8.b1bdf36"],"x":1382.8572063446045,"y":517.14284324646,"wires":[]},{"id":"dd0d07c.94179f8","type":"link out","z":"33dae4d6.60cddc","name":"raw out","links":[],"x":1372.857084274292,"y":711.4285945892334,"wires":[]},{"id":"28baca8.b1bdf36","type":"link in","z":"3c5ef21a.a2cf5e","name":"event in","links":["1470bb8e.117ea4"],"x":243.7500238418579,"y":794.1666526794434,"wires":[["6e7932a1.ea6dac","9ea7397.3ccf2c8","d9322ade.db6af8","55cefc11.9a4dd4","4424325b.ceef8c"]]},{"id":"6e7932a1.ea6dac","type":"switch","z":"3c5ef21a.a2cf5e","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a116","vt":"str"}],"checkall":"true","outputs":1,"x":497.0833435058594,"y":193.33334827423096,"wires":[["2340c0a0.41913"]]},{"id":"2340c0a0.41913","type":"buffer-array","z":"3c5ef21a.a2cf5e","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":747.0833435058594,"y":193.33334827423096,"wires":[["963f3db6.7792f","2283ad30.d59182"]]},{"id":"963f3db6.7792f","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":false,"console":false,"complete":"false","x":993.75,"y":270.4166603088379,"wires":[]},{"id":"2283ad30.d59182","type":"function","z":"3c5ef21a.a2cf5e","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n    \n    is_avalanche = true\n\n    \n} else {\n    \n    is_avalanche = false\n    \n}\n\nvar alarm = {payload: is_avalanche};  \nreturn [alarm, msg2];\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":2,"noerr":0,"x":1007.0833435058594,"y":193.33334827423096,"wires":[["9c5f252e.84f8b8"],["27b16f26.f39a6"]]},{"id":"27b16f26.f39a6","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":true,"console":false,"complete":"true","x":1187.0833435058594,"y":273.33334827423096,"wires":[]},{"id":"2cfee454.6b4aac","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":true,"console":false,"complete":"false","x":1403.3333625793457,"y":129.58335399627686,"wires":[]},{"id":"9c5f252e.84f8b8","type":"rbe","z":"3c5ef21a.a2cf5e","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1207.0833435058594,"y":193.33334827423096,"wires":[["b5ee300a.e963d","2cfee454.6b4aac","881cbc66.3182d"]]},{"id":"b5ee300a.e963d","type":"switch","z":"3c5ef21a.a2cf5e","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1405.8333625793457,"y":272.0833559036255,"wires":[["92c5b177.569b9"]]},{"id":"92c5b177.569b9","type":"sms out","z":"3c5ef21a.a2cf5e","name":"","destinations":"+4795709022","body":"Skred i Sandneslia 00170d000070a116","x":1564.583351135254,"y":272.08335971832275,"wires":[]},{"id":"24ad8e07.e78c02","type":"inject","z":"3c5ef21a.a2cf5e","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1018.3333587646484,"y":120.83335590362549,"wires":[["9c5f252e.84f8b8"]]},{"id":"d9322ade.db6af8","type":"switch","z":"3c5ef21a.a2cf5e","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a5e7","vt":"str"}],"checkall":"true","outputs":1,"x":505.83333587646484,"y":498.6667079925537,"wires":[["6f7a8526.5b437c"]]},{"id":"6f7a8526.5b437c","type":"buffer-array","z":"3c5ef21a.a2cf5e","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":755.8333282470703,"y":497.4166965484619,"wires":[["d6e884c1.69f778","fa73a487.c97f88"]]},{"id":"d6e884c1.69f778","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":false,"console":false,"complete":"false","x":1007.5,"y":577.8333568572998,"wires":[]},{"id":"fa73a487.c97f88","type":"function","z":"3c5ef21a.a2cf5e","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n    \n    is_avalanche = true\n\n    \n} else {\n    \n    is_avalanche = false\n    \n}\n\nvar alarm = {payload: is_avalanche};  \nreturn [alarm, msg2];\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":2,"noerr":0,"x":1015.8333282470703,"y":497.4166965484619,"wires":[["29c40de0.0815b2"],["39ac65f.004609a"]]},{"id":"39ac65f.004609a","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":true,"console":false,"complete":"true","x":1195.8333282470703,"y":577.4166965484619,"wires":[]},{"id":"c5c64478.98ee58","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":true,"console":false,"complete":"false","x":1412.0833473205566,"y":433.6667022705078,"wires":[]},{"id":"29c40de0.0815b2","type":"rbe","z":"3c5ef21a.a2cf5e","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1215.8333282470703,"y":497.4166965484619,"wires":[["3e0ba3a4.d52c6c","c5c64478.98ee58","881cbc66.3182d"]]},{"id":"3e0ba3a4.d52c6c","type":"switch","z":"3c5ef21a.a2cf5e","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1414.5833473205566,"y":576.1667041778564,"wires":[["fd5045d5.427038"]]},{"id":"fd5045d5.427038","type":"sms out","z":"3c5ef21a.a2cf5e","name":"","destinations":"+4795709022","body":"Skred i Sandneslia 00170d000070a5e7","x":1573.3333358764648,"y":576.1667079925537,"wires":[]},{"id":"3f990bfa.457f24","type":"inject","z":"3c5ef21a.a2cf5e","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1027.0833435058594,"y":424.91670417785645,"wires":[["29c40de0.0815b2"]]},{"id":"9ea7397.3ccf2c8","type":"switch","z":"3c5ef21a.a2cf5e","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a324","vt":"str"}],"checkall":"true","outputs":1,"x":506.0833206176758,"y":795.6667137145996,"wires":[["41d868f0.143f08"]]},{"id":"41d868f0.143f08","type":"buffer-array","z":"3c5ef21a.a2cf5e","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":756.0833206176758,"y":795.6667137145996,"wires":[["c4b3f919.3ed8d8","16ba3d28.8d2263"]]},{"id":"c4b3f919.3ed8d8","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":false,"console":false,"complete":"false","x":1011.0833282470703,"y":874.4167861938477,"wires":[]},{"id":"16ba3d28.8d2263","type":"function","z":"3c5ef21a.a2cf5e","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n    \n    is_avalanche = true\n\n    \n} else {\n    \n    is_avalanche = false\n    \n}\n\nvar alarm = {payload: is_avalanche};  \nreturn [alarm, msg2];\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":2,"noerr":0,"x":1016.0833206176758,"y":795.6667137145996,"wires":[["a7f145a9.d92608"],["7ab34d51.fb0d84"]]},{"id":"7ab34d51.fb0d84","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":true,"console":false,"complete":"true","x":1196.0833206176758,"y":875.6667137145996,"wires":[]},{"id":"982bacc.0e7685","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":true,"console":false,"complete":"false","x":1412.333339691162,"y":731.9167194366455,"wires":[]},{"id":"a7f145a9.d92608","type":"rbe","z":"3c5ef21a.a2cf5e","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1216.0833206176758,"y":795.6667137145996,"wires":[["1d316b67.6854b5","982bacc.0e7685","881cbc66.3182d"]]},{"id":"1d316b67.6854b5","type":"switch","z":"3c5ef21a.a2cf5e","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1414.833339691162,"y":874.4167213439941,"wires":[["1ac8ab20.afa4a5"]]},{"id":"881cbc66.3182d","type":"dout0 out","z":"3c5ef21a.a2cf5e","name":"","x":1681.5833740234375,"y":793.666748046875,"wires":[]},{"id":"1ac8ab20.afa4a5","type":"sms out","z":"3c5ef21a.a2cf5e","name":"","destinations":"+4795709022","body":"Skred i Sandneslia 00170d000070a324","x":1573.5833282470703,"y":874.4167251586914,"wires":[]},{"id":"477e77ac.0cd4f8","type":"inject","z":"3c5ef21a.a2cf5e","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1027.3333358764648,"y":723.1667213439941,"wires":[["a7f145a9.d92608"]]},{"id":"55cefc11.9a4dd4","type":"switch","z":"3c5ef21a.a2cf5e","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070aa81","vt":"str"}],"checkall":"true","outputs":1,"x":517.9166641235352,"y":1102.5001039505005,"wires":[["939c8702.c46f58"]]},{"id":"939c8702.c46f58","type":"buffer-array","z":"3c5ef21a.a2cf5e","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":767.9166641235352,"y":1102.5001039505005,"wires":[["9cb204b6.238748","16791c33.98b744"]]},{"id":"9cb204b6.238748","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":false,"console":false,"complete":"false","x":1016.2500076293945,"y":1181.2501516342163,"wires":[]},{"id":"16791c33.98b744","type":"function","z":"3c5ef21a.a2cf5e","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n     \n    is_avalanche = true\n\n    \n} else {\n    \n    is_avalanche = false\n    \n}\n\nvar alarm = {payload: is_avalanche};  \nreturn [alarm, msg2];\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":2,"noerr":0,"x":1027.9166641235352,"y":1102.5001039505005,"wires":[["58e5d02.2c98e3"],["1e54832a.21690d"]]},{"id":"1e54832a.21690d","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":true,"console":false,"complete":"true","x":1207.9166641235352,"y":1182.5001039505005,"wires":[]},{"id":"9b438f27.40e4c","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":true,"console":false,"complete":"false","x":1424.1666831970215,"y":1038.7501096725464,"wires":[]},{"id":"58e5d02.2c98e3","type":"rbe","z":"3c5ef21a.a2cf5e","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1227.9166641235352,"y":1102.5001039505005,"wires":[["2141017f.f7f76e","9b438f27.40e4c","881cbc66.3182d"]]},{"id":"2141017f.f7f76e","type":"switch","z":"3c5ef21a.a2cf5e","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1426.6666831970215,"y":1181.250111579895,"wires":[["ce2425d6.08b358"]]},{"id":"ce2425d6.08b358","type":"sms out","z":"3c5ef21a.a2cf5e","name":"","destinations":"+4795709022","body":"Skred i Sandneslia 00170d000070aa81","x":1585.4166717529297,"y":1181.2501153945923,"wires":[]},{"id":"a789aa92.3269c8","type":"inject","z":"3c5ef21a.a2cf5e","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1039.1666793823242,"y":1030.000111579895,"wires":[["58e5d02.2c98e3"]]},{"id":"4424325b.ceef8c","type":"switch","z":"3c5ef21a.a2cf5e","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a854","vt":"str"}],"checkall":"true","outputs":1,"x":508.91668701171875,"y":1399.416746377945,"wires":[["f9961509.a8fe98"]]},{"id":"f9961509.a8fe98","type":"buffer-array","z":"3c5ef21a.a2cf5e","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":758.9166870117188,"y":1399.416746377945,"wires":[["8582ed26.25eda","4541a873.659b38"]]},{"id":"8582ed26.25eda","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":false,"console":false,"complete":"false","x":1013.9166946411133,"y":1478.1667692661285,"wires":[]},{"id":"4541a873.659b38","type":"function","z":"3c5ef21a.a2cf5e","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n     \n    is_avalanche = true\n\n    \n} else {\n    \n    is_avalanche = false\n    \n}\n\nvar alarm = {payload: is_avalanche};  \nreturn [alarm, msg2];\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":2,"noerr":0,"x":1018.9166870117188,"y":1399.416746377945,"wires":[["3d59ae88.3ca332"],["307fcfe2.4955b"]]},{"id":"307fcfe2.4955b","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":true,"console":false,"complete":"true","x":1198.9166870117188,"y":1479.416746377945,"wires":[]},{"id":"4e9aa077.fb604","type":"debug","z":"3c5ef21a.a2cf5e","name":"","active":true,"console":false,"complete":"false","x":1415.166706085205,"y":1335.6667520999908,"wires":[]},{"id":"3d59ae88.3ca332","type":"rbe","z":"3c5ef21a.a2cf5e","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1218.9166870117188,"y":1399.416746377945,"wires":[["48804677.3e6288","4e9aa077.fb604","881cbc66.3182d"]]},{"id":"48804677.3e6288","type":"switch","z":"3c5ef21a.a2cf5e","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1417.666706085205,"y":1478.1667540073395,"wires":[["7ff59614.d89298"]]},{"id":"7ff59614.d89298","type":"sms out","z":"3c5ef21a.a2cf5e","name":"","destinations":"+4795709022","body":"Skred i Sandneslia 00170d000070a854","x":1576.4166946411133,"y":1478.1667578220367,"wires":[]},{"id":"f4847d87.eee8","type":"inject","z":"3c5ef21a.a2cf5e","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1030.1667022705078,"y":1326.9167540073395,"wires":[["3d59ae88.3ca332"]]}]