[{"id":"33dae4d6.60cddc","type":"tab","label":"RMAD Gateway"},{"id":"92fd8dc0.84ce3","type":"tab","label":"RMAD Dashboard"},{"id":"95aa686f.2682e8","type":"tab","label":"RMAD Avalanch alarm"},{"id":"304a8277.ba5dae","type":"mqtt-broker","z":"","broker":"3z75l5.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"g:3z75l5:SmartSwarm342:Rensken","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"a4f2aa70.beaeb8","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"77c845c5.5e814c","type":"mqtt-broker","z":"","broker":"da-gateway-rockslide-iothub.azure-devices.net","port":"8883","tls":"a4f2aa70.beaeb8","clientid":"rockfallgateway","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"devices/rockfallgateway/messages/events/$.ct=application%2Fjson&$.ce=utf-8","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"d8dcfddb.2ae7","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"Helvetica Neue","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Helvetica Neue","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"Helvetica Neue"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#000000","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"c7d32f16.f2d9f","type":"mqtt-broker","z":"","broker":"3z75l5.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"g:3z75l5:SmartSwarm342:Rensken","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"506f9a10.ad4494","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"a4f2aa70.beaeb8","clientid":"renskendev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"567ac106.47b4f","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"b5ffc540.3c7c38","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"f747f84c.76df28","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"a4f2aa70.beaeb8","clientid":"sandneslia","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"39151131.2b3c0e","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"f502c1f8.9b9cc","clientid":"f46dev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"cf4ae4c9.751098","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"c6006e60.f9c09","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"f502c1f8.9b9cc","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"f502c1f8.9b9cc","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"181d4857.27df98","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"Helvetica Neue","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Helvetica Neue","edited":false},"customTheme":{"name":"","default":"#4B7930","baseColor":"#4B7930","baseFont":"Helvetica Neue"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#000000","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"caf02e50.14b2a","type":"ui_group","z":"","name":"Group","tab":"","order":null,"disp":true,"width":"6"},{"id":"3052b100.90849","type":"ui_group","z":"","name":"Send to RMAD-EDGE","tab":"50657fd6.afb3a","order":1,"disp":true,"width":"6"},{"id":"52f759fd.020d68","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"f7618743.fddf18","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"34d15e86.b243f2","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"90d9832d.16ec8","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"325b3de4.a4b0a2","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"90d9832d.16ec8","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"441087b.772ec78","type":"ui_group","z":"","name":"Send command to EDGE","tab":"","order":1,"disp":true,"width":"6"},{"id":"64497d32.625554","type":"ui_group","z":"","name":"Network Status","tab":"50657fd6.afb3a","order":2,"disp":true,"width":"6"},{"id":"4b3fe5f6.508d9c","type":"ui_group","z":"","name":"RMAD events","tab":"c7351944.f962f8","order":1,"disp":false,"width":"45"},{"id":"aa04c10b.3a98","type":"ui_group","z":"","name":"RMAD raw","tab":"a854cc7e.616e1","order":1,"disp":false,"width":"40"},{"id":"8e5536df.4e6fe8","type":"ui_group","z":"","name":"RMAD aux","tab":"40e1fe5f.bf57f","disp":false,"width":"35"},{"id":"35301823.8ecbd8","type":"ui_group","z":"","name":"RMAD prosessing","tab":"8fc5decf.516b6","order":1,"disp":false,"width":"55"},{"id":"50657fd6.afb3a","type":"ui_tab","z":"","name":"RMAD config","icon":"dashboard","order":10},{"id":"c7351944.f962f8","type":"ui_tab","z":"","name":"RMAD events","icon":"dashboard","order":12},{"id":"a854cc7e.616e1","type":"ui_tab","z":"","name":"RMAD raw data","icon":"dashboard","order":13},{"id":"40e1fe5f.bf57f","type":"ui_tab","z":"","name":"RMAD aux","icon":"dashboard","order":11},{"id":"8fc5decf.516b6","type":"ui_tab","z":"","name":"RMAD param","icon":"dashboard","order":14},{"id":"4277d7e2.eeb868","type":"ui_group","z":"","name":"Send command to EDGE","tab":"","order":1,"disp":true,"width":"6"},{"id":"3bce038e.8348cc","type":"function","z":"33dae4d6.60cddc","name":"Hello to serialmux","func":"msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x04, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37]);\n\n\nreturn msg;","outputs":1,"noerr":0,"x":648,"y":180,"wires":[["3e1e8c42.cbd914"]]},{"id":"4734e98e.916208","type":"inject","z":"33dae4d6.60cddc","name":"Connect","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":399.4285202026367,"y":87.14283752441406,"wires":[["3bce038e.8348cc"]]},{"id":"4143527c.31c8cc","type":"debug","z":"33dae4d6.60cddc","name":"from mux","active":false,"console":false,"complete":"payload","x":1446.333023071289,"y":153.4761619567871,"wires":[]},{"id":"5c4f28b5.14d1a8","type":"function","z":"33dae4d6.60cddc","name":"Subscribe","func":"msg.payload = msg.payload.toString('hex');\n\nif (msg.payload == \"a740a0f500050000010004\") //hell0 response - send subscribe\n{\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0B, 0x00, 0x00, 0x16, 0xFF, 0xFF, 0xFF, 0x50, 0xFF, 0xFF, 0xFF, 0x50]);\n\nreturn msg;\n} else if (msg.payload == \"a740a0f5000400000101\")\n{\n//msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0B, 0x00, 0x00, 0x16, 0xFF, 0xFF, 0xFF, 0x50, 0xFF, 0xFF, 0xFF, 0x50]);\n\nreturn msg;\n} else if (msg.payload == \"a740a0f5000400001600\") //subscribe response - send gettime\n{\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);\n\nreturn msg;\n} else\n{\nreturn null;\n\n}\n","outputs":1,"noerr":0,"x":656.3809547424316,"y":316.61901473999023,"wires":[["3e1e8c42.cbd914"]]},{"id":"435550bd.6ef47","type":"function","z":"33dae4d6.60cddc","name":"Payload to hexstring","func":"msg.payload = msg.payload.toString('hex');\n\nreturn msg;\n","outputs":1,"noerr":0,"x":1214.5238037109375,"y":152.71425247192383,"wires":[["4143527c.31c8cc"]]},{"id":"3e1e8c42.cbd914","type":"tcp request","z":"33dae4d6.60cddc","server":"192.168.1.1","port":"9900","out":"sit","splitc":"0","name":"Serial_MUX","x":916.7142944335938,"y":317.71424102783203,"wires":[["435550bd.6ef47","64c5df95.f9345","8427c2e1.ab161"]]},{"id":"9075f9da.ebc118","type":"link in","z":"33dae4d6.60cddc","name":"loop in","links":["64c5df95.f9345"],"x":504.7143020629883,"y":369.2856845855713,"wires":[["5c4f28b5.14d1a8"]]},{"id":"64c5df95.f9345","type":"link out","z":"33dae4d6.60cddc","name":"loop out","links":["9075f9da.ebc118"],"x":1145.7143020629883,"y":369.95237159729004,"wires":[]},{"id":"8427c2e1.ab161","type":"function","z":"33dae4d6.60cddc","name":"SmaertMeshIP to JSON","func":"msg.payload = msg.payload.toString('hex');\n\nvar msg_out=[];\n\nif (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"04\") // inkommende pakke er en \"data\"\n{\n    \n    while (msg.payload.length>0){\n    \n        var msg2 = {payload:{header_token: msg.payload.substring(0,8), \n            packet_type: msg.payload.substring(16,18),\n            notifType: msg.payload.substring(18,20),\n            payload_length: msg.payload.substring(8,12),\n            macAddress: msg.payload.substring(44,60),\n            timestamp: msg.payload.substring(20,44),\n            srcPort: msg.payload.substring(60,64),\n            dstPort: msg.payload.substring(64,68),\n            data: msg.payload.substring(68,12+(2* parseInt(msg.payload.substring(8,12),16)))}};\n    \n        msg_out.push(msg2);\n    \n        msg.payload = msg.payload.substring(12+(2* parseInt(msg.payload.substring(8,12),16)));\n    \n    }\n\n    return [msg_out,null,null];\n \n}else if (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"06\" && msg.payload.substring(36,38) == \"80\") // inkommende pakke er en \"device health report\"\n{  \n    \n    var healthReport = {payload:{\n        //notiftype:msg.payload.substring(36,38), \n        battery_mote: parseInt(msg.payload.substring(52,56),16)/1000,\n        temperature_mote: hexToSignedInt(msg.payload.substring(50,52)),\n        //payload: msg.payload,\n        mac_adress: msg.payload.substring(20,36),\n        packet_type: \"device_healthReport\"}};\n    \n    return [null,healthReport,null];\n    \n}else if (msg.payload.substring(16,18) == \"17\") // inkommende pakke er en \"networktime\"\n{    \n \n    network_time = parseInt(msg.payload.substring(28,44),16)*1000 + parseInt(msg.payload.substring(44,52),16)/1000; //tidspungt når pakke ble sendt - msec since 1 january 1970 \n    gateway_time = new Date().getTime(); //msec since 1 january 1970  \n    time_diff = gateway_time - network_time;\n\n    flow.set('time_diff',time_diff);\n\n    var time_msg = {payload:{\n\n        network_time: network_time,\n        gateway_time: gateway_time,\n        time_diff: time_diff}};\n    \n    return [null,null,time_msg];\n    \n}else{\n    \n    return [null,null,null];\n}\n\n\nfunction hexToSignedInt(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = \"0\" + hex;\n    }\n    var num = parseInt(hex, 16);\n    var maxVal = Math.pow(2, hex.length / 2 * 8);\n    if (num > maxVal / 2 - 1) {\n        num = num - maxVal;\n    }\n    return num;\n}\n","outputs":"3","noerr":0,"x":676.7143020629883,"y":705.785717010498,"wires":[["2cb83f99.87ed3"],["4a712dc6.9298c4","b2793e7d.196df"],["be2050d5.a22f4"]]},{"id":"2cb83f99.87ed3","type":"function","z":"33dae4d6.60cddc","name":"RMAD to Azure","func":"if (msg.payload.notifType == \"04\") //is data notification\n{\n  \n\nvar time_diff = flow.get('time_diff') || 0;\n\nif (msg.payload.data.substring(0,2) == \"07\")  //is AUX datapaket\n{\n    \nvar aux_is_signedint = parseInt(msg.payload.data.substring(16,18),16).toString(2).split('').map(x => x === '1');\nvar num_aux = (msg.payload.data.length - 18) / 4;\nvar aux_data = [];\n\nvar i;\nfor (i = 0; i < num_aux; i++) { \n    if (aux_is_signedint[i]) {\n        aux_data[i] = Math.round((hexToSignedInt(msg.payload.data.substring(18+4*i+2,18+4*i+4)+msg.payload.data.substring(18+4*i,18+4*i+2)))*1000)/1000; //*2.5/65536 kommentert ut utregning til volt\n    } else {\n        aux_data[i] = Math.round((parseInt(msg.payload.data.substring(18+4*i+2,18+4*i+4)+msg.payload.data.substring(18+4*i,18+4*i+2),16))*1000)/1000; //*2.5/65536 kommentert ut utregning til volt for å test triggnivå\n    }\n}\n\n\nvar aux_msg = {\n\n                payload:    \n\n\n                {config:    {type:parseInt(msg.payload.data.substring(2,3),16),\n                                        sw:parseInt(msg.payload.data.substring(3,4),16),\n                                        hw:parseInt(msg.payload.data.substring(4,5),16),\n                                        radio:parseInt(msg.payload.data.substring(5,6),16)},\n                                        \n                            state:     {charge_enabled: ((parseInt(msg.payload.data.substring(6,8),16) & 1) == 1) ? 1 : 0,\n                                        fast_charge: ((parseInt(msg.payload.data.substring(6,8),16) & 2) == 2) ? 1 : 0,\n                                        acmp1_out: ((parseInt(msg.payload.data.substring(6,8),16) & 4) == 4) ? 1 : 0,\n                                        acmp2_out: ((parseInt(msg.payload.data.substring(6,8),16) & 8) == 8) ? 1 : 0,\n                                        acmp_vddref: ((parseInt(msg.payload.data.substring(6,8),16) & 16) == 16) ? 1 : 0},\n                                    \n                            //charge_enabled: Boolean(parseInt(msg.payload.data.substring(6,8),16) & 1 == 1),\n                            battery: Math.round((parseInt(msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16)*(3*2.5/65536)+0.69)*1000)/1000,\n                            temperature: hexToSignedInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14),16)/100,\n                            aux: aux_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"aux_data\"\n                            },\n                        \n\n};\n            \n\nreturn [aux_msg,null,null,null,null];\n\n} \nelse if (msg.payload.data.substring(0,2) == \"00\")  //is SVV avalanch packet\n{\n \nvar svv_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46))),\n                            G4_std: Math.round(parseFloatHex(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_max: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G3_max: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G4_max: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78),16),\n                            G2_min: parseInt(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82),16),\n                            G3_min: parseInt(msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86),16),\n                            G4_min: parseInt(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(98,100) + msg.payload.data.substring(96,98),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102),16),\n                            G4_maxS: parseInt(msg.payload.data.substring(106,108) + msg.payload.data.substring(104,106),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(110,112) + msg.payload.data.substring(108,110),16),\n                            G2_minS: parseInt(msg.payload.data.substring(114,116) + msg.payload.data.substring(112,114),16),\n                            G3_minS: parseInt(msg.payload.data.substring(118,120) + msg.payload.data.substring(116,118),16),\n                            G4_minS: parseInt(msg.payload.data.substring(122,124) + msg.payload.data.substring(120,122),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_svv\"\n                            },\n                            \n\n};  \n\n \n  \nreturn [null,svv_msg,null,null,null];\n    \n} \nelse if (msg.payload.data.substring(0,2) == \"08\")  //is JBV avalanch packet\n{\n \n  var jbv_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: parseInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: parseInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: parseInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_jbv\"\n                            },\n                            \n\n};  \n\n \n  \nreturn [null,jbv_msg,null,null,null]; \n\n} \nelse if (msg.payload.data.substring(0,2) == \"0a\") //is event packet\n{  \n\nif (msg.payload.data.length == 170){ var event_msg = {payload:   //4 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G4_std: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            G3_mean: Math.round(parseFloatHex(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92))),\n                            G4_mean: Math.round(parseFloatHex(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(108,110) + msg.payload.data.substring(106,108),16),\n                            G2_max: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                            G3_max: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n                            G4_max: parseInt(msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(124,126) + msg.payload.data.substring(122,124),16),\n                            G2_min: parseInt(msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128),16),\n                            G3_min: parseInt(msg.payload.data.substring(132,134) + msg.payload.data.substring(130,132),16),\n                            G4_min: parseInt(msg.payload.data.substring(136,138) + msg.payload.data.substring(134,136),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(140,142) + msg.payload.data.substring(138,140),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(144,146) + msg.payload.data.substring(142,144),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(148,150) + msg.payload.data.substring(146,148),16),\n                            G4_maxS: parseInt(msg.payload.data.substring(152,154) + msg.payload.data.substring(150,152),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(156,158) + msg.payload.data.substring(154,156),16),\n                            G2_minS: parseInt(msg.payload.data.substring(160,162) + msg.payload.data.substring(158,160),16),\n                            G3_minS: parseInt(msg.payload.data.substring(164,166) + msg.payload.data.substring(162,164),16),\n                            G4_minS: parseInt(msg.payload.data.substring(168,170) + msg.payload.data.substring(166,168),16),\n                            \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n                            \n\n} \n\n} \nelse if (msg.payload.data.length == 138){ var event_msg = {payload:   //3 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G3_mean: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            G2_max: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96),16),\n                            G3_max: parseInt(msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104),16),\n                            G2_min: parseInt(msg.payload.data.substring(108,110) + msg.payload.data.substring(106,108),16),\n                            G3_min: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(124,126) + msg.payload.data.substring(122,124),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128),16),\n                            G2_minS: parseInt(msg.payload.data.substring(132,134) + msg.payload.data.substring(130,132),16),\n                            G3_minS: parseInt(msg.payload.data.substring(136,138) + msg.payload.data.substring(134,136),16),\n                           \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n                            \n\n} \n\n} \nelse if (msg.payload.data.length == 106){var event_msg = {payload:  //2 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76),16),\n                            G2_max: parseInt(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80),16),\n                           \n                            G1_min: parseInt(msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84),16),\n                            G2_min: parseInt(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96),16),\n                          \n                            G1_minS: parseInt(msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            G2_minS: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104),16),\n                        \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n\n\n}\n\n\n} \nelse if (msg.payload.data.length == 74) {var event_msg = {payload:  //1 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60),16),\n                           \n                            G1_min: parseInt(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72),16),\n                            \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n\n\n}\n}\nreturn [null,event_msg,null,null,null];\n\n} \nelse if (msg.payload.data.substring(0,2) == \"09\")  //is JBV diff avalanch packet\n{\n \n \n \n var jbv_diff_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: hexToSignedInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: hexToSignedInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: hexToSignedInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: hexToSignedInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_jbv\"\n                            },\n \n    \n};  \n\n \n  \nreturn [null,jbv_diff_msg,null,null,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"03\")  //is Recent event packet\n{\n \n var recent_event_msg = {payload:\n \n\n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            sps: parseInt(msg.payload.data.substring(32,34)+msg.payload.data.substring(30,32),16)/100,\n                            num_samples: parseInt(msg.payload.data.substring(36,38)+msg.payload.data.substring(34,36),16),\n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20) + msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8),16)*1000 + parseInt(msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28) + msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"recent_event\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,recent_event_msg,null,null];      \n\n} \nelse if (msg.payload.data.substring(0,2) == \"06\")  //is raw dat packet\n{\n    \nvar num_raw = (msg.payload.data.length - 24) / 4;\nvar raw_data = [];\n\nvar i;\nfor (i = 0; i < num_raw; i++) { \n\n        raw_data[i] = parseInt(msg.payload.data.substring(24+4*i+2,24+4*i+4)+msg.payload.data.substring(24+4*i,24+4*i+2),16);\n\n}\n \n var raw_data_msg = {payload:\n \n                \n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            channels: parseInt(msg.payload.data.substring(6,8),16),\n                            \n                            scan_start: parseInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14)+msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16),\n                            scan_stop: parseInt(msg.payload.data.substring(22,24)+msg.payload.data.substring(20,22)+msg.payload.data.substring(18,20)+msg.payload.data.substring(16,18),16),\n                            \n                            samples: raw_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"raw_data\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,null,raw_data_msg,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"0a\")  //is raw diff dat packet\n{\n    \nvar num_raw = (msg.payload.data.length - 24) / 4;\nvar raw_data = [];\n\nvar i;\nfor (i = 0; i < num_raw; i++) { \n\n        raw_data[i] = hexToSignedInt(msg.payload.data.substring(24+4*i+2,24+4*i+4)+msg.payload.data.substring(24+4*i,24+4*i+2),16);\n\n}\n \n var raw_data_diff_msg = {payload:\n \n                \n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            channels: parseInt(msg.payload.data.substring(6,8),16),\n                            \n                            scan_start: parseInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14)+msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16),\n                            scan_stop: parseInt(msg.payload.data.substring(22,24)+msg.payload.data.substring(20,22)+msg.payload.data.substring(18,20)+msg.payload.data.substring(16,18),16),\n                            \n                            samples: raw_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"raw_data\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,null,raw_data_diff_msg,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"04\")  //is adjustable param pacjet\n{\n \nvar par_msg = {payload:\n \n\n                {           \n                    \n                            Min_samples: parseInt(msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16),\n                            Sample_cont: parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12),16),\n                            Max_samples: parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16),\n                            \n                            \n                            \n                            G1_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28))),\n                            G2_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36))),\n                            \n                            G3_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G4_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G2_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G3_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G4_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            \n                            Trig_level: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            Start_delay: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            \n                            Trig_ch0: parseInt(msg.payload.data.substring(106,108),16),\n                            Trig_ch1: parseInt(msg.payload.data.substring(108,110),16),\n                            \n                            Amp_trig: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                            Amp_logging: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n          \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"prosessing_params\"\n                            },\n                            \n\n};\n\n \n  \nreturn [null,null,null,null,par_msg];\n}\n\n\n}\n\nfunction hexToSignedInt(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = \"0\" + hex;\n    }\n    var num = parseInt(hex, 16);\n    var maxVal = Math.pow(2, hex.length / 2 * 8);\n    if (num > maxVal / 2 - 1) {\n        num = num - maxVal;\n    }\n    return num;\n}\n\nfunction parseFloatHex(str) {\n    var float = 0, sign, order, mantiss,exp,\n    int = 0, multi = 1;\n    int = parseInt(str,16);\n    sign = (int>>>31)?-1:1;\n    exp = (int >>> 23 & 0xff) - 127;\n    mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n    for (i=0; i<mantissa.length; i+=1){\n        float += parseInt(mantissa[i])? Math.pow(2,exp):0;\n        exp--;\n    }\n    return float*sign;\n}","outputs":"5","noerr":0,"x":1027.706314086914,"y":602.1309299468994,"wires":[["61aa980f.65c7a8","f4b3191.101b7e8","e27cf160.08ec9","b2793e7d.196df"],["d3f67a41.8066a8","e27cf160.08ec9","b2793e7d.196df","1470bb8e.117ea4"],["777804a5.a6461c","805e4969.982e18","e27cf160.08ec9"],["a19c720a.8320f","e27cf160.08ec9","dd0d07c.94179f8"],["750c6f48.5bd8f","6641b9bb.a6d1b8","e27cf160.08ec9"]]},{"id":"4a712dc6.9298c4","type":"debug","z":"33dae4d6.60cddc","name":"mesh status","active":false,"console":"false","complete":"payload","x":947.75,"y":828.892879486084,"wires":[]},{"id":"61aa980f.65c7a8","type":"debug","z":"33dae4d6.60cddc","name":"AUX","active":true,"console":"false","complete":"payload","x":1412.5710372924805,"y":470.7856321334839,"wires":[]},{"id":"f1149c3c.ac514","type":"status","z":"33dae4d6.60cddc","name":"","scope":["3e1e8c42.cbd914"],"x":123.67861938476562,"y":153.035737991333,"wires":[["36a10c93.543b44"]]},{"id":"36a10c93.543b44","type":"switch","z":"33dae4d6.60cddc","name":"","property":"status.text","propertyType":"msg","rules":[{"t":"eq","v":"common.status.disconnected","vt":"str"}],"checkall":"true","outputs":1,"x":280.6786193847656,"y":153.03576850891113,"wires":[["f4bfd066.1f866"]]},{"id":"f4bfd066.1f866","type":"delay","z":"33dae4d6.60cddc","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":421.9285583496094,"y":154.53567695617676,"wires":[["3bce038e.8348cc"]]},{"id":"604a3b45.48c2c4","type":"function","z":"33dae4d6.60cddc","name":"Correct time","func":"\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);//subscribe response - send gettime\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":648.1785888671875,"y":249.03567504882812,"wires":[["3e1e8c42.cbd914"]]},{"id":"41e653aa.e5ff7c","type":"inject","z":"33dae4d6.60cddc","name":"Get Time","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"10 00 * * *","once":false,"x":394.17858123779297,"y":248.03567504882812,"wires":[["604a3b45.48c2c4"]]},{"id":"31040509.18463a","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":1,"width":0,"height":0,"label":"Transport mode","color":"","bgcolor":"","icon":"","payload":"12","payloadType":"num","topic":"","x":1063.8095397949219,"y":317.6189241409302,"wires":[["3a715bf9.edca24"]]},{"id":"d87d646.d2dfc98","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":"false","complete":"true","x":1593.8097915649414,"y":464.76183700561523,"wires":[]},{"id":"40f262f9.a26d7c","type":"link in","z":"33dae4d6.60cddc","name":"com in","links":["86174797.3f93b8","efe491f2.f1268","8f686bcd.421498","a1b3574a.8896d8","4a183b86.d390a4","c264b896.bde708"],"x":677.1428571428571,"y":428.57142857142856,"wires":[["3e1e8c42.cbd914"]]},{"id":"86174797.3f93b8","type":"link out","z":"92fd8dc0.84ce3","name":"com out","links":["40f262f9.a26d7c"],"x":1591.190507888794,"y":687.1427745819092,"wires":[]},{"id":"3a715bf9.edca24","type":"function","z":"92fd8dc0.84ce3","name":"RMAD request to edge","func":"\nvar mac_address = flow.get('mac_address') || 0;\n\n\nvar mac_1  = parseInt(mac_address.payload.toString().substr(0,2),16);\nvar mac_2  = parseInt(mac_address.payload.toString().substr(2,2),16);\nvar mac_3  = parseInt(mac_address.payload.toString().substr(4,2),16);\nvar mac_4  = parseInt(mac_address.payload.toString().substr(6,2),16);\nvar mac_5  = parseInt(mac_address.payload.toString().substr(8,2),16);\nvar mac_6  = parseInt(mac_address.payload.toString().substr(10,2),16);\nvar mac_7  = parseInt(mac_address.payload.toString().substr(12,2),16);\nvar mac_8  = parseInt(mac_address.payload.toString().substr(14,2),16);\n\n\n//msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);//subscribe response - send gettime\n\n//var msg_out = {payload: new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x12, 0x00, 0x00, 0x2c ,0x00, 0x17, 0x0d, 0x00, 0x00, 0x30, 0xe2, 0xa9, 0x01, 0xf0, 0xb9, 0xf0, 0xb9,  0x00, msg.payload, mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8])};//set transport mode\n\nvar msg_out = {payload: new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x12, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9,  0x00, msg.payload])};//set transport mode\n\n\n//mac = new Buffer ([0x00, 0x17, 0x0d, 0x00, 0x00, 0x30, 0xe2, 0xa9]);//set transport mode\n\n//tail = new Buffer ([0x01, 0xf0, 0xb9, 0xf0, 0xc9, 0x00, 0x0c]);//set transport mode\n\n\nreturn [msg_out];\n\n","outputs":"1","noerr":0,"x":1326.6666564941406,"y":523.3332958221436,"wires":[["d87d646.d2dfc98","86174797.3f93b8"]]},{"id":"424cf5fd.13225c","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":2,"width":0,"height":0,"label":"External reset","color":"","bgcolor":"","icon":"","payload":"0","payloadType":"str","topic":"","x":1062.8570518493652,"y":382.8570394515991,"wires":[["3a715bf9.edca24"]]},{"id":"dc2fc41e.4fa5c8","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":3,"width":0,"height":0,"label":"Get AUX","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"","x":1047.8570518493652,"y":440.47612285614014,"wires":[["3a715bf9.edca24"]]},{"id":"21cd5526.eebdda","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":4,"width":0,"height":0,"label":"Start Logging","color":"","bgcolor":"","icon":"","payload":"4","payloadType":"num","topic":"","x":1060.7140846252441,"y":498.5713920593262,"wires":[["3a715bf9.edca24"]]},{"id":"c0c85a7a.94a318","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":5,"width":0,"height":0,"label":"Get Params","color":"","bgcolor":"","icon":"","payload":"5","payloadType":"num","topic":"","x":1058.095371246338,"y":558.3332965373993,"wires":[["3a715bf9.edca24"]]},{"id":"d3f67a41.8066a8","type":"debug","z":"33dae4d6.60cddc","name":"Event","active":true,"console":"false","complete":"payload","x":1414.306022644043,"y":561.4368095397949,"wires":[]},{"id":"777804a5.a6461c","type":"debug","z":"33dae4d6.60cddc","name":"Recent Event","active":false,"console":"false","complete":"payload","x":1442.877296447754,"y":665.7223930358887,"wires":[]},{"id":"a19c720a.8320f","type":"debug","z":"33dae4d6.60cddc","name":"Raw data","active":true,"console":"false","complete":"payload","x":1421.4489135742188,"y":757.150972366333,"wires":[]},{"id":"750c6f48.5bd8f","type":"debug","z":"33dae4d6.60cddc","name":"Params","active":false,"console":"false","complete":"payload","x":1420.0202026367188,"y":845.7225112915039,"wires":[]},{"id":"be2050d5.a22f4","type":"debug","z":"33dae4d6.60cddc","name":"time event","active":false,"console":"false","complete":"payload","x":924.0299835205078,"y":883.7581310272217,"wires":[]},{"id":"f4b3191.101b7e8","type":"link out","z":"33dae4d6.60cddc","name":"aux out","links":["3b9924aa.05737c","1a6a9063.007c6","a4d8874c.1176d8","9096e7bb.131c18"],"x":1383.0640449523926,"y":429.02995681762695,"wires":[]},{"id":"805e4969.982e18","type":"link out","z":"33dae4d6.60cddc","name":"recent event out","links":["d0b10a6d.8c6248"],"x":1377.3618621826172,"y":621.8749198913574,"wires":[]},{"id":"6641b9bb.a6d1b8","type":"link out","z":"33dae4d6.60cddc","name":"param out","links":["14c1ef45.4d4dc1","fb7b9ec6.65e28"],"x":1381.6395072937012,"y":804.7361240386963,"wires":[]},{"id":"b2793e7d.196df","type":"mqtt out","z":"33dae4d6.60cddc","name":"","topic":"RMAD/Sandneslia","qos":"1","retain":"false","broker":"567ac106.47b4f","x":1452.8393783569336,"y":907.8035974502563,"wires":[]},{"id":"e27cf160.08ec9","type":"mqtt out","z":"33dae4d6.60cddc","name":"MQTT to Azure bn-msd-prod","topic":"devices/sandneslia/messages/events/$.ct=application%2Fjson&$.ce=utf-8","qos":"1","retain":"false","broker":"f747f84c.76df28","x":1475.1787033081055,"y":364.19289207458496,"wires":[]},{"id":"3d549975.6d5b76","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":6,"width":0,"height":0,"label":"Enable fast charge","color":"","bgcolor":"","icon":"","payload":"14","payloadType":"num","topic":"","x":1028.3333702087402,"y":619.2856616973877,"wires":[["3a715bf9.edca24"]]},{"id":"43e84a2c.a06b44","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":7,"width":0,"height":0,"label":"Disable fast charge","color":"","bgcolor":"","icon":"","payload":"13","payloadType":"num","topic":"","x":1028.3332023620605,"y":671.9047224521637,"wires":[["3a715bf9.edca24"]]},{"id":"c6f90e6.9a8a4f","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":8,"width":0,"height":0,"label":"DAC trigg ref","color":"","bgcolor":"","icon":"","payload":"15","payloadType":"num","topic":"","x":1044.7617530822754,"y":726.1904296875,"wires":[["3a715bf9.edca24"]]},{"id":"8e059983.76c378","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":9,"width":0,"height":0,"label":"VDD trigg ref","color":"","bgcolor":"","icon":"","payload":"16","payloadType":"num","topic":"","x":1053.0950889587402,"y":784.5237655639648,"wires":[["3a715bf9.edca24"]]},{"id":"75666c1e.8ad094","type":"function","z":"33dae4d6.60cddc","name":"Set Advertisement","func":"\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x04, 0x00, 0x00, 0x32, 0x00]);//subscribe response - send gettime\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":445,"y":446,"wires":[["3e1e8c42.cbd914"]]},{"id":"675cc9a9.50e6e8","type":"inject","z":"33dae4d6.60cddc","name":"Advertisement","topic":"","payload":"","payloadType":"date","repeat":"10800","crontab":"","once":false,"x":220.9999885559082,"y":444.99999713897705,"wires":[["75666c1e.8ad094"]]},{"id":"1470bb8e.117ea4","type":"link out","z":"33dae4d6.60cddc","name":"event out","links":["28baca8.b1bdf36","7f2ca578.a70f3c","e5a86ee2.ac976"],"x":1382.8572063446045,"y":517.14284324646,"wires":[]},{"id":"dd0d07c.94179f8","type":"link out","z":"33dae4d6.60cddc","name":"raw out","links":["34555ca9.e4d2d4"],"x":1372.857084274292,"y":711.4285945892334,"wires":[]},{"id":"292e1368.9b6eac","type":"ui_button","z":"92fd8dc0.84ce3","name":"","group":"3052b100.90849","order":10,"width":0,"height":0,"label":"Get raw data","color":"","bgcolor":"","icon":"","payload":"08","payloadType":"str","topic":"","x":1045.0595169067383,"y":850.4166641235352,"wires":[["63309f52.f4c8d"]]},{"id":"4ce967f7.478578","type":"ui_text_input","z":"92fd8dc0.84ce3","name":"","label":"Flash_ID","group":"3052b100.90849","order":13,"width":0,"height":0,"passthru":false,"mode":"number","delay":300,"topic":"topic","x":1048.2738876342773,"y":921.3095369338989,"wires":[["52220d0e.91f484"]]},{"id":"98390bfc.646228","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":false,"complete":"false","x":1604.1072273254395,"y":881.1310091018677,"wires":[]},{"id":"52220d0e.91f484","type":"function","z":"92fd8dc0.84ce3","name":"Set get_raw data string","func":"\nmsg.payload.flashID = parseInt(msg.payload)\n\nhex = \"000\" + parseInt(msg.payload).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA_payload = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\nvar msg_buff = new Buffer(IMSG_SENDDATA_payload,'hex');\n\nflow.set('IMSG_SENDDATA',IMSG_SENDDATA_payload);\n\nvar msg2 = {payload: {flashID:flashID,\n                      flashID_hex:hex.substr(hex.length-4,hex.length),\n                      flashID_lsb:lsb.substr(lsb.length-2,lsb.length),\n                      flashID_msb:msb.substr(msb.length-2,msb.length),\n                      IMSG_SENDDATA:IMSG_SENDDATA_payload\n\n}\n\n}  \n\nreturn [msg2];","outputs":"1","noerr":0,"x":1300.7738037109375,"y":920.8928165435791,"wires":[["98390bfc.646228"]]},{"id":"63309f52.f4c8d","type":"function","z":"92fd8dc0.84ce3","name":"Get raw data payload","func":"\nvar mac_address = flow.get('mac_address') || 0;\nvar IMSG_SENDDATA = flow.get('IMSG_SENDDATA') || 0;\n\n\nvar mac_1  = parseInt(mac_address.payload.toString().substr(0,2),16);\nvar mac_2  = parseInt(mac_address.payload.toString().substr(2,2),16);\nvar mac_3  = parseInt(mac_address.payload.toString().substr(4,2),16);\nvar mac_4  = parseInt(mac_address.payload.toString().substr(6,2),16);\nvar mac_5  = parseInt(mac_address.payload.toString().substr(8,2),16);\nvar mac_6  = parseInt(mac_address.payload.toString().substr(10,2),16);\nvar mac_7  = parseInt(mac_address.payload.toString().substr(12,2),16);\nvar mac_8  = parseInt(mac_address.payload.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1293.3929710388184,"y":849.702465057373,"wires":[["98390bfc.646228","86174797.3f93b8"]]},{"id":"988130af.b26de","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":false,"complete":"false","x":680,"y":140,"wires":[]},{"id":"c56595a4.7d7ae8","type":"ui_text","z":"92fd8dc0.84ce3","group":"64497d32.625554","order":2,"width":0,"height":0,"name":"","label":"Num Events","format":"{{msg.payload}}","layout":"row-spread","x":688.5714874267578,"y":259.99994468688965,"wires":[]},{"id":"65a4cb8.7734a34","type":"function","z":"92fd8dc0.84ce3","name":"Update Event array","func":"var msg_event = msg;\n\n\nvar event_array = flow.get('event_array2') || []\n\n\nif (Object.keys(event_array).length === 0){\n    \n    var mac_list = flow.get('sensorlist_mac') || [];\n    var km_list = flow.get('sensorlist_km') || [];\n    \n    var num_motes = mac_list.length;\n    var temp=[];\n    var string='';\n    \n    for (var i = 0; i < num_motes; i++){\n        \n\n           event_array[i] = {mac_adress: mac_list[i],\n                              flash_ID: temp,\n                              trigg_time_utc: temp,\n                              calc_time_utc: temp,\n                              G1_std: temp,\n                              G2_std: temp,\n                              G3_std: temp,\n                              G4_std: temp,\n                              G1_mean: temp,\n                              G2_mean: temp,\n                              G3_mean: temp,\n                              G4_mean: temp,\n                              prev_sps: temp}\n            \n            }                     \n\n    } // true\n\n\n\nvar new_mac = true;\n\nfor (i = 0; i < event_array.length; i++){\n    \n        if (msg_event.payload.mac_adress == event_array[i].mac_adress){\n            new_mac = false;\n            break;\n            \n        }\n\n\n}\n\n if (new_mac === true){\n     \n     event_array[i] = {mac_adress: msg_event.payload.mac_adress,\n                              flash_ID: temp,\n                                  trigg_time_utc: temp,\n                              calc_time_utc: temp,\n                              G1_std: temp,\n                              G2_std: temp,\n                              G3_std: temp,\n                              G4_std: temp,\n                              G1_mean: temp,\n                              G2_mean: temp,\n                              G3_mean: temp,\n                              G4_mean: temp,\n                              prev_sps: temp}\n                                \n\n   } // true\n     \n// if (msg_aux.payload.packet_type == \"event\" || \"event_jbv\"){\n     \n     \n     \n\n             event_array[i] = {mac_adress: msg_event.payload.mac_adress,\n                              flash_ID: msg_event.payload.flash_ID,\n                                 trigg_time_utc: new Date(msg_event.payload.trigg_timestamp),\n                              calc_time_utc: new Date(msg_event.payload.calc_timestamp),\n                              G1_std: msg_event.payload.G1_std,\n                              G2_std: msg_event.payload.G2_std,\n                              G3_std: msg_event.payload.G3_std,\n                              G4_std: msg_event.payload.G4_std,\n                              G1_mean: msg_event.payload.G1_mean,\n                              G2_mean: msg_event.payload.G2_mean,\n                              G3_mean: msg_event.payload.G3_mean,\n                              G4_mean: msg_event.payload.G4_mean,\n                              prev_sps: msg_event.payload.prev_sps}\n            \n //           };\n\n\n\nflow.set('event_array2', event_array);\n\n\nvar event_array_sorted = event_array.sort(function compare(a,b){\n    if(a.mac_adress < b.mac_adress){return -1}\n    if(a.mac_adress > b.mac_adress){return 1}\n});\n\nvar string2 = {payload: event_array_sorted};\nvar length = {payload: event_array.length}\n\n\nreturn [string2,length];","outputs":2,"noerr":0,"x":352.85721588134766,"y":191.42855262756348,"wires":[["988130af.b26de","a151c1b0.acd7f"],["c56595a4.7d7ae8"]]},{"id":"7f2ca578.a70f3c","type":"link in","z":"92fd8dc0.84ce3","name":"event in","links":["1470bb8e.117ea4"],"x":181.42866325378418,"y":191.42854499816895,"wires":[["65a4cb8.7734a34"]]},{"id":"a151c1b0.acd7f","type":"ui_text","z":"92fd8dc0.84ce3","group":"4b3fe5f6.508d9c","order":0,"width":"45","height":"10","name":"","label":"","format":"{{msg.payload}}","layout":"row-left","x":671.4286308288574,"y":192.85712432861328,"wires":[]},{"id":"6a674d68.ca2614","type":"ui_text","z":"92fd8dc0.84ce3","group":"64497d32.625554","order":3,"width":0,"height":0,"name":"","label":"Num Raw Data","format":"{{msg.payload}}","layout":"row-spread","x":701.4286308288574,"y":478.5713610649109,"wires":[]},{"id":"b51984fc.a9c1b8","type":"function","z":"92fd8dc0.84ce3","name":"Update Raw array","func":"var msg_raw = msg;\n\nvar raw_array = flow.get('raw_array3') || []\n\n\nfor (i = 0; i < raw_array.length; i++){\n    \n        if (msg_raw.payload.mac_adress == raw_array[i].mac_adress && msg_raw.payload.flash_ID == raw_array[i].flash_ID){\n\n            \n            break;\n            \n        }\n     \n\n     \n}\n\n\n                raw_array[i] = {mac_adress: msg_raw.payload.mac_adress,\n                                flash_ID: msg_raw.payload.flash_ID,\n                                channels: msg_raw.payload.channels,\n                                scan_start: msg_raw.payload.scan_start,\n                                scan_stop: msg_raw.payload.scan_stop,\n                                samples: msg_raw.payload.samples,\n                                packet_sent_utc: new Date(msg_raw.payload.packet_sent)\n                \n                \n            };\n\n\n\nflow.set('raw_array3', raw_array);\n\n\nvar raw_array_sorted = raw_array.sort(function compare(a,b){\n    if(a.packet_sent_utc < b.packet_sent_utc){return 1}\n    if(a.packet_sent_utc > b.packet_sent_utc){return -1}\n});\n\nvar string = {payload: raw_array_sorted};\nvar length = {payload: raw_array.length}\n\n\nreturn [string,length];","outputs":2,"noerr":0,"x":390.0001220703125,"y":402.85709953308105,"wires":[["d5c07c15.a7f3a","6880ab12.c37624"],["6a674d68.ca2614"]]},{"id":"d5c07c15.a7f3a","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":false,"complete":"false","x":685.7143936157227,"y":345.7142734527588,"wires":[]},{"id":"34555ca9.e4d2d4","type":"link in","z":"92fd8dc0.84ce3","name":"raw in","links":["dd0d07c.94179f8"],"x":165.0001220703125,"y":402.85709953308105,"wires":[["b51984fc.a9c1b8"]]},{"id":"6880ab12.c37624","type":"ui_text","z":"92fd8dc0.84ce3","group":"aa04c10b.3a98","order":0,"width":"40","height":"10","name":"","label":"","format":"{{msg.payload}}","layout":"row-left","x":668.5715217590332,"y":411.42836689949036,"wires":[]},{"id":"cfe45126.932d8","type":"ui_text","z":"92fd8dc0.84ce3","group":"64497d32.625554","order":1,"width":0,"height":0,"name":"","label":"Num AUX","format":"{{msg.payload}}","layout":"row-spread","x":651.4286499023438,"y":681.4285163879395,"wires":[]},{"id":"1162bd6c.fac6f3","type":"function","z":"92fd8dc0.84ce3","name":"Update AUX array","func":"var msg_aux = msg;\n\nvar aux_array = flow.get('aux_array2') || []\n\n\nif (Object.keys(aux_array).length === 0){\n    \n    var mac_list = flow.get('sensorlist_mac') || [];\n    var km_list = flow.get('sensorlist_km') || [];\n    \n    var num_motes = mac_list.length;\n    var temp=[];\n    var string='';\n    \n    for (var i = 0; i < num_motes; i++){\n        \n        aux_array[i] = {mac_adress: mac_list[i],\n                                battery: temp,\n                                temperature: temp,\n                                solcelle: temp,\n                                aux: temp, \n                                hw: temp,\n                                sw: temp,\n                                charge_enabled: temp,\n                                acmp_vddref: temp,\n                                packet_sent_utc: temp}\n                                \n\n    } // true\n}\n\n\nvar new_mac = true;\n\nfor (i = 0; i < aux_array.length; i++){\n    \n        if (msg_aux.payload.mac_adress == aux_array[i].mac_adress){\n            new_mac = false;\n            break;\n            \n        }\n\n\n}\n\n if (new_mac === true){\n     \n     aux_array[i] = {mac_adress: msg_aux.payload.mac_adress,\n                                battery: temp,\n                                temperature: temp,\n                                solcelle: temp,\n                                aux: temp, \n                                hw: temp,\n                                sw: temp,\n                                charge_enabled: temp,\n                                acmp_vddref: temp,\n                                packet_sent_utc: temp}\n                                \n\n    } // true\n     \n if (msg_aux.payload.packet_type == \"aux_data\"){\n     \n var solcelle = msg_aux.payload.aux[0]*7.5/65535;\n\n                aux_array[i] = {mac_adress: aux_array[i].mac_adress,\n                                battery: msg_aux.payload.battery,\n                                temperature: msg_aux.payload.temperature,\n                                solcelle: solcelle.toFixed(3),\n                                aux: msg_aux.payload.aux, \n                                hw: msg_aux.payload.config.hw,\n                                sw: msg_aux.payload.config.sw,\n                                charge_enabled: msg_aux.payload.state.charge_enabled,\n                                acmp_vddref: msg_aux.payload.state.acmp_vddref,\n                                packet_sent_utc: new Date(msg_aux.payload.packet_sent)\n                \n               };\n}\n\n\nflow.set('aux_array2', aux_array);\n\n\nvar aux_array_sorted = aux_array.sort(function compare(a,b){\n    if(a.mac_adress < b.mac_adress){return -1}\n    if(a.mac_adress > b.mac_adress){return 1}\n});\n\nvar string2 = {payload: aux_array_sorted};\nvar length = {payload: aux_array.length}\n\n\nreturn [string2,length];","outputs":2,"noerr":0,"x":401.42864990234375,"y":621.4285163879395,"wires":[["3a054bc9.cd8c34","783484b1.3e69cc"],["cfe45126.932d8"]]},{"id":"3a054bc9.cd8c34","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":false,"complete":"false","x":661.4286499023438,"y":561.4285163879395,"wires":[]},{"id":"1a6a9063.007c6","type":"link in","z":"92fd8dc0.84ce3","name":"aux in","links":["f4b3191.101b7e8"],"x":215.0000762939453,"y":619.9999008178711,"wires":[["1162bd6c.fac6f3"]]},{"id":"783484b1.3e69cc","type":"ui_text","z":"92fd8dc0.84ce3","group":"8e5536df.4e6fe8","order":0,"width":"35","height":"10","name":"","label":"","format":"{{msg.payload}}","layout":"row-left","x":667.1429530552455,"y":619.9999623979841,"wires":[]},{"id":"86a331ca.73852","type":"ui_text","z":"92fd8dc0.84ce3","group":"64497d32.625554","order":4,"width":0,"height":0,"name":"","label":"Num Prosessing","format":"{{msg.payload}}","layout":"row-spread","x":732.8572769165039,"y":927.1428027153015,"wires":[]},{"id":"be833eb.f40bbc","type":"function","z":"92fd8dc0.84ce3","name":"Update Prosessing array","func":"var msg_prosessing = msg;\n\nvar prosessing_array = flow.get('prosessing_array3') || []\n\nif (Object.keys(prosessing_array).length === 0){\n    \n    var mac_list = flow.get('sensorlist_mac') || [];\n    var km_list = flow.get('sensorlist_km') || [];\n    \n    var num_motes = mac_list.length;\n    var temp=[];\n    var string='';\n    \n    for (var i = 0; i < num_motes; i++){\n        \n\n           prosessing_array[i] = {mac_adress: mac_list[i],\n                                Min_samples: temp,\n                                Sample_cont: temp,\n                                Max_samples: temp,\n                                G1_std_lim: temp,\n                                G2_std_lim: temp,\n                                G3_std_lim: temp,\n                                G4_std_lim: temp,\n                                G1_cont_lim: temp,\n                                G2_cont_lim: temp,\n                                G3_cont_lim: temp,\n                                G4_cont_lim: temp,\n            \n                                Trig_level: temp,\n                                //Start_delay: temp,\n                                //Trig_ch0: temp,\n                                //Trig_ch1: temp,\n                                Amp_trig: temp,\n                                Amp_logging: temp,\n\n                                packet_sent_utc: temp\n           }\n            \n            }                     \n\n   \n}\n\n\n\nfor (i = 0; i < prosessing_array.length; i++){\n    \n        if (msg_prosessing.payload.mac_adress == prosessing_array[i].mac_adress){\n\n            \n            break;\n            \n        }\n\n     \n}\n\n\n                prosessing_array[i] = {mac_adress: msg_prosessing.payload.mac_adress,\n                                        \n                                Min_samples: msg_prosessing.payload.Min_samples,\n                                Sample_cont: msg_prosessing.payload.Sample_cont,\n                                Max_samples: msg_prosessing.payload.Max_samples,\n                                G1_std_lim: msg_prosessing.payload.G1_std_lim,\n                                G2_std_lim: msg_prosessing.payload.G2_std_lim,\n                                G3_std_lim: msg_prosessing.payload.G3_std_lim,\n                                G4_std_lim: msg_prosessing.payload.G4_std_lim,\n                                G1_cont_lim: msg_prosessing.payload.G1_cont_lim,\n                                G2_cont_lim: msg_prosessing.payload.G2_cont_lim,\n                                G3_cont_lim: msg_prosessing.payload.G3_cont_lim,\n                                G4_cont_lim: msg_prosessing.payload.G4_cont_lim,\n            \n                                Trig_level: msg_prosessing.payload.Trig_level,\n                                //Start_delay: msg_prosessing.payload.Start_delay,\n                                //Trig_ch0: msg_prosessing.payload.Trig_ch0,\n                                //Trig_ch1: msg_prosessing.payload.Trig_ch1,\n                                Amp_trig: msg_prosessing.payload.Amp_trig,\n                                Amp_logging: msg_prosessing.payload.Amp_logging,\n\n                                packet_sent_utc: new Date(msg_prosessing.payload.packet_sent)\n                \n                \n            };\n\n\n\n\nflow.set('prosessing_array3', prosessing_array);\n\n\nvar prosessing_array_sorted = prosessing_array.sort(function compare(a,b){\n    if(a.mac_adress < b.mac_adress){return -1}\n    if(a.mac_adress > b.mac_adress){return 1}\n});\n\nvar string2 = {payload: prosessing_array_sorted};\nvar length = {payload: prosessing_array.length}\n\n\nreturn [string2,length];","outputs":2,"noerr":0,"x":411.42871856689453,"y":859.9999752044678,"wires":[["93a34e3e.3c722","2756989f.f5a1c8"],["86a331ca.73852"]]},{"id":"93a34e3e.3c722","type":"debug","z":"92fd8dc0.84ce3","name":"","active":true,"console":false,"complete":"false","x":731.4287185668945,"y":779.9999752044678,"wires":[]},{"id":"fb7b9ec6.65e28","type":"link in","z":"92fd8dc0.84ce3","name":"param in","links":["6641b9bb.a6d1b8"],"x":203.57157707214355,"y":859.9999799728394,"wires":[["be833eb.f40bbc"]]},{"id":"2756989f.f5a1c8","type":"ui_text","z":"92fd8dc0.84ce3","group":"35301823.8ecbd8","order":0,"width":"55","height":"10","name":"","label":"","format":"{{msg.payload}}","layout":"row-left","x":732.8572551182338,"y":847.1427974700925,"wires":[]},{"id":"e5a86ee2.ac976","type":"link in","z":"95aa686f.2682e8","name":"event in","links":["1470bb8e.117ea4"],"x":243.7500238418579,"y":794.1666526794434,"wires":[["ec49d738.ab8938","21c239ea.62fda6","599b2326.8e80ac","29fb8c06.400a24","5acf096.49ac5f8"]]},{"id":"ec49d738.ab8938","type":"switch","z":"95aa686f.2682e8","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a116","vt":"str"}],"checkall":"true","outputs":1,"x":497.0833435058594,"y":193.33334827423096,"wires":[["f8abf5e2.9be5e8"]]},{"id":"f8abf5e2.9be5e8","type":"buffer-array","z":"95aa686f.2682e8","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":747.0833435058594,"y":193.33334827423096,"wires":[["1823921a.6b517e","22dbbb44.f29ef4"]]},{"id":"1823921a.6b517e","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":false,"complete":"false","x":993.75,"y":270.4166603088379,"wires":[]},{"id":"f079c1.efec764","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":false,"complete":"false","x":1403.3334045410156,"y":86.72620964050293,"wires":[]},{"id":"31a25053.b1cd7","type":"rbe","z":"95aa686f.2682e8","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1202.7976379394531,"y":183.3333444595337,"wires":[["8e67ef7e.dd54a","f079c1.efec764","18533690.5afa49"]]},{"id":"8e67ef7e.dd54a","type":"switch","z":"95aa686f.2682e8","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1392.976417541504,"y":132.08332633972168,"wires":[["57538fd1.d58ae"]]},{"id":"57538fd1.d58ae","type":"sms out","z":"95aa686f.2682e8","name":"","destinations":"+4795709022","body":"Skred i Sandneslia 00170d000070a116","x":1546.0121459960938,"y":132.08334922790527,"wires":[]},{"id":"9c3cc48a.755488","type":"inject","z":"95aa686f.2682e8","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1018.3333587646484,"y":120.83335590362549,"wires":[["31a25053.b1cd7"]]},{"id":"599b2326.8e80ac","type":"switch","z":"95aa686f.2682e8","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a5e7","vt":"str"}],"checkall":"true","outputs":1,"x":505.83333587646484,"y":498.6667079925537,"wires":[["ab0dbedd.a969a"]]},{"id":"ab0dbedd.a969a","type":"buffer-array","z":"95aa686f.2682e8","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":755.8333282470703,"y":497.4166965484619,"wires":[["5ece8359.5200fc","b09ab00e.ee789"]]},{"id":"5ece8359.5200fc","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":false,"complete":"false","x":1006.0713729858398,"y":570.6905069351196,"wires":[]},{"id":"3c7c1794.4225a8","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":false,"complete":"false","x":1417.7976188659668,"y":397.9524154663086,"wires":[]},{"id":"f5abf72e.3cf968","type":"rbe","z":"95aa686f.2682e8","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1215.8333282470703,"y":497.4166965484619,"wires":[["dbc2e224.4f09b","3c7c1794.4225a8","a44d3e7.35616c"]]},{"id":"dbc2e224.4f09b","type":"switch","z":"95aa686f.2682e8","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1406.0118865966797,"y":449.02384185791016,"wires":[["7b1a68ab.6bbad8"]]},{"id":"7b1a68ab.6bbad8","type":"sms out","z":"95aa686f.2682e8","name":"","destinations":"+4795709022","body":"Skred i Sandneslia 00170d000070a5e7","x":1564.761875152588,"y":449.0238456726074,"wires":[]},{"id":"ae1a641d.d76358","type":"inject","z":"95aa686f.2682e8","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1027.0833435058594,"y":424.91670417785645,"wires":[["f5abf72e.3cf968"]]},{"id":"21c239ea.62fda6","type":"switch","z":"95aa686f.2682e8","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a324","vt":"str"}],"checkall":"true","outputs":1,"x":506.0833206176758,"y":795.6667137145996,"wires":[["9caef827.511568"]]},{"id":"9caef827.511568","type":"buffer-array","z":"95aa686f.2682e8","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":756.0833206176758,"y":795.6667137145996,"wires":[["b0482a1a.992258","369ee7c8.1aaa88"]]},{"id":"b0482a1a.992258","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":false,"complete":"false","x":1011.0833282470703,"y":874.4167861938477,"wires":[]},{"id":"7f504ea7.edc53","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":false,"complete":"false","x":1420.9048309326172,"y":684.7738609313965,"wires":[]},{"id":"ac57bec6.f3241","type":"rbe","z":"95aa686f.2682e8","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1216.0833206176758,"y":795.6667137145996,"wires":[["68fceb78.8de884","7f504ea7.edc53","fe401a75.d81af8"]]},{"id":"68fceb78.8de884","type":"switch","z":"95aa686f.2682e8","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1414.833366394043,"y":742.9881782531738,"wires":[["e7457ee4.0c438"]]},{"id":"fe401a75.d81af8","type":"dout0 out","z":"95aa686f.2682e8","name":"","x":1411.5833854675293,"y":793.66676902771,"wires":[]},{"id":"e7457ee4.0c438","type":"sms out","z":"95aa686f.2682e8","name":"","destinations":"+4795709022","body":"Skred i Sandneslia 00170d000070a324","x":1573.5833549499512,"y":742.9881820678711,"wires":[]},{"id":"cc0be5aa.510f18","type":"inject","z":"95aa686f.2682e8","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1027.3333358764648,"y":723.1667213439941,"wires":[["ac57bec6.f3241"]]},{"id":"29fb8c06.400a24","type":"switch","z":"95aa686f.2682e8","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070aa81","vt":"str"}],"checkall":"true","outputs":1,"x":517.9166641235352,"y":1102.5001039505005,"wires":[["8460b2c3.9cf28"]]},{"id":"8460b2c3.9cf28","type":"buffer-array","z":"95aa686f.2682e8","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":767.9166641235352,"y":1102.5001039505005,"wires":[["6b451f8e.51aa2","fe006a7b.40c748"]]},{"id":"6b451f8e.51aa2","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":false,"complete":"false","x":1016.2500076293945,"y":1181.2501516342163,"wires":[]},{"id":"bc2296a6.527628","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":false,"complete":"false","x":1425.5952453613281,"y":988.7501134872437,"wires":[]},{"id":"ec29a676.b05fd8","type":"rbe","z":"95aa686f.2682e8","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1227.9166641235352,"y":1102.5001039505005,"wires":[["d2551f04.e9bab","bc2296a6.527628","e9bedbf7.68b048"]]},{"id":"d2551f04.e9bab","type":"switch","z":"95aa686f.2682e8","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1419.5237617492676,"y":1048.3930292129517,"wires":[["7b24188b.3659c8"]]},{"id":"7b24188b.3659c8","type":"sms out","z":"95aa686f.2682e8","name":"","destinations":"+4795709022","body":"Skred i Sandneslia 00170d000070aa81","x":1578.2737503051758,"y":1048.393033027649,"wires":[]},{"id":"342f633b.8830bc","type":"inject","z":"95aa686f.2682e8","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1039.1666793823242,"y":1030.000111579895,"wires":[["ec29a676.b05fd8"]]},{"id":"5acf096.49ac5f8","type":"switch","z":"95aa686f.2682e8","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a854","vt":"str"}],"checkall":"true","outputs":1,"x":508.91668701171875,"y":1399.416746377945,"wires":[["3b54d216.735e1e"]]},{"id":"3b54d216.735e1e","type":"buffer-array","z":"95aa686f.2682e8","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":758.9166870117188,"y":1399.416746377945,"wires":[["48796eed.ba2cc","3705a2ce.4cd85e"]]},{"id":"48796eed.ba2cc","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":false,"complete":"false","x":1013.9166946411133,"y":1478.1667692661285,"wires":[]},{"id":"9f363dd8.983b","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":false,"complete":"false","x":1419.4524230957031,"y":1295.6667776107788,"wires":[]},{"id":"2149b9ec.ebb8f6","type":"rbe","z":"95aa686f.2682e8","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1218.9166870117188,"y":1399.416746377945,"wires":[["2f591523.1e432a","9f363dd8.983b","2a21b394.8d72cc"]]},{"id":"2f591523.1e432a","type":"switch","z":"95aa686f.2682e8","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1409.0952796936035,"y":1346.738221168518,"wires":[["bee2f562.25da58"]]},{"id":"bee2f562.25da58","type":"sms out","z":"95aa686f.2682e8","name":"","destinations":"+4795709022","body":"Skred i Sandneslia 00170d000070a854","x":1567.8452682495117,"y":1346.7382249832153,"wires":[]},{"id":"e1084ae1.86bc58","type":"inject","z":"95aa686f.2682e8","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1030.1667022705078,"y":1326.9167540073395,"wires":[["2149b9ec.ebb8f6"]]},{"id":"18533690.5afa49","type":"dout0 out","z":"95aa686f.2682e8","name":"","x":1390.0000076293945,"y":181.4285659790039,"wires":[]},{"id":"a44d3e7.35616c","type":"dout0 out","z":"95aa686f.2682e8","name":"","x":1405.7142448425293,"y":495.714316368103,"wires":[]},{"id":"e9bedbf7.68b048","type":"dout0 out","z":"95aa686f.2682e8","name":"","x":1418.5715103149414,"y":1101.4286050796509,"wires":[]},{"id":"2a21b394.8d72cc","type":"dout0 out","z":"95aa686f.2682e8","name":"","x":1411.4286003112793,"y":1398.5714225769043,"wires":[]},{"id":"fe006a7b.40c748","type":"function","z":"95aa686f.2682e8","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n   \n    is_avalanche = true\n    \n    var alarm = {payload: is_avalanche};  \n    \n    var ID = {payload: {flash_ID:msg.payload[1].flash_ID,\n                        mac_adress:msg.payload[1].mac_adress}};  \n    \n    return [alarm, msg2, ID];\n\n    \n} else {\n    \n    is_avalanche = false\n    var alarm = {payload: is_avalanche};  \n    \n    return [alarm, msg2, null];\n    \n}\n\n\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":"3","noerr":0,"x":1038.5714111328125,"y":1111.4285888671875,"wires":[["ec29a676.b05fd8"],[],["a5c026e4.1d6a18"]]},{"id":"a5c026e4.1d6a18","type":"rbe","z":"95aa686f.2682e8","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1235.7737617492676,"y":1159.5238103866577,"wires":[["d5e9471c.7c6348"]]},{"id":"d5e9471c.7c6348","type":"function","z":"95aa686f.2682e8","name":"Get raw data","func":"\nhex = \"000\" + parseInt(msg.payload.flash_ID).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload.flash_ID) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload.flash_ID)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\n\nvar mac_1  = parseInt(msg.payload.mac_adress.toString().substr(0,2),16);\nvar mac_2  = parseInt(msg.payload.mac_adress.toString().substr(2,2),16);\nvar mac_3  = parseInt(msg.payload.mac_adress.toString().substr(4,2),16);\nvar mac_4  = parseInt(msg.payload.mac_adress.toString().substr(6,2),16);\nvar mac_5  = parseInt(msg.payload.mac_adress.toString().substr(8,2),16);\nvar mac_6  = parseInt(msg.payload.mac_adress.toString().substr(10,2),16);\nvar mac_7  = parseInt(msg.payload.mac_adress.toString().substr(12,2),16);\nvar mac_8  = parseInt(msg.payload.mac_adress.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1426.9643096923828,"y":1161.1906080245972,"wires":[["92caf5c6.348d38","1bdc5eba.e3c341"]]},{"id":"92caf5c6.348d38","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":"false","complete":"false","x":1618.6307220458984,"y":1215.0000495910645,"wires":[]},{"id":"1bdc5eba.e3c341","type":"delay","z":"95aa686f.2682e8","name":"","pauseType":"delay","timeout":"8","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1613.333236694336,"y":1162.6190242767334,"wires":[["4a183b86.d390a4"]]},{"id":"4a183b86.d390a4","type":"link out","z":"95aa686f.2682e8","name":"com out","links":["40f262f9.a26d7c"],"x":1748.3332405090332,"y":1163.3333797454834,"wires":[]},{"id":"3705a2ce.4cd85e","type":"function","z":"95aa686f.2682e8","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n   \n    is_avalanche = true\n    \n    var alarm = {payload: is_avalanche};  \n    \n    var ID = {payload: {flash_ID:msg.payload[1].flash_ID,\n                        mac_adress:msg.payload[1].mac_adress}};  \n    \n    return [alarm, msg2, ID];\n\n    \n} else {\n    \n    is_avalanche = false\n    var alarm = {payload: is_avalanche};  \n    \n    return [alarm, msg2, null];\n    \n}\n\n\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":"3","noerr":0,"x":1030,"y":1411.6666259765625,"wires":[["2149b9ec.ebb8f6"],[],["1eaedac8.484b35"]]},{"id":"1eaedac8.484b35","type":"rbe","z":"95aa686f.2682e8","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1227.202350616455,"y":1459.7618474960327,"wires":[["e775aaec.bb11d8"]]},{"id":"e775aaec.bb11d8","type":"function","z":"95aa686f.2682e8","name":"Get raw data","func":"\nhex = \"000\" + parseInt(msg.payload.flash_ID).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload.flash_ID) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload.flash_ID)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\n\nvar mac_1  = parseInt(msg.payload.mac_adress.toString().substr(0,2),16);\nvar mac_2  = parseInt(msg.payload.mac_adress.toString().substr(2,2),16);\nvar mac_3  = parseInt(msg.payload.mac_adress.toString().substr(4,2),16);\nvar mac_4  = parseInt(msg.payload.mac_adress.toString().substr(6,2),16);\nvar mac_5  = parseInt(msg.payload.mac_adress.toString().substr(8,2),16);\nvar mac_6  = parseInt(msg.payload.mac_adress.toString().substr(10,2),16);\nvar mac_7  = parseInt(msg.payload.mac_adress.toString().substr(12,2),16);\nvar mac_8  = parseInt(msg.payload.mac_adress.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1418.3928985595703,"y":1461.4286451339722,"wires":[["17529177.b6c71f","6e517311.ad593c"]]},{"id":"6e517311.ad593c","type":"delay","z":"95aa686f.2682e8","name":"","pauseType":"delay","timeout":"9","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1604.7618255615234,"y":1462.8570613861084,"wires":[["c264b896.bde708"]]},{"id":"c264b896.bde708","type":"link out","z":"95aa686f.2682e8","name":"com out","links":["40f262f9.a26d7c"],"x":1739.7618293762207,"y":1463.5714168548584,"wires":[]},{"id":"17529177.b6c71f","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":"false","complete":"false","x":1614.059326171875,"y":1523.238037109375,"wires":[]},{"id":"369ee7c8.1aaa88","type":"function","z":"95aa686f.2682e8","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n   \n    is_avalanche = true\n    \n    var alarm = {payload: is_avalanche};  \n    \n    var ID = {payload: {flash_ID:msg.payload[1].flash_ID,\n                        mac_adress:msg.payload[1].mac_adress}};  \n    \n    return [alarm, msg2, ID];\n\n    \n} else {\n    \n    is_avalanche = false\n    var alarm = {payload: is_avalanche};  \n    \n    return [alarm, msg2, null];\n    \n}\n\n\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":"3","noerr":0,"x":1021.6667327880859,"y":809.9999380111694,"wires":[["ac57bec6.f3241"],[],["b00443.f8142bc"]]},{"id":"b00443.f8142bc","type":"rbe","z":"95aa686f.2682e8","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1218.869083404541,"y":858.0951595306396,"wires":[["34c99a06.99fb86"]]},{"id":"34c99a06.99fb86","type":"function","z":"95aa686f.2682e8","name":"Get raw data","func":"\nhex = \"000\" + parseInt(msg.payload.flash_ID).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload.flash_ID) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload.flash_ID)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\n\nvar mac_1  = parseInt(msg.payload.mac_adress.toString().substr(0,2),16);\nvar mac_2  = parseInt(msg.payload.mac_adress.toString().substr(2,2),16);\nvar mac_3  = parseInt(msg.payload.mac_adress.toString().substr(4,2),16);\nvar mac_4  = parseInt(msg.payload.mac_adress.toString().substr(6,2),16);\nvar mac_5  = parseInt(msg.payload.mac_adress.toString().substr(8,2),16);\nvar mac_6  = parseInt(msg.payload.mac_adress.toString().substr(10,2),16);\nvar mac_7  = parseInt(msg.payload.mac_adress.toString().substr(12,2),16);\nvar mac_8  = parseInt(msg.payload.mac_adress.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1410.0596313476562,"y":859.7619571685791,"wires":[["16663510.5f1adb","306fea08.fc6d06"]]},{"id":"306fea08.fc6d06","type":"delay","z":"95aa686f.2682e8","name":"","pauseType":"delay","timeout":"7","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1596.4285583496094,"y":861.1903734207153,"wires":[["a1b3574a.8896d8"]]},{"id":"a1b3574a.8896d8","type":"link out","z":"95aa686f.2682e8","name":"com out","links":["40f262f9.a26d7c"],"x":1731.4285621643066,"y":861.9047288894653,"wires":[]},{"id":"16663510.5f1adb","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":"false","complete":"false","x":1601.7260437011719,"y":913.5713987350464,"wires":[]},{"id":"b09ab00e.ee789","type":"function","z":"95aa686f.2682e8","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n   \n    is_avalanche = true\n    \n    var alarm = {payload: is_avalanche};  \n    \n    var ID = {payload: {flash_ID:msg.payload[1].flash_ID,\n                        mac_adress:msg.payload[1].mac_adress}};  \n    \n    return [alarm, msg2, ID];\n\n    \n} else {\n    \n    is_avalanche = false\n    var alarm = {payload: is_avalanche};  \n    \n    return [alarm, msg2, null];\n    \n}\n\n\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":"3","noerr":0,"x":1019.9999389648438,"y":509.9999694824219,"wires":[["f5abf72e.3cf968"],[],["6cf41d94.a4a364"]]},{"id":"6cf41d94.a4a364","type":"rbe","z":"95aa686f.2682e8","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1217.2022895812988,"y":558.0951910018921,"wires":[["35b46fd4.7fa45"]]},{"id":"35b46fd4.7fa45","type":"function","z":"95aa686f.2682e8","name":"Get raw data","func":"\nhex = \"000\" + parseInt(msg.payload.flash_ID).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload.flash_ID) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload.flash_ID)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\n\nvar mac_1  = parseInt(msg.payload.mac_adress.toString().substr(0,2),16);\nvar mac_2  = parseInt(msg.payload.mac_adress.toString().substr(2,2),16);\nvar mac_3  = parseInt(msg.payload.mac_adress.toString().substr(4,2),16);\nvar mac_4  = parseInt(msg.payload.mac_adress.toString().substr(6,2),16);\nvar mac_5  = parseInt(msg.payload.mac_adress.toString().substr(8,2),16);\nvar mac_6  = parseInt(msg.payload.mac_adress.toString().substr(10,2),16);\nvar mac_7  = parseInt(msg.payload.mac_adress.toString().substr(12,2),16);\nvar mac_8  = parseInt(msg.payload.mac_adress.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1408.392837524414,"y":559.7619886398315,"wires":[["fb92db9.bb8a328","5cb48e0c.8ced3"]]},{"id":"5cb48e0c.8ced3","type":"delay","z":"95aa686f.2682e8","name":"","pauseType":"delay","timeout":"6","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1594.7617645263672,"y":561.1904048919678,"wires":[["8f686bcd.421498"]]},{"id":"8f686bcd.421498","type":"link out","z":"95aa686f.2682e8","name":"com out","links":["40f262f9.a26d7c"],"x":1729.7617683410645,"y":561.9047603607178,"wires":[]},{"id":"fb92db9.bb8a328","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":"false","complete":"false","x":1600.0592498779297,"y":613.5714302062988,"wires":[]},{"id":"22dbbb44.f29ef4","type":"function","z":"95aa686f.2682e8","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n   \n    is_avalanche = true\n    \n    var alarm = {payload: is_avalanche};  \n    \n    var ID = {payload: {flash_ID:msg.payload[1].flash_ID,\n                        mac_adress:msg.payload[1].mac_adress}};  \n    \n    return [alarm, msg2, ID];\n\n    \n} else {\n    \n    is_avalanche = false\n    var alarm = {payload: is_avalanche};  \n    \n    return [alarm, msg2, null];\n    \n}\n\n\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":"3","noerr":0,"x":1008.3333129882812,"y":199.99998474121094,"wires":[["31a25053.b1cd7"],[],["6a2ffa8f.30c594"]]},{"id":"6a2ffa8f.30c594","type":"rbe","z":"95aa686f.2682e8","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1205.5356636047363,"y":248.09520626068115,"wires":[["bbba37e6.e0ea58"]]},{"id":"bbba37e6.e0ea58","type":"function","z":"95aa686f.2682e8","name":"Get raw data","func":"\nhex = \"000\" + parseInt(msg.payload.flash_ID).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload.flash_ID) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload.flash_ID)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\n\nvar mac_1  = parseInt(msg.payload.mac_adress.toString().substr(0,2),16);\nvar mac_2  = parseInt(msg.payload.mac_adress.toString().substr(2,2),16);\nvar mac_3  = parseInt(msg.payload.mac_adress.toString().substr(4,2),16);\nvar mac_4  = parseInt(msg.payload.mac_adress.toString().substr(6,2),16);\nvar mac_5  = parseInt(msg.payload.mac_adress.toString().substr(8,2),16);\nvar mac_6  = parseInt(msg.payload.mac_adress.toString().substr(10,2),16);\nvar mac_7  = parseInt(msg.payload.mac_adress.toString().substr(12,2),16);\nvar mac_8  = parseInt(msg.payload.mac_adress.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1396.7262115478516,"y":249.7620038986206,"wires":[["af95d7db.0f0938","ad2e28f9.c9ecb8"]]},{"id":"ad2e28f9.c9ecb8","type":"delay","z":"95aa686f.2682e8","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1583.0951385498047,"y":251.19042015075684,"wires":[["efe491f2.f1268"]]},{"id":"efe491f2.f1268","type":"link out","z":"95aa686f.2682e8","name":"com out","links":["40f262f9.a26d7c"],"x":1718.095142364502,"y":251.90477561950684,"wires":[]},{"id":"af95d7db.0f0938","type":"debug","z":"95aa686f.2682e8","name":"","active":false,"console":"false","complete":"false","x":1588.3926239013672,"y":303.5714454650879,"wires":[]},{"id":"6438a91f.ccda38","type":"ui_numeric","z":"92fd8dc0.84ce3","name":"","label":"Mac number","group":"3052b100.90849","order":11,"width":0,"height":0,"passthru":true,"topic":"","format":"{{value}}","min":"1","max":"101","step":1,"x":1011.4285888671875,"y":192.33327293395996,"wires":[["dd18d254.227e7"]]},{"id":"90dfcaba.d02ea8","type":"ui_text","z":"92fd8dc0.84ce3","group":"3052b100.90849","order":12,"width":0,"height":0,"name":"","label":"Mac address","format":"{{msg.payload}}","layout":"row-spread","x":1574.7621536254883,"y":181.85719299316406,"wires":[]},{"id":"dd18d254.227e7","type":"function","z":"92fd8dc0.84ce3","name":"Get mac address from number","func":"var sorted_mac_array = flow.get('sorted_mac_array') || 0\n\n//var mac_address = {payload:sorted_mac_array.payload[msg.payload-1]}\n\nvar mac_array = {payload:sorted_mac_array}\nvar mac_address = {payload:sorted_mac_array[msg.payload-1]}\n\nflow.set('mac_address',mac_address);\n\nreturn [mac_address, mac_array];","outputs":"2","noerr":0,"x":1291.9048919677734,"y":191.85717010498047,"wires":[["90dfcaba.d02ea8","75de1616.e94538"],["75de1616.e94538"]]},{"id":"9096e7bb.131c18","type":"link in","z":"92fd8dc0.84ce3","name":"aux in","links":["f4b3191.101b7e8"],"x":1131.8386316299438,"y":100.01075267791748,"wires":[["ee675f47.e4313"]]},{"id":"ee675f47.e4313","type":"function","z":"92fd8dc0.84ce3","name":"Update mac array","func":"var msg_mac = msg;\n\nvar mac_array = flow.get('mac_array_3') || []\n\n\nfor (i = 0; i < mac_array.length; i++){\n    \n        if (msg_mac.payload.mac_adress == mac_array[i]){\n\n            break;\n            \n        }\n  \n}\n\n\nmac_array[i] = msg_mac.payload.mac_adress\n                                        \nflow.set('mac_array_3', mac_array);\n\nvar mac_array_sorted = mac_array.sort();\n\nflow.set('sorted_mac_array',mac_array_sorted);\n\nvar string2 = {payload: mac_array_sorted};\nvar length = {payload: mac_array.length}\n\n\nreturn [string2,length];","outputs":"2","noerr":0,"x":1310.4763374328613,"y":99.28572654724121,"wires":[["75de1616.e94538"],[]]},{"id":"75de1616.e94538","type":"debug","z":"92fd8dc0.84ce3","name":"","active":false,"console":"false","complete":"true","x":1576.9049396514893,"y":91.42858123779297,"wires":[]}]