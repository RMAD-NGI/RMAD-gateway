[{"id":"a33a17a7.ed5f98","type":"tab","label":"RMAD Gateway"},{"id":"2a8e91d.ab3cd6e","type":"tab","label":"RMAD Dashboard"},{"id":"4cdbd1db.46238","type":"tab","label":"RMAD Avalanch alarm"},{"id":"45fc3d45.4aae94","type":"mqtt-broker","z":"","broker":"3z75l5.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"g:3z75l5:SmartSwarm342:Rensken","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"769b99c1.1fad08","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"ea9e75b4.08f2b8","type":"mqtt-broker","z":"","broker":"da-gateway-rockslide-iothub.azure-devices.net","port":"8883","tls":"769b99c1.1fad08","clientid":"rockfallgateway","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"devices/rockfallgateway/messages/events/$.ct=application%2Fjson&$.ce=utf-8","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"e7f152f8.01f02","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"Helvetica Neue","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Helvetica Neue","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"Helvetica Neue"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#000000","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"9b49012c.b0f8c","type":"mqtt-broker","z":"","broker":"3z75l5.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"g:3z75l5:SmartSwarm342:Rensken","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"bb9a358e.891618","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"769b99c1.1fad08","clientid":"renskendev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"c19723c2.c6772","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"38da4e86.75f1a2","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"79fc8101.e9255","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"769b99c1.1fad08","clientid":"lab","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"65cf484a.6d7f38","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"e09062fa.a28bd","clientid":"f46dev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"efcb0be8.01ce48","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"721aa9f0.cb4418","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"e09062fa.a28bd","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"e09062fa.a28bd","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"c2cbb2a0.bf95f","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"Helvetica Neue","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Helvetica Neue","edited":false},"customTheme":{"name":"","default":"#4B7930","baseColor":"#4B7930","baseFont":"Helvetica Neue"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#000000","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"26af180a.c30378","type":"ui_group","z":"","name":"Group","tab":"","order":null,"disp":true,"width":"6"},{"id":"b4d636a1.b10628","type":"ui_group","z":"","name":"Send to RMAD-EDGE","tab":"108eb31f.893c7d","order":1,"disp":true,"width":"6"},{"id":"bb147853.1f2b58","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"730078fa.116308","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"bbdcaae7.d5c008","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"8b4b3c5.b29a2c","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"5135cb34.81c504","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"8b4b3c5.b29a2c","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"cc47d52b.c0ba58","type":"ui_group","z":"","name":"Send command to EDGE","tab":"","order":1,"disp":true,"width":"6"},{"id":"470a3108.ab611","type":"ui_group","z":"","name":"Network Status","tab":"108eb31f.893c7d","order":2,"disp":true,"width":"6"},{"id":"653b35dd.87ed4c","type":"ui_group","z":"","name":"RMAD events","tab":"5ded4301.8bcdec","order":1,"disp":false,"width":"45"},{"id":"3b15e433.0ecdec","type":"ui_group","z":"","name":"RMAD raw","tab":"3cdca8e4.422008","order":1,"disp":false,"width":"40"},{"id":"52d55a1a.a47474","type":"ui_group","z":"","name":"RMAD aux","tab":"3eccf0c0.bb8aa","disp":false,"width":"35"},{"id":"cd174349.e27be","type":"ui_group","z":"","name":"RMAD prosessing","tab":"f11841a.f4a8fc","order":1,"disp":false,"width":"55"},{"id":"108eb31f.893c7d","type":"ui_tab","z":"","name":"RMAD config","icon":"dashboard","order":10},{"id":"5ded4301.8bcdec","type":"ui_tab","z":"","name":"RMAD events","icon":"dashboard","order":12},{"id":"3cdca8e4.422008","type":"ui_tab","z":"","name":"RMAD raw data","icon":"dashboard","order":13},{"id":"3eccf0c0.bb8aa","type":"ui_tab","z":"","name":"RMAD aux","icon":"dashboard","order":11},{"id":"f11841a.f4a8fc","type":"ui_tab","z":"","name":"RMAD param","icon":"dashboard","order":14},{"id":"1a3864.8e8e179c","type":"ui_group","z":"","name":"Send command to EDGE","tab":"","order":1,"disp":true,"width":"6"},{"id":"a36e9768.8aa8b8","type":"mqtt-broker","z":"","broker":"3z75l5.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"g:3z75l5:SmartSwarm342:Rensken","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"bf062324.07cd5","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"2a8483e.7f3c87c","type":"mqtt-broker","z":"","broker":"da-gateway-rockslide-iothub.azure-devices.net","port":"8883","tls":"bf062324.07cd5","clientid":"rockfallgateway","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"devices/rockfallgateway/messages/events/$.ct=application%2Fjson&$.ce=utf-8","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"de71561.845a3a8","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"Helvetica Neue","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Helvetica Neue","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"Helvetica Neue"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#000000","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"7f0e54e1.030ddc","type":"mqtt-broker","z":"","broker":"3z75l5.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"g:3z75l5:SmartSwarm342:Rensken","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"7cb1661d.338c78","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"bf062324.07cd5","clientid":"renskendev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"1b864031.575fd","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"7443dc27.754f44","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"946699be.d5fa98","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"537e74a6.90944c","clientid":"f46dev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"a973a404.60fd58","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"a8ffd92c.2cf488","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"537e74a6.90944c","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"537e74a6.90944c","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"77b77b18.f59f04","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"Helvetica Neue","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Helvetica Neue","edited":false},"customTheme":{"name":"","default":"#4B7930","baseColor":"#4B7930","baseFont":"Helvetica Neue"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#000000","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"f85d21b9.301bd","type":"ui_group","z":"","name":"Group","tab":"","order":null,"disp":true,"width":"6"},{"id":"f51834f5.ef3af8","type":"ui_group","z":"","name":"Send to RMAD-EDGE","tab":"23805509.f7d98a","order":1,"disp":true,"width":"6"},{"id":"3ade346f.fb713c","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"c99df20c.ed8d","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"4f424f78.b49ec","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"c0846220.e3a5e","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"9f945032.f7c82","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"c0846220.e3a5e","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"65f24076.5ec97","type":"ui_group","z":"","name":"Send command to EDGE","tab":"","order":1,"disp":true,"width":"6"},{"id":"41ac4dca.72ce24","type":"ui_group","z":"","name":"Network Status","tab":"23805509.f7d98a","order":2,"disp":true,"width":"6"},{"id":"2b69161f.42aa1a","type":"ui_group","z":"","name":"RMAD events","tab":"c1b017eb.aaf068","order":1,"disp":false,"width":"45"},{"id":"f3e35732.588fb8","type":"ui_group","z":"","name":"RMAD raw","tab":"601c7f04.f87d1","order":1,"disp":false,"width":"40"},{"id":"b08ba2d0.52936","type":"ui_group","z":"","name":"RMAD aux","tab":"23816305.3734dc","disp":false,"width":"35"},{"id":"178608aa.c63397","type":"ui_group","z":"","name":"RMAD prosessing","tab":"aae3f7d3.52b028","order":1,"disp":false,"width":"55"},{"id":"23805509.f7d98a","type":"ui_tab","z":"","name":"RMAD config","icon":"dashboard","order":10},{"id":"c1b017eb.aaf068","type":"ui_tab","z":"","name":"RMAD events","icon":"dashboard","order":12},{"id":"601c7f04.f87d1","type":"ui_tab","z":"","name":"RMAD raw data","icon":"dashboard","order":13},{"id":"23816305.3734dc","type":"ui_tab","z":"","name":"RMAD aux","icon":"dashboard","order":11},{"id":"aae3f7d3.52b028","type":"ui_tab","z":"","name":"RMAD param","icon":"dashboard","order":14},{"id":"e4f3acdb.3e057","type":"ui_group","z":"","name":"Send command to EDGE","tab":"","order":1,"disp":true,"width":"6"},{"id":"319012f6.95bd8e","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"b6be0794.d866b8","clientid":"f46","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"4d69b96c.0415f8","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"b6be0794.d866b8","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"4928defe.2068d","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"31f4e86.98a9418","clientid":"f46","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"8fa54d9.4530db","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"31f4e86.98a9418","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"9b840b59.90be78","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"e2545314.991d9","clientid":"f46","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"f3edd4b4.744708","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"e2545314.991d9","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"2c74fde2.37ae82","type":"mqtt-broker","z":"","broker":"3z75l5.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"g:3z75l5:SmartSwarm342:Rensken","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"d0e72ad9.4cce48","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"fcda5600.972428","type":"mqtt-broker","z":"","broker":"da-gateway-rockslide-iothub.azure-devices.net","port":"8883","tls":"d0e72ad9.4cce48","clientid":"rockfallgateway","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"devices/rockfallgateway/messages/events/$.ct=application%2Fjson&$.ce=utf-8","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"cea57bc5.617cf8","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"Helvetica Neue","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Helvetica Neue","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"Helvetica Neue"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#000000","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"e4e5c7ad.5100f8","type":"mqtt-broker","z":"","broker":"3z75l5.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"g:3z75l5:SmartSwarm342:Rensken","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"e9ea2f87.6b23b","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"d0e72ad9.4cce48","clientid":"renskendev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"8a657b0f.4ac5b8","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"47cc8249.4001bc","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"1bdc5dad.cfa7f2","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"d0e72ad9.4cce48","clientid":"lab","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"aa0e65ec.931998","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"853ee419.684d58","clientid":"f46dev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"d6a01acf.0e5478","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"5fe87c47.2c9184","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"853ee419.684d58","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"853ee419.684d58","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"93357a8.c212088","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"Helvetica Neue","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Helvetica Neue","edited":false},"customTheme":{"name":"","default":"#4B7930","baseColor":"#4B7930","baseFont":"Helvetica Neue"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#000000","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"11d9d53c.96672b","type":"ui_group","z":"","name":"Group","tab":"","order":null,"disp":true,"width":"6"},{"id":"8e6a4d2d.731d3","type":"ui_group","z":"","name":"Send to RMAD-EDGE","tab":"c46cb36d.387dd","order":1,"disp":true,"width":"6"},{"id":"802e463f.baf558","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"6a9392ca.44aa1c","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"c66ef059.e034e","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"2a6452a5.f3b4ae","clientid":"rasta","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"be859225.32c86","type":"wzzard-broker","z":"","broker":"localhost","port":"1883","compatmode":true,"keepalive":60,"cleansession":true,"willQos":"0","birthQos":"0"},{"id":"2a6452a5.f3b4ae","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","verifyservercert":true},{"id":"89d1143a.d76c68","type":"ui_group","z":"","name":"Send command to EDGE","tab":"","order":1,"disp":true,"width":"6"},{"id":"8203fe43.ebce4","type":"ui_group","z":"","name":"Network Status","tab":"c46cb36d.387dd","order":2,"disp":true,"width":"6"},{"id":"da7f4ba3.80c8d8","type":"ui_group","z":"","name":"RMAD events","tab":"a951005e.9976f","order":1,"disp":false,"width":"45"},{"id":"912a8793.1b1268","type":"ui_group","z":"","name":"RMAD raw","tab":"32c592c0.bd68de","order":1,"disp":false,"width":"40"},{"id":"300e6cf7.86fc24","type":"ui_group","z":"","name":"RMAD aux","tab":"ac40106f.fd5e8","disp":false,"width":"35"},{"id":"421c93c7.2e33dc","type":"ui_group","z":"","name":"RMAD prosessing","tab":"49cb79af.539ca8","order":1,"disp":false,"width":"55"},{"id":"c46cb36d.387dd","type":"ui_tab","z":"","name":"RMAD config","icon":"dashboard","order":10},{"id":"a951005e.9976f","type":"ui_tab","z":"","name":"RMAD events","icon":"dashboard","order":12},{"id":"32c592c0.bd68de","type":"ui_tab","z":"","name":"RMAD raw data","icon":"dashboard","order":13},{"id":"ac40106f.fd5e8","type":"ui_tab","z":"","name":"RMAD aux","icon":"dashboard","order":11},{"id":"49cb79af.539ca8","type":"ui_tab","z":"","name":"RMAD param","icon":"dashboard","order":14},{"id":"82888ace.849b28","type":"ui_group","z":"","name":"Send command to EDGE","tab":"","order":1,"disp":true,"width":"6"},{"id":"cec61a0b.3c53b8","type":"mqtt-broker","z":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"d0e72ad9.4cce48","clientid":"sandnesliadev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"21cd9cdb.e48674","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"4ca43348.12dffc","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"bb56b9ac.c2ea68","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"24604ba8.0114e4","type":"mqtt-broker","z":"","broker":"broker.hivemq.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"cc4288a7.1c27e8","type":"function","z":"a33a17a7.ed5f98","name":"Hello to serialmux","func":"msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0C, 0x00, 0x00, 0x01, 0x04, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37]);\n\n\nreturn msg;","outputs":1,"noerr":0,"x":648,"y":180,"wires":[["6ea342a1.1b390c"]]},{"id":"5164a173.3ac8","type":"inject","z":"a33a17a7.ed5f98","name":"Connect","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":399.4285202026367,"y":87.14283752441406,"wires":[["cc4288a7.1c27e8"]]},{"id":"f52ec4d0.1c1838","type":"debug","z":"a33a17a7.ed5f98","name":"from mux","active":false,"console":false,"complete":"payload","x":1446.333023071289,"y":153.4761619567871,"wires":[]},{"id":"8487b442.168038","type":"function","z":"a33a17a7.ed5f98","name":"Subscribe","func":"msg.payload = msg.payload.toString('hex');\n\nif (msg.payload == \"a740a0f500050000010004\") //hell0 response - send subscribe\n{\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0B, 0x00, 0x00, 0x16, 0xFF, 0xFF, 0xFF, 0x52, 0xFF, 0xFF, 0xFF, 0x50]);\n\nreturn msg;\n} else if (msg.payload == \"a740a0f5000400000101\")\n{\n//msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x0B, 0x00, 0x00, 0x16, 0xFF, 0xFF, 0xFF, 0x52, 0xFF, 0xFF, 0xFF, 0x50]);\n\nreturn msg;\n} else if (msg.payload == \"a740a0f5000400001600\") //subscribe response - send gettime\n{\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);\n\nreturn msg;\n} else\n{\nreturn null;\n\n}\n","outputs":1,"noerr":0,"x":656.3809547424316,"y":316.61901473999023,"wires":[["6ea342a1.1b390c"]]},{"id":"ba600797.d83fd8","type":"function","z":"a33a17a7.ed5f98","name":"Payload to hexstring","func":"msg.payload = msg.payload.toString('hex');\n\nreturn msg;\n","outputs":1,"noerr":0,"x":1214.5238037109375,"y":152.71425247192383,"wires":[["f52ec4d0.1c1838"]]},{"id":"6ea342a1.1b390c","type":"tcp request","z":"a33a17a7.ed5f98","server":"192.168.1.1","port":"9900","out":"sit","splitc":"0","name":"Serial_MUX","x":916.7142944335938,"y":317.71424102783203,"wires":[["ba600797.d83fd8","95e6abd7.d0e0f8","80064c0a.ac1ba"]]},{"id":"10f6b589.5a3eca","type":"link in","z":"a33a17a7.ed5f98","name":"loop in","links":["95e6abd7.d0e0f8"],"x":504.7143020629883,"y":369.2856845855713,"wires":[["8487b442.168038"]]},{"id":"95e6abd7.d0e0f8","type":"link out","z":"a33a17a7.ed5f98","name":"loop out","links":["10f6b589.5a3eca"],"x":1145.7143020629883,"y":369.95237159729004,"wires":[]},{"id":"80064c0a.ac1ba","type":"function","z":"a33a17a7.ed5f98","name":"SmaertMeshIP to JSON","func":"msg.payload = msg.payload.toString('hex');\n\nvar msg_out=[];\n\nif (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"04\") // inkommende pakke er en \"data\"\n{\n    \n    while (msg.payload.length>0){\n    \n        var msg2 = {payload:{header_token: msg.payload.substring(0,8), \n            packet_type: msg.payload.substring(16,18),\n            notifType: msg.payload.substring(18,20),\n            payload_length: msg.payload.substring(8,12),\n            macAddress: msg.payload.substring(44,60),\n            timestamp: msg.payload.substring(20,44),\n            srcPort: msg.payload.substring(60,64),\n            dstPort: msg.payload.substring(64,68),\n            data: msg.payload.substring(68,12+(2* parseInt(msg.payload.substring(8,12),16)))}};\n    \n        msg_out.push(msg2);\n    \n        msg.payload = msg.payload.substring(12+(2* parseInt(msg.payload.substring(8,12),16)));\n    \n    }\n\n    return [msg_out,null,null,null];\n \n}else if (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"06\" && msg.payload.substring(36,38) == \"80\") // inkommende pakke er en \"device health report\"\n{  \n    \n    var healthReport = {payload:{\n        //notiftype:msg.payload.substring(36,38), \n        battery_mote: parseInt(msg.payload.substring(52,56),16)/1000,\n        temperature_mote: hexToSignedInt(msg.payload.substring(50,52)),\n        //payload: msg.payload,\n        mac_adress: msg.payload.substring(20,36),\n        packet_type: \"device_healthReport\"}};\n    \n    return [null,healthReport,null,null];\n    \n}else if (msg.payload.substring(16,18) == \"17\") // inkommende pakke er en \"networktime\"\n{    \n \n    network_time = parseInt(msg.payload.substring(28,44),16)*1000 + parseInt(msg.payload.substring(44,52),16)/1000; //tidspungt når pakke ble sendt - msec since 1 january 1970 \n    gateway_time = new Date().getTime(); //msec since 1 january 1970  \n    time_diff = gateway_time - network_time;\n\n    flow.set('time_diff',time_diff);\n\n    var time_msg = {payload:{\n\n        network_time: network_time,\n        gateway_time: gateway_time,\n        time_diff: time_diff}};\n    \n    return [null,null,time_msg,null];\n    \n}else if (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"01\" && msg.payload.substring(28,30) == \"04\") // mote stat \"operational\"\n{  \n    \n    var moteStateChanged = {payload:{\n        //notiftype:msg.payload.substring(36,38), \n        //battery_mote: parseInt(msg.payload.substring(52,56),16)/1000,\n        state: \"operational\",\n        //payload: msg.payload,\n        mac_adress: msg.payload.substring(30,46),\n        packet_type: \"moteStateChanged\"}};\n    \n    return [null,null,null,moteStateChanged];\n    \n}else if (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"01\" && msg.payload.substring(28,30) == \"05\") // mote stat \"lost\"\n{  \n    \n    var moteStateChanged = {payload:{\n        //notiftype:msg.payload.substring(36,38), \n        //battery_mote: parseInt(msg.payload.substring(52,56),16)/1000,\n        state: \"lost\",\n        //payload: msg.payload,\n        mac_adress: msg.payload.substring(30,46),\n        packet_type: \"moteStateChanged\"}};\n    \n    return [null,null,null,moteStateChanged];\n\n\n}else if (msg.payload.substring(16,18) == \"14\" && msg.payload.substring(18,20) == \"01\" && msg.payload.substring(28,30) == \"03\") // mote stat \"motejoin\"\n{  \n    \n    var moteStateChanged = {payload:{\n        //notiftype:msg.payload.substring(36,38), \n        //battery_mote: parseInt(msg.payload.substring(52,56),16)/1000,\n        state: \"joining\",\n        //payload: msg.payload,\n        mac_adress: msg.payload.substring(30,46),\n        packet_type: \"moteStateChanged\"}};\n    \n    return [null,null,null,moteStateChanged];\n    \n}else{\n    \n    return [null,null,null,null];\n}\n\n\nfunction hexToSignedInt(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = \"0\" + hex;\n    }\n    var num = parseInt(hex, 16);\n    var maxVal = Math.pow(2, hex.length / 2 * 8);\n    if (num > maxVal / 2 - 1) {\n        num = num - maxVal;\n    }\n    return num;\n}\n","outputs":"4","noerr":0,"x":676.7143020629883,"y":705.785717010498,"wires":[["60f754ea.ce7c6c"],["70fc4b20.a94af4","b54a17a2.5c5508","67ac39c4.762158"],["3d292c31.208cf4"],["b54a17a2.5c5508","67ac39c4.762158"]]},{"id":"60f754ea.ce7c6c","type":"function","z":"a33a17a7.ed5f98","name":"RMAD to Azure","func":"if (msg.payload.notifType == \"04\") //is data notification\n{\n  \n\nvar time_diff = flow.get('time_diff') || 0;\n\nif (msg.payload.data.substring(0,2) == \"07\")  //is AUX datapaket\n{\n    \nvar aux_is_signedint = parseInt(msg.payload.data.substring(16,18),16).toString(2).split('').map(x => x === '1');\nvar num_aux = (msg.payload.data.length - 18) / 4;\nvar aux_data = [];\n\nvar i;\nfor (i = 0; i < num_aux; i++) { \n    if (aux_is_signedint[i]) {\n        aux_data[i] = Math.round((hexToSignedInt(msg.payload.data.substring(18+4*i+2,18+4*i+4)+msg.payload.data.substring(18+4*i,18+4*i+2)))*1000)/1000; //*2.5/65536 kommentert ut utregning til volt\n    } else {\n        aux_data[i] = Math.round((parseInt(msg.payload.data.substring(18+4*i+2,18+4*i+4)+msg.payload.data.substring(18+4*i,18+4*i+2),16))*1000)/1000; //*2.5/65536 kommentert ut utregning til volt for å test triggnivå\n    }\n}\n\n\nvar aux_msg = {\n\n                payload:    \n\n\n                {config:    {type:parseInt(msg.payload.data.substring(2,3),16),\n                                        sw:parseInt(msg.payload.data.substring(3,4),16),\n                                        hw:parseInt(msg.payload.data.substring(4,5),16),\n                                        radio:parseInt(msg.payload.data.substring(5,6),16)},\n                                        \n                            state:     {charge_enabled: ((parseInt(msg.payload.data.substring(6,8),16) & 1) == 1) ? 1 : 0,\n                                        fast_charge: ((parseInt(msg.payload.data.substring(6,8),16) & 2) == 2) ? 1 : 0,\n                                        acmp1_out: ((parseInt(msg.payload.data.substring(6,8),16) & 4) == 4) ? 1 : 0,\n                                        acmp2_out: ((parseInt(msg.payload.data.substring(6,8),16) & 8) == 8) ? 1 : 0,\n                                        acmp_vddref: ((parseInt(msg.payload.data.substring(6,8),16) & 16) == 16) ? 1 : 0},\n                                    \n                            //charge_enabled: Boolean(parseInt(msg.payload.data.substring(6,8),16) & 1 == 1),\n                            battery: Math.round((parseInt(msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16)*(3*2.5/65536)+0.69)*1000)/1000,\n                            temperature: hexToSignedInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14),16)/100,\n                            aux: aux_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"aux_data\"\n                            },\n                        \n\n};\n            \n\nreturn [aux_msg,null,null,null,null];\n\n} \nelse if (msg.payload.data.substring(0,2) == \"00\")  //is SVV avalanch packet\n{\n \nvar svv_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46))),\n                            G4_std: Math.round(parseFloatHex(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_max: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G3_max: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G4_max: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78),16),\n                            G2_min: parseInt(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82),16),\n                            G3_min: parseInt(msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86),16),\n                            G4_min: parseInt(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(98,100) + msg.payload.data.substring(96,98),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102),16),\n                            G4_maxS: parseInt(msg.payload.data.substring(106,108) + msg.payload.data.substring(104,106),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(110,112) + msg.payload.data.substring(108,110),16),\n                            G2_minS: parseInt(msg.payload.data.substring(114,116) + msg.payload.data.substring(112,114),16),\n                            G3_minS: parseInt(msg.payload.data.substring(118,120) + msg.payload.data.substring(116,118),16),\n                            G4_minS: parseInt(msg.payload.data.substring(122,124) + msg.payload.data.substring(120,122),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_svv\"\n                            },\n                            \n\n};  \n\n \n  \nreturn [null,svv_msg,null,null,null];\n    \n} \nelse if (msg.payload.data.substring(0,2) == \"08\")  //is JBV avalanch packet\n{\n \n  var jbv_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: parseInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: parseInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: parseInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_jbv\"\n                            },\n                            \n\n};  \n\n \n  \nreturn [null,jbv_msg,null,null,null]; \n\n} \nelse if (msg.payload.data.substring(0,2) == \"0a\") //is event packet\n{  \n\nif (msg.payload.data.length == 170){ var event_msg = {payload:   //4 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G4_std: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            G3_mean: Math.round(parseFloatHex(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92))),\n                            G4_mean: Math.round(parseFloatHex(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(108,110) + msg.payload.data.substring(106,108),16),\n                            G2_max: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                            G3_max: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n                            G4_max: parseInt(msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(124,126) + msg.payload.data.substring(122,124),16),\n                            G2_min: parseInt(msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128),16),\n                            G3_min: parseInt(msg.payload.data.substring(132,134) + msg.payload.data.substring(130,132),16),\n                            G4_min: parseInt(msg.payload.data.substring(136,138) + msg.payload.data.substring(134,136),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(140,142) + msg.payload.data.substring(138,140),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(144,146) + msg.payload.data.substring(142,144),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(148,150) + msg.payload.data.substring(146,148),16),\n                            G4_maxS: parseInt(msg.payload.data.substring(152,154) + msg.payload.data.substring(150,152),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(156,158) + msg.payload.data.substring(154,156),16),\n                            G2_minS: parseInt(msg.payload.data.substring(160,162) + msg.payload.data.substring(158,160),16),\n                            G3_minS: parseInt(msg.payload.data.substring(164,166) + msg.payload.data.substring(162,164),16),\n                            G4_minS: parseInt(msg.payload.data.substring(168,170) + msg.payload.data.substring(166,168),16),\n                            \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n                            \n\n} \n\n} \nelse if (msg.payload.data.length == 138){ var event_msg = {payload:   //3 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G3_mean: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            G2_max: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96),16),\n                            G3_max: parseInt(msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104),16),\n                            G2_min: parseInt(msg.payload.data.substring(108,110) + msg.payload.data.substring(106,108),16),\n                            G3_min: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(124,126) + msg.payload.data.substring(122,124),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128),16),\n                            G2_minS: parseInt(msg.payload.data.substring(132,134) + msg.payload.data.substring(130,132),16),\n                            G3_minS: parseInt(msg.payload.data.substring(136,138) + msg.payload.data.substring(134,136),16),\n                           \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n                            \n\n} \n\n} \nelse if (msg.payload.data.length == 106){var event_msg = {payload:  //2 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76),16),\n                            G2_max: parseInt(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80),16),\n                           \n                            G1_min: parseInt(msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84),16),\n                            G2_min: parseInt(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96),16),\n                          \n                            G1_minS: parseInt(msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            G2_minS: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104),16),\n                        \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n\n\n}\n\n\n} \nelse if (msg.payload.data.length == 74) {var event_msg = {payload:  //1 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60),16),\n                           \n                            G1_min: parseInt(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72),16),\n                            \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event\"\n                            },\n\n\n}\n}\nreturn [null,event_msg,null,null,null];\n\n} \nelse if (msg.payload.data.substring(0,2) == \"09\")  //is JBV diff avalanch packet\n{\n \n \n \n var jbv_diff_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: hexToSignedInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: hexToSignedInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: hexToSignedInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: hexToSignedInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"event_jbv\"\n                            },\n \n    \n};  \n\n \n  \nreturn [null,jbv_diff_msg,null,null,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"03\")  //is Recent event packet\n{\n \n var recent_event_msg = {payload:\n \n\n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            sps: parseInt(msg.payload.data.substring(32,34)+msg.payload.data.substring(30,32),16)/100,\n                            num_samples: parseInt(msg.payload.data.substring(36,38)+msg.payload.data.substring(34,36),16),\n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20) + msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8),16)*1000 + parseInt(msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28) + msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24),16)/1000) + time_diff), //starttid for dataset - msec since 1 january 1970\n\n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"recent_event\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,recent_event_msg,null,null];      \n\n} \nelse if (msg.payload.data.substring(0,2) == \"06\")  //is raw dat packet\n{\n    \nvar num_raw = (msg.payload.data.length - 24) / 4;\nvar raw_data = [];\n\nvar i;\nfor (i = 0; i < num_raw; i++) { \n\n        raw_data[i] = parseInt(msg.payload.data.substring(24+4*i+2,24+4*i+4)+msg.payload.data.substring(24+4*i,24+4*i+2),16);\n\n}\n \n var raw_data_msg = {payload:\n \n                \n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            channels: parseInt(msg.payload.data.substring(6,8),16),\n                            \n                            scan_start: parseInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14)+msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16),\n                            scan_stop: parseInt(msg.payload.data.substring(22,24)+msg.payload.data.substring(20,22)+msg.payload.data.substring(18,20)+msg.payload.data.substring(16,18),16),\n                            \n                            samples: raw_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"raw_data\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,null,raw_data_msg,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"0a\")  //is raw diff dat packet\n{\n    \nvar num_raw = (msg.payload.data.length - 24) / 4;\nvar raw_data = [];\n\nvar i;\nfor (i = 0; i < num_raw; i++) { \n\n        raw_data[i] = hexToSignedInt(msg.payload.data.substring(24+4*i+2,24+4*i+4)+msg.payload.data.substring(24+4*i,24+4*i+2),16);\n\n}\n \n var raw_data_diff_msg = {payload:\n \n                \n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            channels: parseInt(msg.payload.data.substring(6,8),16),\n                            \n                            scan_start: parseInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14)+msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16),\n                            scan_stop: parseInt(msg.payload.data.substring(22,24)+msg.payload.data.substring(20,22)+msg.payload.data.substring(18,20)+msg.payload.data.substring(16,18),16),\n                            \n                            samples: raw_data,\n                            \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"raw_data\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,null,raw_data_diff_msg,null];  \n\n} \nelse if (msg.payload.data.substring(0,2) == \"04\")  //is adjustable param pacjet\n{\n \nvar par_msg = {payload:\n \n\n                {           \n                    \n                            Min_samples: parseInt(msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16),\n                            Sample_cont: parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12),16),\n                            Max_samples: parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16),\n                            \n                            \n                            \n                            G1_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28))),\n                            G2_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36))),\n                            \n                            G3_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G4_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G2_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G3_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G4_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            \n                            Trig_level: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            Start_delay: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            \n                            Trig_ch0: parseInt(msg.payload.data.substring(106,108),16),\n                            Trig_ch1: parseInt(msg.payload.data.substring(108,110),16),\n                            \n                            Amp_trig: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                            Amp_logging: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n          \n                            packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            mac_adress: msg.payload.macAddress,\n                            packet_type: \"prosessing_params\"\n                            },\n                            \n\n};\n\n \n  \nreturn [null,null,null,null,par_msg];\n}\n\n\n}\n\nfunction hexToSignedInt(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = \"0\" + hex;\n    }\n    var num = parseInt(hex, 16);\n    var maxVal = Math.pow(2, hex.length / 2 * 8);\n    if (num > maxVal / 2 - 1) {\n        num = num - maxVal;\n    }\n    return num;\n}\n\nfunction parseFloatHex(str) {\n    var float = 0, sign, order, mantiss,exp,\n    int = 0, multi = 1;\n    int = parseInt(str,16);\n    sign = (int>>>31)?-1:1;\n    exp = (int >>> 23 & 0xff) - 127;\n    mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n    for (i=0; i<mantissa.length; i+=1){\n        float += parseInt(mantissa[i])? Math.pow(2,exp):0;\n        exp--;\n    }\n    return float*sign;\n}","outputs":"5","noerr":0,"x":1056.706298828125,"y":684.1309204101562,"wires":[["1832b011.5b1cd","b68ef3a9.6e4","67ac39c4.762158","b54a17a2.5c5508"],["84091470.6b6708","67ac39c4.762158","b54a17a2.5c5508","5ce94d47.233544"],["d738df8d.73c35","574a61ba.84ad5"],["7a326c52.8ce9c4","67ac39c4.762158","945d5b19.20a168","b54a17a2.5c5508"],["5f3589e5.1fa3b8","33088ba6.65c9f4"]]},{"id":"70fc4b20.a94af4","type":"debug","z":"a33a17a7.ed5f98","name":"mesh status","active":false,"console":"false","complete":"payload","x":947.75,"y":828.892879486084,"wires":[]},{"id":"1832b011.5b1cd","type":"debug","z":"a33a17a7.ed5f98","name":"AUX","active":true,"console":"false","complete":"payload","x":1412.5710372924805,"y":470.7856321334839,"wires":[]},{"id":"d0b84971.1c53f8","type":"status","z":"a33a17a7.ed5f98","name":"","scope":["6ea342a1.1b390c"],"x":123.67861938476562,"y":153.035737991333,"wires":[["19aef1a3.2f2a6e"]]},{"id":"19aef1a3.2f2a6e","type":"switch","z":"a33a17a7.ed5f98","name":"","property":"status.text","propertyType":"msg","rules":[{"t":"eq","v":"common.status.disconnected","vt":"str"}],"checkall":"true","outputs":1,"x":280.6786193847656,"y":153.03576850891113,"wires":[["41c63f12.60005"]]},{"id":"41c63f12.60005","type":"delay","z":"a33a17a7.ed5f98","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":421.9285583496094,"y":154.53567695617676,"wires":[["cc4288a7.1c27e8"]]},{"id":"e1668f72.3b753","type":"function","z":"a33a17a7.ed5f98","name":"Correct time","func":"\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);//subscribe response - send gettime\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":648.1785888671875,"y":249.03567504882812,"wires":[["6ea342a1.1b390c"]]},{"id":"a63e7085.b3939","type":"inject","z":"a33a17a7.ed5f98","name":"Get Time","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"10 00 * * *","once":false,"x":394.17858123779297,"y":248.03567504882812,"wires":[["e1668f72.3b753"]]},{"id":"1135bc3a.c85624","type":"ui_button","z":"2a8e91d.ab3cd6e","name":"","group":"8e6a4d2d.731d3","order":1,"width":0,"height":0,"label":"Transport mode","color":"","bgcolor":"","icon":"","payload":"12","payloadType":"num","topic":"","x":1063.8095397949219,"y":317.6189241409302,"wires":[["88c85619.403ff8"]]},{"id":"330b8308.cd1cdc","type":"debug","z":"2a8e91d.ab3cd6e","name":"","active":false,"console":"false","complete":"true","x":1593.8097915649414,"y":464.76183700561523,"wires":[]},{"id":"a33b4702.6796f8","type":"link in","z":"a33a17a7.ed5f98","name":"com in","links":["2797d770.271ec8","abe70f8e.fbbb9","7469bb53.53f034","55d02321.fbb7cc","dfcfd468.051cc8","cdb33e2e.2db6d"],"x":677.1428571428571,"y":428.57142857142856,"wires":[["6ea342a1.1b390c"]]},{"id":"2797d770.271ec8","type":"link out","z":"2a8e91d.ab3cd6e","name":"com out","links":["a33b4702.6796f8"],"x":1591.190507888794,"y":687.1427745819092,"wires":[]},{"id":"88c85619.403ff8","type":"function","z":"2a8e91d.ab3cd6e","name":"RMAD request to edge","func":"\nvar mac_address = flow.get('mac_address') || 0;\n\n\nvar mac_1  = parseInt(mac_address.payload.toString().substr(0,2),16);\nvar mac_2  = parseInt(mac_address.payload.toString().substr(2,2),16);\nvar mac_3  = parseInt(mac_address.payload.toString().substr(4,2),16);\nvar mac_4  = parseInt(mac_address.payload.toString().substr(6,2),16);\nvar mac_5  = parseInt(mac_address.payload.toString().substr(8,2),16);\nvar mac_6  = parseInt(mac_address.payload.toString().substr(10,2),16);\nvar mac_7  = parseInt(mac_address.payload.toString().substr(12,2),16);\nvar mac_8  = parseInt(mac_address.payload.toString().substr(14,2),16);\n\n\n//msg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x03, 0x00, 0x00, 0x17]);//subscribe response - send gettime\n\n//var msg_out = {payload: new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x12, 0x00, 0x00, 0x2c ,0x00, 0x17, 0x0d, 0x00, 0x00, 0x30, 0xe2, 0xa9, 0x01, 0xf0, 0xb9, 0xf0, 0xb9,  0x00, msg.payload, mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8])};//set transport mode\n\nvar msg_out = {payload: new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x12, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9,  0x00, msg.payload])};//set transport mode\n\n\n//mac = new Buffer ([0x00, 0x17, 0x0d, 0x00, 0x00, 0x30, 0xe2, 0xa9]);//set transport mode\n\n//tail = new Buffer ([0x01, 0xf0, 0xb9, 0xf0, 0xc9, 0x00, 0x0c]);//set transport mode\n\n\nreturn [msg_out];\n\n","outputs":"1","noerr":0,"x":1326.6666564941406,"y":523.3332958221436,"wires":[["330b8308.cd1cdc","2797d770.271ec8"]]},{"id":"47c07dd1.f795d4","type":"ui_button","z":"2a8e91d.ab3cd6e","name":"","group":"8e6a4d2d.731d3","order":2,"width":0,"height":0,"label":"External reset","color":"","bgcolor":"","icon":"","payload":"0","payloadType":"str","topic":"","x":1062.8570518493652,"y":382.8570394515991,"wires":[["88c85619.403ff8"]]},{"id":"38b67bf0.43b8e4","type":"ui_button","z":"2a8e91d.ab3cd6e","name":"","group":"8e6a4d2d.731d3","order":3,"width":0,"height":0,"label":"Get AUX","color":"","bgcolor":"","icon":"","payload":"1","payloadType":"num","topic":"","x":1047.8570518493652,"y":440.47612285614014,"wires":[["88c85619.403ff8"]]},{"id":"266a48b3.127828","type":"ui_button","z":"2a8e91d.ab3cd6e","name":"","group":"8e6a4d2d.731d3","order":4,"width":0,"height":0,"label":"Start Logging","color":"","bgcolor":"","icon":"","payload":"4","payloadType":"num","topic":"","x":1060.7140846252441,"y":498.5713920593262,"wires":[["88c85619.403ff8"]]},{"id":"9594bd16.fb6d9","type":"ui_button","z":"2a8e91d.ab3cd6e","name":"","group":"8e6a4d2d.731d3","order":5,"width":0,"height":0,"label":"Get Params","color":"","bgcolor":"","icon":"","payload":"5","payloadType":"num","topic":"","x":1058.095371246338,"y":558.3332965373993,"wires":[["88c85619.403ff8"]]},{"id":"84091470.6b6708","type":"debug","z":"a33a17a7.ed5f98","name":"Event","active":false,"console":"false","complete":"payload","x":1414.306022644043,"y":561.4368095397949,"wires":[]},{"id":"d738df8d.73c35","type":"debug","z":"a33a17a7.ed5f98","name":"Recent Event","active":false,"console":"false","complete":"payload","x":1442.877296447754,"y":665.7223930358887,"wires":[]},{"id":"7a326c52.8ce9c4","type":"debug","z":"a33a17a7.ed5f98","name":"Raw data","active":true,"console":"false","complete":"payload","x":1421.4489135742188,"y":757.150972366333,"wires":[]},{"id":"5f3589e5.1fa3b8","type":"debug","z":"a33a17a7.ed5f98","name":"Params","active":false,"console":"false","complete":"payload","x":1420.0202026367188,"y":845.7225112915039,"wires":[]},{"id":"3d292c31.208cf4","type":"debug","z":"a33a17a7.ed5f98","name":"time event","active":false,"console":"false","complete":"payload","x":924.0299835205078,"y":883.7581310272217,"wires":[]},{"id":"b68ef3a9.6e4","type":"link out","z":"a33a17a7.ed5f98","name":"aux out","links":["3b9924aa.05737c","667fedc3.3e6524","a4d8874c.1176d8","cf7df779.7e3988"],"x":1383.0640449523926,"y":429.02995681762695,"wires":[]},{"id":"574a61ba.84ad5","type":"link out","z":"a33a17a7.ed5f98","name":"recent event out","links":["d0b10a6d.8c6248"],"x":1377.3618621826172,"y":621.8749198913574,"wires":[]},{"id":"33088ba6.65c9f4","type":"link out","z":"a33a17a7.ed5f98","name":"param out","links":["14c1ef45.4d4dc1","1d389d78.244103"],"x":1381.6395072937012,"y":804.7361240386963,"wires":[]},{"id":"b54a17a2.5c5508","type":"mqtt out","z":"a33a17a7.ed5f98","name":"","topic":"RMAD/Lab","qos":"0","retain":"false","broker":"8a657b0f.4ac5b8","x":1432.8393783569336,"y":907.8035974502563,"wires":[]},{"id":"67ac39c4.762158","type":"mqtt out","z":"a33a17a7.ed5f98","name":"MQTT to Azure bn-msd-prod","topic":"devices/lab/messages/events/$.ct=application%2Fjson&$.ce=utf-8","qos":"1","retain":"false","broker":"1bdc5dad.cfa7f2","x":1473.9287338256836,"y":362.942907333374,"wires":[]},{"id":"6086baa.d650d44","type":"ui_button","z":"2a8e91d.ab3cd6e","name":"","group":"8e6a4d2d.731d3","order":6,"width":0,"height":0,"label":"Enable fast charge","color":"","bgcolor":"","icon":"","payload":"14","payloadType":"num","topic":"","x":1028.3333702087402,"y":619.2856616973877,"wires":[["88c85619.403ff8"]]},{"id":"84e20bcb.07f0d8","type":"ui_button","z":"2a8e91d.ab3cd6e","name":"","group":"8e6a4d2d.731d3","order":7,"width":0,"height":0,"label":"Disable fast charge","color":"","bgcolor":"","icon":"","payload":"13","payloadType":"num","topic":"","x":1028.3332023620605,"y":671.9047224521637,"wires":[["88c85619.403ff8"]]},{"id":"a21fa842.48f338","type":"ui_button","z":"2a8e91d.ab3cd6e","name":"","group":"8e6a4d2d.731d3","order":8,"width":0,"height":0,"label":"DAC trigg ref","color":"","bgcolor":"","icon":"","payload":"15","payloadType":"num","topic":"","x":1044.7617530822754,"y":726.1904296875,"wires":[["88c85619.403ff8"]]},{"id":"69a1529f.50232c","type":"ui_button","z":"2a8e91d.ab3cd6e","name":"","group":"8e6a4d2d.731d3","order":9,"width":0,"height":0,"label":"VDD trigg ref","color":"","bgcolor":"","icon":"","payload":"16","payloadType":"num","topic":"","x":1053.0950889587402,"y":784.5237655639648,"wires":[["88c85619.403ff8"]]},{"id":"bb4758e2.384898","type":"function","z":"a33a17a7.ed5f98","name":"Set Advertisement","func":"\nmsg.payload = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x04, 0x00, 0x00, 0x32, 0x00]);//subscribe response - send gettime\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":445,"y":446,"wires":[["6ea342a1.1b390c"]]},{"id":"44ee652c.cb1dac","type":"inject","z":"a33a17a7.ed5f98","name":"Advertisement","topic":"","payload":"","payloadType":"date","repeat":"10800","crontab":"","once":false,"x":220.9999885559082,"y":444.99999713897705,"wires":[["bb4758e2.384898"]]},{"id":"5ce94d47.233544","type":"link out","z":"a33a17a7.ed5f98","name":"event out","links":["28baca8.b1bdf36","a6316b5.cf35d98","c294e724.0756b8"],"x":1382.8572063446045,"y":517.14284324646,"wires":[]},{"id":"945d5b19.20a168","type":"link out","z":"a33a17a7.ed5f98","name":"raw out","links":["9aebca11.fb00f8"],"x":1372.857084274292,"y":711.4285945892334,"wires":[]},{"id":"5edc612d.7149b","type":"ui_button","z":"2a8e91d.ab3cd6e","name":"","group":"8e6a4d2d.731d3","order":10,"width":0,"height":0,"label":"Get raw data","color":"","bgcolor":"","icon":"","payload":"08","payloadType":"str","topic":"","x":1045.0595169067383,"y":850.4166641235352,"wires":[["737a2384.91f95c"]]},{"id":"33df67f3.8891b8","type":"ui_text_input","z":"2a8e91d.ab3cd6e","name":"","label":"Flash_ID","group":"8e6a4d2d.731d3","order":13,"width":0,"height":0,"passthru":false,"mode":"number","delay":300,"topic":"topic","x":1048.2738876342773,"y":921.3095369338989,"wires":[["24a06106.2b4bde"]]},{"id":"95d8a3f2.214ea","type":"debug","z":"2a8e91d.ab3cd6e","name":"","active":false,"console":false,"complete":"false","x":1604.1072273254395,"y":881.1310091018677,"wires":[]},{"id":"24a06106.2b4bde","type":"function","z":"2a8e91d.ab3cd6e","name":"Set get_raw data string","func":"\nmsg.payload.flashID = parseInt(msg.payload)\n\nhex = \"000\" + parseInt(msg.payload).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA_payload = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\nvar msg_buff = new Buffer(IMSG_SENDDATA_payload,'hex');\n\nflow.set('IMSG_SENDDATA',IMSG_SENDDATA_payload);\n\nvar msg2 = {payload: {flashID:flashID,\n                      flashID_hex:hex.substr(hex.length-4,hex.length),\n                      flashID_lsb:lsb.substr(lsb.length-2,lsb.length),\n                      flashID_msb:msb.substr(msb.length-2,msb.length),\n                      IMSG_SENDDATA:IMSG_SENDDATA_payload\n\n}\n\n}  \n\nreturn [msg2];","outputs":"1","noerr":0,"x":1300.7738037109375,"y":920.8928165435791,"wires":[["95d8a3f2.214ea"]]},{"id":"737a2384.91f95c","type":"function","z":"2a8e91d.ab3cd6e","name":"Get raw data payload","func":"\nvar mac_address = flow.get('mac_address') || 0;\nvar IMSG_SENDDATA = flow.get('IMSG_SENDDATA') || 0;\n\n\nvar mac_1  = parseInt(mac_address.payload.toString().substr(0,2),16);\nvar mac_2  = parseInt(mac_address.payload.toString().substr(2,2),16);\nvar mac_3  = parseInt(mac_address.payload.toString().substr(4,2),16);\nvar mac_4  = parseInt(mac_address.payload.toString().substr(6,2),16);\nvar mac_5  = parseInt(mac_address.payload.toString().substr(8,2),16);\nvar mac_6  = parseInt(mac_address.payload.toString().substr(10,2),16);\nvar mac_7  = parseInt(mac_address.payload.toString().substr(12,2),16);\nvar mac_8  = parseInt(mac_address.payload.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1293.3929710388184,"y":849.702465057373,"wires":[["95d8a3f2.214ea","2797d770.271ec8"]]},{"id":"316f7ece.38bff2","type":"debug","z":"2a8e91d.ab3cd6e","name":"","active":false,"console":false,"complete":"false","x":680,"y":140,"wires":[]},{"id":"447b2e0d.98295","type":"ui_text","z":"2a8e91d.ab3cd6e","group":"8203fe43.ebce4","order":2,"width":0,"height":0,"name":"","label":"Num Events","format":"{{msg.payload}}","layout":"row-spread","x":688.5714874267578,"y":259.99994468688965,"wires":[]},{"id":"1474dcc3.acf853","type":"function","z":"2a8e91d.ab3cd6e","name":"Update Event array","func":"var msg_event = msg;\n\n\nvar event_array = flow.get('event_array2') || []\n\n\nif (Object.keys(event_array).length === 0){\n    \n    var mac_list = flow.get('sensorlist_mac') || [];\n    var km_list = flow.get('sensorlist_km') || [];\n    \n    var num_motes = mac_list.length;\n    var temp=[];\n    var string='';\n    \n    for (var i = 0; i < num_motes; i++){\n        \n\n           event_array[i] = {mac_adress: mac_list[i],\n                              flash_ID: temp,\n                              trigg_time_utc: temp,\n                              calc_time_utc: temp,\n                              G1_std: temp,\n                              G2_std: temp,\n                              G3_std: temp,\n                              G4_std: temp,\n                              G1_mean: temp,\n                              G2_mean: temp,\n                              G3_mean: temp,\n                              G4_mean: temp,\n                              prev_sps: temp}\n            \n            }                     \n\n    } // true\n\n\n\nvar new_mac = true;\n\nfor (i = 0; i < event_array.length; i++){\n    \n        if (msg_event.payload.mac_adress == event_array[i].mac_adress){\n            new_mac = false;\n            break;\n            \n        }\n\n\n}\n\n if (new_mac === true){\n     \n     event_array[i] = {mac_adress: msg_event.payload.mac_adress,\n                              flash_ID: temp,\n                                  trigg_time_utc: temp,\n                              calc_time_utc: temp,\n                              G1_std: temp,\n                              G2_std: temp,\n                              G3_std: temp,\n                              G4_std: temp,\n                              G1_mean: temp,\n                              G2_mean: temp,\n                              G3_mean: temp,\n                              G4_mean: temp,\n                              prev_sps: temp}\n                                \n\n   } // true\n     \n// if (msg_aux.payload.packet_type == \"event\" || \"event_jbv\"){\n     \n     \n     \n\n             event_array[i] = {mac_adress: msg_event.payload.mac_adress,\n                              flash_ID: msg_event.payload.flash_ID,\n                                 trigg_time_utc: new Date(msg_event.payload.trigg_timestamp),\n                              calc_time_utc: new Date(msg_event.payload.calc_timestamp),\n                              G1_std: msg_event.payload.G1_std,\n                              G2_std: msg_event.payload.G2_std,\n                              G3_std: msg_event.payload.G3_std,\n                              G4_std: msg_event.payload.G4_std,\n                              G1_mean: msg_event.payload.G1_mean,\n                              G2_mean: msg_event.payload.G2_mean,\n                              G3_mean: msg_event.payload.G3_mean,\n                              G4_mean: msg_event.payload.G4_mean,\n                              prev_sps: msg_event.payload.prev_sps}\n            \n //           };\n\n\n\nflow.set('event_array2', event_array);\n\n\nvar event_array_sorted = event_array.sort(function compare(a,b){\n    if(a.mac_adress < b.mac_adress){return -1}\n    if(a.mac_adress > b.mac_adress){return 1}\n});\n\nvar string2 = {payload: event_array_sorted};\nvar length = {payload: event_array.length}\n\n\nreturn [string2,length];","outputs":2,"noerr":0,"x":352.85721588134766,"y":191.42855262756348,"wires":[["316f7ece.38bff2","568ec291.db810c"],["447b2e0d.98295"]]},{"id":"a6316b5.cf35d98","type":"link in","z":"2a8e91d.ab3cd6e","name":"event in","links":["5ce94d47.233544"],"x":181.42866325378418,"y":191.42854499816895,"wires":[["1474dcc3.acf853"]]},{"id":"568ec291.db810c","type":"ui_text","z":"2a8e91d.ab3cd6e","group":"da7f4ba3.80c8d8","order":0,"width":"45","height":"10","name":"","label":"","format":"{{msg.payload}}","layout":"row-left","x":671.4286308288574,"y":192.85712432861328,"wires":[]},{"id":"4b36b830.6b4e18","type":"ui_text","z":"2a8e91d.ab3cd6e","group":"8203fe43.ebce4","order":3,"width":0,"height":0,"name":"","label":"Num Raw Data","format":"{{msg.payload}}","layout":"row-spread","x":701.4286308288574,"y":478.5713610649109,"wires":[]},{"id":"6ab0baee.a6ec74","type":"function","z":"2a8e91d.ab3cd6e","name":"Update Raw array","func":"var msg_raw = msg;\n\nvar raw_array = flow.get('raw_array3') || []\n\n\nfor (i = 0; i < raw_array.length; i++){\n    \n        if (msg_raw.payload.mac_adress == raw_array[i].mac_adress && msg_raw.payload.flash_ID == raw_array[i].flash_ID){\n\n            \n            break;\n            \n        }\n     \n\n     \n}\n\n\n                raw_array[i] = {mac_adress: msg_raw.payload.mac_adress,\n                                flash_ID: msg_raw.payload.flash_ID,\n                                channels: msg_raw.payload.channels,\n                                scan_start: msg_raw.payload.scan_start,\n                                scan_stop: msg_raw.payload.scan_stop,\n                                samples: msg_raw.payload.samples,\n                                packet_sent_utc: new Date(msg_raw.payload.packet_sent)\n                \n                \n            };\n\n\n\nflow.set('raw_array3', raw_array);\n\n\nvar raw_array_sorted = raw_array.sort(function compare(a,b){\n    if(a.packet_sent_utc < b.packet_sent_utc){return 1}\n    if(a.packet_sent_utc > b.packet_sent_utc){return -1}\n});\n\nvar string = {payload: raw_array_sorted};\nvar length = {payload: raw_array.length}\n\n\nreturn [string,length];","outputs":2,"noerr":0,"x":390.0001220703125,"y":402.85709953308105,"wires":[["f891cfb2.37298","78af0836.31ca08"],["4b36b830.6b4e18"]]},{"id":"f891cfb2.37298","type":"debug","z":"2a8e91d.ab3cd6e","name":"","active":false,"console":false,"complete":"false","x":685.7143936157227,"y":345.7142734527588,"wires":[]},{"id":"9aebca11.fb00f8","type":"link in","z":"2a8e91d.ab3cd6e","name":"raw in","links":["945d5b19.20a168"],"x":165.0001220703125,"y":402.85709953308105,"wires":[["6ab0baee.a6ec74"]]},{"id":"78af0836.31ca08","type":"ui_text","z":"2a8e91d.ab3cd6e","group":"912a8793.1b1268","order":0,"width":"40","height":"10","name":"","label":"","format":"{{msg.payload}}","layout":"row-left","x":668.5715217590332,"y":411.42836689949036,"wires":[]},{"id":"93d31ee3.9b88d","type":"ui_text","z":"2a8e91d.ab3cd6e","group":"8203fe43.ebce4","order":1,"width":0,"height":0,"name":"","label":"Num AUX","format":"{{msg.payload}}","layout":"row-spread","x":651.4286499023438,"y":681.4285163879395,"wires":[]},{"id":"900fc2f7.5733b","type":"function","z":"2a8e91d.ab3cd6e","name":"Update AUX array","func":"var msg_aux = msg;\n\nvar aux_array = flow.get('aux_array2') || []\n\n\nif (Object.keys(aux_array).length === 0){\n    \n    var mac_list = flow.get('sensorlist_mac') || [];\n    var km_list = flow.get('sensorlist_km') || [];\n    \n    var num_motes = mac_list.length;\n    var temp=[];\n    var string='';\n    \n    for (var i = 0; i < num_motes; i++){\n        \n        aux_array[i] = {mac_adress: mac_list[i],\n                                battery: temp,\n                                temperature: temp,\n                                solcelle: temp,\n                                aux: temp, \n                                hw: temp,\n                                sw: temp,\n                                charge_enabled: temp,\n                                acmp_vddref: temp,\n                                packet_sent_utc: temp}\n                                \n\n    } // true\n}\n\n\nvar new_mac = true;\n\nfor (i = 0; i < aux_array.length; i++){\n    \n        if (msg_aux.payload.mac_adress == aux_array[i].mac_adress){\n            new_mac = false;\n            break;\n            \n        }\n\n\n}\n\n if (new_mac === true){\n     \n     aux_array[i] = {mac_adress: msg_aux.payload.mac_adress,\n                                battery: temp,\n                                temperature: temp,\n                                solcelle: temp,\n                                aux: temp, \n                                hw: temp,\n                                sw: temp,\n                                charge_enabled: temp,\n                                acmp_vddref: temp,\n                                packet_sent_utc: temp}\n                                \n\n    } // true\n     \n if (msg_aux.payload.packet_type == \"aux_data\"){\n     \n var solcelle = msg_aux.payload.aux[0]*7.5/65535;\n\n                aux_array[i] = {mac_adress: aux_array[i].mac_adress,\n                                battery: msg_aux.payload.battery,\n                                temperature: msg_aux.payload.temperature,\n                                solcelle: solcelle.toFixed(3),\n                                aux: msg_aux.payload.aux, \n                                hw: msg_aux.payload.config.hw,\n                                sw: msg_aux.payload.config.sw,\n                                charge_enabled: msg_aux.payload.state.charge_enabled,\n                                acmp_vddref: msg_aux.payload.state.acmp_vddref,\n                                packet_sent_utc: new Date(msg_aux.payload.packet_sent)\n                \n               };\n}\n\n\nflow.set('aux_array2', aux_array);\n\n\nvar aux_array_sorted = aux_array.sort(function compare(a,b){\n    if(a.mac_adress < b.mac_adress){return -1}\n    if(a.mac_adress > b.mac_adress){return 1}\n});\n\nvar string2 = {payload: aux_array_sorted};\nvar length = {payload: aux_array.length}\n\n\nreturn [string2,length];","outputs":2,"noerr":0,"x":401.42864990234375,"y":621.4285163879395,"wires":[["17221e2a.e665c2","3b701095.20478"],["93d31ee3.9b88d"]]},{"id":"17221e2a.e665c2","type":"debug","z":"2a8e91d.ab3cd6e","name":"","active":false,"console":false,"complete":"false","x":661.4286499023438,"y":561.4285163879395,"wires":[]},{"id":"667fedc3.3e6524","type":"link in","z":"2a8e91d.ab3cd6e","name":"aux in","links":["b68ef3a9.6e4"],"x":215.0000762939453,"y":619.9999008178711,"wires":[["900fc2f7.5733b"]]},{"id":"3b701095.20478","type":"ui_text","z":"2a8e91d.ab3cd6e","group":"300e6cf7.86fc24","order":0,"width":"35","height":"10","name":"","label":"","format":"{{msg.payload}}","layout":"row-left","x":667.1429530552455,"y":619.9999623979841,"wires":[]},{"id":"e198cf79.4ca07","type":"ui_text","z":"2a8e91d.ab3cd6e","group":"8203fe43.ebce4","order":4,"width":0,"height":0,"name":"","label":"Num Prosessing","format":"{{msg.payload}}","layout":"row-spread","x":732.8572769165039,"y":927.1428027153015,"wires":[]},{"id":"e3cc8472.64a118","type":"function","z":"2a8e91d.ab3cd6e","name":"Update Prosessing array","func":"var msg_prosessing = msg;\n\nvar prosessing_array = flow.get('prosessing_array3') || []\n\nif (Object.keys(prosessing_array).length === 0){\n    \n    var mac_list = flow.get('sensorlist_mac') || [];\n    var km_list = flow.get('sensorlist_km') || [];\n    \n    var num_motes = mac_list.length;\n    var temp=[];\n    var string='';\n    \n    for (var i = 0; i < num_motes; i++){\n        \n\n           prosessing_array[i] = {mac_adress: mac_list[i],\n                                Min_samples: temp,\n                                Sample_cont: temp,\n                                Max_samples: temp,\n                                G1_std_lim: temp,\n                                G2_std_lim: temp,\n                                G3_std_lim: temp,\n                                G4_std_lim: temp,\n                                G1_cont_lim: temp,\n                                G2_cont_lim: temp,\n                                G3_cont_lim: temp,\n                                G4_cont_lim: temp,\n            \n                                Trig_level: temp,\n                                //Start_delay: temp,\n                                //Trig_ch0: temp,\n                                //Trig_ch1: temp,\n                                Amp_trig: temp,\n                                Amp_logging: temp,\n\n                                packet_sent_utc: temp\n           }\n            \n            }                     \n\n   \n}\n\n\n\nfor (i = 0; i < prosessing_array.length; i++){\n    \n        if (msg_prosessing.payload.mac_adress == prosessing_array[i].mac_adress){\n\n            \n            break;\n            \n        }\n\n     \n}\n\n\n                prosessing_array[i] = {mac_adress: msg_prosessing.payload.mac_adress,\n                                        \n                                Min_samples: msg_prosessing.payload.Min_samples,\n                                Sample_cont: msg_prosessing.payload.Sample_cont,\n                                Max_samples: msg_prosessing.payload.Max_samples,\n                                G1_std_lim: msg_prosessing.payload.G1_std_lim,\n                                G2_std_lim: msg_prosessing.payload.G2_std_lim,\n                                G3_std_lim: msg_prosessing.payload.G3_std_lim,\n                                G4_std_lim: msg_prosessing.payload.G4_std_lim,\n                                G1_cont_lim: msg_prosessing.payload.G1_cont_lim,\n                                G2_cont_lim: msg_prosessing.payload.G2_cont_lim,\n                                G3_cont_lim: msg_prosessing.payload.G3_cont_lim,\n                                G4_cont_lim: msg_prosessing.payload.G4_cont_lim,\n            \n                                Trig_level: msg_prosessing.payload.Trig_level,\n                                //Start_delay: msg_prosessing.payload.Start_delay,\n                                //Trig_ch0: msg_prosessing.payload.Trig_ch0,\n                                //Trig_ch1: msg_prosessing.payload.Trig_ch1,\n                                Amp_trig: msg_prosessing.payload.Amp_trig,\n                                Amp_logging: msg_prosessing.payload.Amp_logging,\n\n                                packet_sent_utc: new Date(msg_prosessing.payload.packet_sent)\n                \n                \n            };\n\n\n\n\nflow.set('prosessing_array3', prosessing_array);\n\n\nvar prosessing_array_sorted = prosessing_array.sort(function compare(a,b){\n    if(a.mac_adress < b.mac_adress){return -1}\n    if(a.mac_adress > b.mac_adress){return 1}\n});\n\nvar string2 = {payload: prosessing_array_sorted};\nvar length = {payload: prosessing_array.length}\n\n\nreturn [string2,length];","outputs":2,"noerr":0,"x":411.42871856689453,"y":859.9999752044678,"wires":[["4554f68e.bc2428","4e48a62c.fb7b18"],["e198cf79.4ca07"]]},{"id":"4554f68e.bc2428","type":"debug","z":"2a8e91d.ab3cd6e","name":"","active":false,"console":false,"complete":"false","x":731.4287185668945,"y":779.9999752044678,"wires":[]},{"id":"1d389d78.244103","type":"link in","z":"2a8e91d.ab3cd6e","name":"param in","links":["33088ba6.65c9f4"],"x":203.57157707214355,"y":859.9999799728394,"wires":[["e3cc8472.64a118"]]},{"id":"4e48a62c.fb7b18","type":"ui_text","z":"2a8e91d.ab3cd6e","group":"421c93c7.2e33dc","order":0,"width":"55","height":"10","name":"","label":"","format":"{{msg.payload}}","layout":"row-left","x":732.8572551182338,"y":847.1427974700925,"wires":[]},{"id":"c294e724.0756b8","type":"link in","z":"4cdbd1db.46238","name":"event in","links":["5ce94d47.233544"],"x":243.7500238418579,"y":794.1666526794434,"wires":[["693bdbcc.667d54","fd50dc79.33774","14669839.28b898","ac48b022.adf8e","5a6e95d3.6f537c"]]},{"id":"693bdbcc.667d54","type":"switch","z":"4cdbd1db.46238","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a5e7","vt":"str"}],"checkall":"true","outputs":1,"x":497.0833435058594,"y":193.33334827423096,"wires":[["9eb2f26a.9c83a"]]},{"id":"9eb2f26a.9c83a","type":"buffer-array","z":"4cdbd1db.46238","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":747.0833435058594,"y":193.33334827423096,"wires":[["44e71b67.97ab24","4c02d9a.9635628"]]},{"id":"44e71b67.97ab24","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":false,"complete":"false","x":993.75,"y":270.4166603088379,"wires":[]},{"id":"a1cc38f7.91ad48","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":false,"complete":"false","x":1403.3334045410156,"y":86.72620964050293,"wires":[]},{"id":"88cd68dc.43a678","type":"rbe","z":"4cdbd1db.46238","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1202.7976379394531,"y":183.3333444595337,"wires":[["b5a3cf39.8f739","a1cc38f7.91ad48","d5e573bc.f6d73"]]},{"id":"b5a3cf39.8f739","type":"switch","z":"4cdbd1db.46238","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1392.976417541504,"y":132.08332633972168,"wires":[["4568acf0.c6c264"]]},{"id":"4568acf0.c6c264","type":"sms out","z":"4cdbd1db.46238","name":"","destinations":"","body":"Skred i Sandneslia 2-1","x":1546.0121459960938,"y":132.08334922790527,"wires":[]},{"id":"4d10bf7c.6a38c","type":"inject","z":"4cdbd1db.46238","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1018.3333587646484,"y":120.83335590362549,"wires":[["88cd68dc.43a678"]]},{"id":"14669839.28b898","type":"switch","z":"4cdbd1db.46238","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a854","vt":"str"}],"checkall":"true","outputs":1,"x":505.83333587646484,"y":498.6667079925537,"wires":[["3b8f0cc6.b67f64"]]},{"id":"3b8f0cc6.b67f64","type":"buffer-array","z":"4cdbd1db.46238","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":755.8333282470703,"y":497.4166965484619,"wires":[["8bc07a7f.ecc458","5010243c.87166c"]]},{"id":"8bc07a7f.ecc458","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":false,"complete":"false","x":1006.0713729858398,"y":570.6905069351196,"wires":[]},{"id":"3540dec7.bf68d2","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":false,"complete":"false","x":1417.7976188659668,"y":397.9524154663086,"wires":[]},{"id":"65c0cbb7.1a9fb4","type":"rbe","z":"4cdbd1db.46238","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1215.8333282470703,"y":497.4166965484619,"wires":[["11a54a83.394a05","3540dec7.bf68d2","7700b768.aed888"]]},{"id":"11a54a83.394a05","type":"switch","z":"4cdbd1db.46238","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1406.0118865966797,"y":449.02384185791016,"wires":[["e60d1524.eb4f28"]]},{"id":"e60d1524.eb4f28","type":"sms out","z":"4cdbd1db.46238","name":"","destinations":"","body":"Skred i Sandneslia 3-1","x":1564.761875152588,"y":449.0238456726074,"wires":[]},{"id":"27c5cda1.b40e02","type":"inject","z":"4cdbd1db.46238","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1027.0833435058594,"y":424.91670417785645,"wires":[["65c0cbb7.1a9fb4"]]},{"id":"fd50dc79.33774","type":"switch","z":"4cdbd1db.46238","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070aa81","vt":"str"}],"checkall":"true","outputs":1,"x":506.0833206176758,"y":795.6667137145996,"wires":[["368a81d9.09705e"]]},{"id":"368a81d9.09705e","type":"buffer-array","z":"4cdbd1db.46238","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":756.0833206176758,"y":795.6667137145996,"wires":[["72e3a173.004ec","283cab8e.875504"]]},{"id":"72e3a173.004ec","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":false,"complete":"false","x":1011.0833282470703,"y":874.4167861938477,"wires":[]},{"id":"7f26b277.203b2c","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":false,"complete":"false","x":1420.9048309326172,"y":684.7738609313965,"wires":[]},{"id":"f541c.94746be48","type":"rbe","z":"4cdbd1db.46238","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1216.0833206176758,"y":795.6667137145996,"wires":[["75937c15.ffb854","7f26b277.203b2c","6cd76e33.2a226"]]},{"id":"75937c15.ffb854","type":"switch","z":"4cdbd1db.46238","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1414.833366394043,"y":742.9881782531738,"wires":[["efe08ded.59465"]]},{"id":"6cd76e33.2a226","type":"dout0 out","z":"4cdbd1db.46238","name":"","x":1411.5833854675293,"y":793.66676902771,"wires":[]},{"id":"efe08ded.59465","type":"sms out","z":"4cdbd1db.46238","name":"","destinations":"","body":"Skred i Sandneslia 3-2","x":1573.5833549499512,"y":742.9881820678711,"wires":[]},{"id":"528543a4.133e6c","type":"inject","z":"4cdbd1db.46238","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1027.3333358764648,"y":723.1667213439941,"wires":[["f541c.94746be48"]]},{"id":"ac48b022.adf8e","type":"switch","z":"4cdbd1db.46238","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d000070a116","vt":"str"}],"checkall":"true","outputs":1,"x":517.9166641235352,"y":1102.5001039505005,"wires":[["8ca2a8e5.51a5a8"]]},{"id":"8ca2a8e5.51a5a8","type":"buffer-array","z":"4cdbd1db.46238","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":767.9166641235352,"y":1102.5001039505005,"wires":[["82fbfd44.a0efa","f9f853e6.5ed6"]]},{"id":"82fbfd44.a0efa","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":false,"complete":"false","x":1016.2500076293945,"y":1181.2501516342163,"wires":[]},{"id":"ef7057c2.629a78","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":false,"complete":"false","x":1425.5952453613281,"y":988.7501134872437,"wires":[]},{"id":"7cfff823.6bc8b8","type":"rbe","z":"4cdbd1db.46238","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1227.9166641235352,"y":1102.5001039505005,"wires":[["9947f615.f6d858","ef7057c2.629a78","e9b1f59.ee7aa08"]]},{"id":"9947f615.f6d858","type":"switch","z":"4cdbd1db.46238","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1419.5237617492676,"y":1048.3930292129517,"wires":[["7b32053d.99c1dc"]]},{"id":"7b32053d.99c1dc","type":"sms out","z":"4cdbd1db.46238","name":"","destinations":"","body":"Skred i Sandneslia 3-3","x":1578.2737503051758,"y":1048.393033027649,"wires":[]},{"id":"c8382854.d31c88","type":"inject","z":"4cdbd1db.46238","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1039.1666793823242,"y":1030.000111579895,"wires":[["7cfff823.6bc8b8"]]},{"id":"5a6e95d3.6f537c","type":"switch","z":"4cdbd1db.46238","name":"Sort by MAC","property":"payload.mac_adress","propertyType":"msg","rules":[{"t":"eq","v":"00170d0000713ceb","vt":"str"}],"checkall":"true","outputs":1,"x":508.91668701171875,"y":1399.416746377945,"wires":[["4efe03ba.02effc"]]},{"id":"4efe03ba.02effc","type":"buffer-array","z":"4cdbd1db.46238","name":"3 last event packets","bufferLen":"3","startWhenFilled":true,"x":758.9166870117188,"y":1399.416746377945,"wires":[["3d4f8654.80e53a","b32e438f.71435"]]},{"id":"3d4f8654.80e53a","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":false,"complete":"false","x":1013.9166946411133,"y":1478.1667692661285,"wires":[]},{"id":"14e56ecf.94c071","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":false,"complete":"false","x":1419.4524230957031,"y":1295.6667776107788,"wires":[]},{"id":"1fb8a51.a0f0a5b","type":"rbe","z":"4cdbd1db.46238","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1218.9166870117188,"y":1399.416746377945,"wires":[["efdd3ff5.97c68","14e56ecf.94c071","44f2efc.a524d1"]]},{"id":"efdd3ff5.97c68","type":"switch","z":"4cdbd1db.46238","name":"","property":"payload","propertyType":"msg","rules":[{"t":"true"}],"checkall":"true","outputs":1,"x":1409.0952796936035,"y":1346.738221168518,"wires":[["1d7461e7.87d26e"]]},{"id":"1d7461e7.87d26e","type":"sms out","z":"4cdbd1db.46238","name":"","destinations":"","body":"Skred i Sandneslia 4-1","x":1567.8452682495117,"y":1346.7382249832153,"wires":[]},{"id":"16f749c9.a5e5c6","type":"inject","z":"4cdbd1db.46238","name":"Test alarm","topic":"","payload":"true","payloadType":"bool","repeat":"","crontab":"","once":false,"x":1030.1667022705078,"y":1326.9167540073395,"wires":[["1fb8a51.a0f0a5b"]]},{"id":"d5e573bc.f6d73","type":"dout0 out","z":"4cdbd1db.46238","name":"","x":1390.0000076293945,"y":181.4285659790039,"wires":[]},{"id":"7700b768.aed888","type":"dout0 out","z":"4cdbd1db.46238","name":"","x":1405.7142448425293,"y":495.714316368103,"wires":[]},{"id":"e9b1f59.ee7aa08","type":"dout0 out","z":"4cdbd1db.46238","name":"","x":1418.5715103149414,"y":1101.4286050796509,"wires":[]},{"id":"44f2efc.a524d1","type":"dout0 out","z":"4cdbd1db.46238","name":"","x":1411.4286003112793,"y":1398.5714225769043,"wires":[]},{"id":"f9f853e6.5ed6","type":"function","z":"4cdbd1db.46238","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n   \n    is_avalanche = true\n    \n    var alarm = {payload: is_avalanche};  \n    \n    var ID = {payload: {flash_ID:msg.payload[1].flash_ID,\n                        mac_adress:msg.payload[1].mac_adress}};  \n    \n    return [alarm, msg2, ID];\n\n    \n} else {\n    \n    is_avalanche = false\n    var alarm = {payload: is_avalanche};  \n    \n    return [alarm, msg2, null];\n    \n}\n\n\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":"3","noerr":0,"x":1038.5714111328125,"y":1111.4285888671875,"wires":[["7cfff823.6bc8b8"],[],["ab93eaac.9e3eb8"]]},{"id":"ab93eaac.9e3eb8","type":"rbe","z":"4cdbd1db.46238","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1235.7737617492676,"y":1159.5238103866577,"wires":[["48a93636.3ca388"]]},{"id":"48a93636.3ca388","type":"function","z":"4cdbd1db.46238","name":"Get raw data","func":"\nhex = \"000\" + parseInt(msg.payload.flash_ID).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload.flash_ID) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload.flash_ID)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\n\nvar mac_1  = parseInt(msg.payload.mac_adress.toString().substr(0,2),16);\nvar mac_2  = parseInt(msg.payload.mac_adress.toString().substr(2,2),16);\nvar mac_3  = parseInt(msg.payload.mac_adress.toString().substr(4,2),16);\nvar mac_4  = parseInt(msg.payload.mac_adress.toString().substr(6,2),16);\nvar mac_5  = parseInt(msg.payload.mac_adress.toString().substr(8,2),16);\nvar mac_6  = parseInt(msg.payload.mac_adress.toString().substr(10,2),16);\nvar mac_7  = parseInt(msg.payload.mac_adress.toString().substr(12,2),16);\nvar mac_8  = parseInt(msg.payload.mac_adress.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1426.9643096923828,"y":1161.1906080245972,"wires":[["474e4149.a28a7","ab739549.7e5808"]]},{"id":"474e4149.a28a7","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":"false","complete":"false","x":1618.6307220458984,"y":1215.0000495910645,"wires":[]},{"id":"ab739549.7e5808","type":"delay","z":"4cdbd1db.46238","name":"","pauseType":"delay","timeout":"8","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1613.333236694336,"y":1162.6190242767334,"wires":[["dfcfd468.051cc8"]]},{"id":"dfcfd468.051cc8","type":"link out","z":"4cdbd1db.46238","name":"com out","links":["a33b4702.6796f8"],"x":1748.3332405090332,"y":1163.3333797454834,"wires":[]},{"id":"b32e438f.71435","type":"function","z":"4cdbd1db.46238","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n   \n    is_avalanche = true\n    \n    var alarm = {payload: is_avalanche};  \n    \n    var ID = {payload: {flash_ID:msg.payload[1].flash_ID,\n                        mac_adress:msg.payload[1].mac_adress}};  \n    \n    return [alarm, msg2, ID];\n\n    \n} else {\n    \n    is_avalanche = false\n    var alarm = {payload: is_avalanche};  \n    \n    return [alarm, msg2, null];\n    \n}\n\n\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":"3","noerr":0,"x":1030,"y":1411.6666259765625,"wires":[["1fb8a51.a0f0a5b"],[],["5803ca6a.6cd3e4"]]},{"id":"5803ca6a.6cd3e4","type":"rbe","z":"4cdbd1db.46238","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1227.202350616455,"y":1459.7618474960327,"wires":[["37ee4fba.4f796"]]},{"id":"37ee4fba.4f796","type":"function","z":"4cdbd1db.46238","name":"Get raw data","func":"\nhex = \"000\" + parseInt(msg.payload.flash_ID).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload.flash_ID) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload.flash_ID)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\n\nvar mac_1  = parseInt(msg.payload.mac_adress.toString().substr(0,2),16);\nvar mac_2  = parseInt(msg.payload.mac_adress.toString().substr(2,2),16);\nvar mac_3  = parseInt(msg.payload.mac_adress.toString().substr(4,2),16);\nvar mac_4  = parseInt(msg.payload.mac_adress.toString().substr(6,2),16);\nvar mac_5  = parseInt(msg.payload.mac_adress.toString().substr(8,2),16);\nvar mac_6  = parseInt(msg.payload.mac_adress.toString().substr(10,2),16);\nvar mac_7  = parseInt(msg.payload.mac_adress.toString().substr(12,2),16);\nvar mac_8  = parseInt(msg.payload.mac_adress.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1418.3928985595703,"y":1461.4286451339722,"wires":[["23582a05.7402f6","eca0a906.ad95a8"]]},{"id":"eca0a906.ad95a8","type":"delay","z":"4cdbd1db.46238","name":"","pauseType":"delay","timeout":"9","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1604.7618255615234,"y":1462.8570613861084,"wires":[["cdb33e2e.2db6d"]]},{"id":"cdb33e2e.2db6d","type":"link out","z":"4cdbd1db.46238","name":"com out","links":["a33b4702.6796f8"],"x":1739.7618293762207,"y":1463.5714168548584,"wires":[]},{"id":"23582a05.7402f6","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":"false","complete":"false","x":1614.059326171875,"y":1523.238037109375,"wires":[]},{"id":"283cab8e.875504","type":"function","z":"4cdbd1db.46238","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n   \n    is_avalanche = true\n    \n    var alarm = {payload: is_avalanche};  \n    \n    var ID = {payload: {flash_ID:msg.payload[1].flash_ID,\n                        mac_adress:msg.payload[1].mac_adress}};  \n    \n    return [alarm, msg2, ID];\n\n    \n} else {\n    \n    is_avalanche = false\n    var alarm = {payload: is_avalanche};  \n    \n    return [alarm, msg2, null];\n    \n}\n\n\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":"3","noerr":0,"x":1021.6667327880859,"y":809.9999380111694,"wires":[["f541c.94746be48"],[],["23c53852.1fb388"]]},{"id":"23c53852.1fb388","type":"rbe","z":"4cdbd1db.46238","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1218.869083404541,"y":858.0951595306396,"wires":[["dc99cfae.e4193"]]},{"id":"dc99cfae.e4193","type":"function","z":"4cdbd1db.46238","name":"Get raw data","func":"\nhex = \"000\" + parseInt(msg.payload.flash_ID).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload.flash_ID) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload.flash_ID)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\n\nvar mac_1  = parseInt(msg.payload.mac_adress.toString().substr(0,2),16);\nvar mac_2  = parseInt(msg.payload.mac_adress.toString().substr(2,2),16);\nvar mac_3  = parseInt(msg.payload.mac_adress.toString().substr(4,2),16);\nvar mac_4  = parseInt(msg.payload.mac_adress.toString().substr(6,2),16);\nvar mac_5  = parseInt(msg.payload.mac_adress.toString().substr(8,2),16);\nvar mac_6  = parseInt(msg.payload.mac_adress.toString().substr(10,2),16);\nvar mac_7  = parseInt(msg.payload.mac_adress.toString().substr(12,2),16);\nvar mac_8  = parseInt(msg.payload.mac_adress.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1410.0596313476562,"y":859.7619571685791,"wires":[["182bb2a9.1dc8dd","19e14dce.61aa02"]]},{"id":"19e14dce.61aa02","type":"delay","z":"4cdbd1db.46238","name":"","pauseType":"delay","timeout":"7","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1596.4285583496094,"y":861.1903734207153,"wires":[["55d02321.fbb7cc"]]},{"id":"55d02321.fbb7cc","type":"link out","z":"4cdbd1db.46238","name":"com out","links":["a33b4702.6796f8"],"x":1731.4285621643066,"y":861.9047288894653,"wires":[]},{"id":"182bb2a9.1dc8dd","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":"false","complete":"false","x":1601.7260437011719,"y":913.5713987350464,"wires":[]},{"id":"5010243c.87166c","type":"function","z":"4cdbd1db.46238","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n   \n    is_avalanche = true\n    \n    var alarm = {payload: is_avalanche};  \n    \n    var ID = {payload: {flash_ID:msg.payload[1].flash_ID,\n                        mac_adress:msg.payload[1].mac_adress}};  \n    \n    return [alarm, msg2, ID];\n\n    \n} else {\n    \n    is_avalanche = false\n    var alarm = {payload: is_avalanche};  \n    \n    return [alarm, msg2, null];\n    \n}\n\n\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":"3","noerr":0,"x":1019.9999389648438,"y":509.9999694824219,"wires":[["65c0cbb7.1a9fb4"],[],["813d3992.8bd8d8"]]},{"id":"813d3992.8bd8d8","type":"rbe","z":"4cdbd1db.46238","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1217.2022895812988,"y":558.0951910018921,"wires":[["2cc0da8.c025626"]]},{"id":"2cc0da8.c025626","type":"function","z":"4cdbd1db.46238","name":"Get raw data","func":"\nhex = \"000\" + parseInt(msg.payload.flash_ID).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload.flash_ID) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload.flash_ID)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\n\nvar mac_1  = parseInt(msg.payload.mac_adress.toString().substr(0,2),16);\nvar mac_2  = parseInt(msg.payload.mac_adress.toString().substr(2,2),16);\nvar mac_3  = parseInt(msg.payload.mac_adress.toString().substr(4,2),16);\nvar mac_4  = parseInt(msg.payload.mac_adress.toString().substr(6,2),16);\nvar mac_5  = parseInt(msg.payload.mac_adress.toString().substr(8,2),16);\nvar mac_6  = parseInt(msg.payload.mac_adress.toString().substr(10,2),16);\nvar mac_7  = parseInt(msg.payload.mac_adress.toString().substr(12,2),16);\nvar mac_8  = parseInt(msg.payload.mac_adress.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1408.392837524414,"y":559.7619886398315,"wires":[["bc64882f.dcbf88","dfc1f4b8.8140e8"]]},{"id":"dfc1f4b8.8140e8","type":"delay","z":"4cdbd1db.46238","name":"","pauseType":"delay","timeout":"6","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1594.7617645263672,"y":561.1904048919678,"wires":[["7469bb53.53f034"]]},{"id":"7469bb53.53f034","type":"link out","z":"4cdbd1db.46238","name":"com out","links":["a33b4702.6796f8"],"x":1729.7617683410645,"y":561.9047603607178,"wires":[]},{"id":"bc64882f.dcbf88","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":"false","complete":"false","x":1600.0592498779297,"y":613.5714302062988,"wires":[]},{"id":"4c02d9a.9635628","type":"function","z":"4cdbd1db.46238","name":"is Avalanche","func":"\nvar calc_timestamp = []\nvar G1_std = []\nvar G3_std = []\nvar G4_std = []\n\nvar is_avalanche;\n\nfor (i = 0; i < 3; i++){\n    \n        calc_timestamp[i] = msg.payload[i].calc_timestamp\n        G1_std[i] = msg.payload[i].G1_std\n        G3_std[i] = msg.payload[i].G3_std\n        G4_std[i] = msg.payload[i].G4_std\n        \n}\n\nvar min_G1_std = arrayMin(G1_std)\nvar min_G3_std = arrayMin(G3_std)\nvar min_G4_std = arrayMin(G4_std)\nvar time_diff = arrayMax(calc_timestamp) - arrayMin(calc_timestamp)\n\n \nvar msg2 = {payload:   {min_G1_std:min_G1_std,\n                        min_G3_std:min_G3_std,\n                        min_G4_std:min_G4_std,\n                        time_diff:time_diff}};\n \nif(time_diff <= 2000 && ((min_G1_std > 300 && min_G3_std > 300) || (min_G1_std > 300 && min_G4_std > 300)  || (min_G3_std > 300 && min_G4_std > 300))){\n   \n    is_avalanche = true\n    \n    var alarm = {payload: is_avalanche};  \n    \n    var ID = {payload: {flash_ID:msg.payload[1].flash_ID,\n                        mac_adress:msg.payload[1].mac_adress}};  \n    \n    return [alarm, msg2, ID];\n\n    \n} else {\n    \n    is_avalanche = false\n    var alarm = {payload: is_avalanche};  \n    \n    return [alarm, msg2, null];\n    \n}\n\n\n                        \n\n\n\nfunction arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}","outputs":"3","noerr":0,"x":1008.3333129882812,"y":199.99998474121094,"wires":[["88cd68dc.43a678"],[],["5ad0edc5.8d5754"]]},{"id":"5ad0edc5.8d5754","type":"rbe","z":"4cdbd1db.46238","name":"","func":"rbe","gap":"","start":"","inout":"out","x":1205.5356636047363,"y":248.09520626068115,"wires":[["23c10cfc.800664"]]},{"id":"23c10cfc.800664","type":"function","z":"4cdbd1db.46238","name":"Get raw data","func":"\nhex = \"000\" + parseInt(msg.payload.flash_ID).toString(16);\nflashID = parseInt(hex.substr(hex.length-4,hex.length),16)\nlsb = \"00\" + ((parseInt(msg.payload.flash_ID) % 256)).toString(16);\nmsb = \"00\" + ((Math.floor(parseInt(msg.payload.flash_ID)/256))).toString(16);\n\npackedID = \"08\";\nchannels = \"ff\";\nScanStart = \"00000000\";\nScanStop = \"7fffff7f\";\n\nIMSG_SENDDATA = (packedID + lsb.substr(lsb.length-2,lsb.length) + msb.substr(msb.length-2,msb.length)    + channels + ScanStart + ScanStop); \n\n\nvar mac_1  = parseInt(msg.payload.mac_adress.toString().substr(0,2),16);\nvar mac_2  = parseInt(msg.payload.mac_adress.toString().substr(2,2),16);\nvar mac_3  = parseInt(msg.payload.mac_adress.toString().substr(4,2),16);\nvar mac_4  = parseInt(msg.payload.mac_adress.toString().substr(6,2),16);\nvar mac_5  = parseInt(msg.payload.mac_adress.toString().substr(8,2),16);\nvar mac_6  = parseInt(msg.payload.mac_adress.toString().substr(10,2),16);\nvar mac_7  = parseInt(msg.payload.mac_adress.toString().substr(12,2),16);\nvar mac_8  = parseInt(msg.payload.mac_adress.toString().substr(14,2),16);\n\n\nvar input_buffer = new Buffer(IMSG_SENDDATA,'hex');\n\nvar packet_buffer = new Buffer ([0xA7, 0x40, 0xA0, 0xF5, 0x00, 0x1d, 0x00, 0x00, 0x2c , mac_1, mac_2, mac_3, mac_4, mac_5, mac_6, mac_7, mac_8, 0x01, 0xf0, 0xb9, 0xf0, 0xb9, 0x00]);//set transport mode\n\nvar output_buffer = Buffer.concat([packet_buffer, input_buffer])\n\nvar msg_3 = {payload: output_buffer};\n\n\nreturn [msg_3];\n\n","outputs":"1","noerr":0,"x":1396.7262115478516,"y":249.7620038986206,"wires":[["34d98c3b.0c7d44","4f75e46d.78fdbc"]]},{"id":"4f75e46d.78fdbc","type":"delay","z":"4cdbd1db.46238","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1583.0951385498047,"y":251.19042015075684,"wires":[["abe70f8e.fbbb9"]]},{"id":"abe70f8e.fbbb9","type":"link out","z":"4cdbd1db.46238","name":"com out","links":["a33b4702.6796f8"],"x":1718.095142364502,"y":251.90477561950684,"wires":[]},{"id":"34d98c3b.0c7d44","type":"debug","z":"4cdbd1db.46238","name":"","active":false,"console":"false","complete":"false","x":1588.3926239013672,"y":303.5714454650879,"wires":[]},{"id":"eaf38305.df6b3","type":"ui_numeric","z":"2a8e91d.ab3cd6e","name":"","label":"Mac number","group":"8e6a4d2d.731d3","order":11,"width":0,"height":0,"passthru":true,"topic":"","format":"{{value}}","min":"1","max":"101","step":1,"x":1011.4285888671875,"y":192.33327293395996,"wires":[["8e14c532.c326d8"]]},{"id":"fdcfd047.cd90d","type":"ui_text","z":"2a8e91d.ab3cd6e","group":"8e6a4d2d.731d3","order":12,"width":0,"height":0,"name":"","label":"Mac address","format":"{{msg.payload}}","layout":"row-spread","x":1574.7621536254883,"y":181.85719299316406,"wires":[]},{"id":"8e14c532.c326d8","type":"function","z":"2a8e91d.ab3cd6e","name":"Get mac address from number","func":"var sorted_mac_array = flow.get('sorted_mac_array') || 0\n\n//var mac_address = {payload:sorted_mac_array.payload[msg.payload-1]}\n\nvar mac_array = {payload:sorted_mac_array}\nvar mac_address = {payload:sorted_mac_array[msg.payload-1]}\n\nflow.set('mac_address',mac_address);\n\nreturn [mac_address, mac_array];","outputs":"2","noerr":0,"x":1291.9048919677734,"y":191.85717010498047,"wires":[["fdcfd047.cd90d","a132337c.9ef3"],["a132337c.9ef3"]]},{"id":"cf7df779.7e3988","type":"link in","z":"2a8e91d.ab3cd6e","name":"aux in","links":["b68ef3a9.6e4"],"x":1131.8386316299438,"y":100.01075267791748,"wires":[["d06fd922.3d27f8"]]},{"id":"d06fd922.3d27f8","type":"function","z":"2a8e91d.ab3cd6e","name":"Update mac array","func":"var msg_mac = msg;\n\nvar mac_array = flow.get('mac_array_3') || []\n\n\nfor (i = 0; i < mac_array.length; i++){\n    \n        if (msg_mac.payload.mac_adress == mac_array[i]){\n\n            break;\n            \n        }\n  \n}\n\n\nmac_array[i] = msg_mac.payload.mac_adress\n                                        \nflow.set('mac_array_3', mac_array);\n\nvar mac_array_sorted = mac_array.sort();\n\nflow.set('sorted_mac_array',mac_array_sorted);\n\nvar string2 = {payload: mac_array_sorted};\nvar length = {payload: mac_array.length}\n\n\nreturn [string2,length];","outputs":"2","noerr":0,"x":1310.4763374328613,"y":99.28572654724121,"wires":[["a132337c.9ef3"],[]]},{"id":"a132337c.9ef3","type":"debug","z":"2a8e91d.ab3cd6e","name":"","active":false,"console":"false","complete":"true","x":1576.9049396514893,"y":91.42858123779297,"wires":[]}]