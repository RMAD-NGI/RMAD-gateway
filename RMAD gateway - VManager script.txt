[{"id":"9b476ca.8e1019","type":"tab","label":"VManager","disabled":false,"info":""},{"id":"9906b72c.62d9e8","type":"inject","z":"9b476ca.8e1019","name":"insert","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":130,"y":560,"wires":[["8c19dea2.b1179"]]},{"id":"44019fa7.9db84","type":"debug","z":"9b476ca.8e1019","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":600,"y":560,"wires":[]},{"id":"8c19dea2.b1179","type":"https-node","z":"9b476ca.8e1019","name":"Get network","method":"GET","ret":"obj","url":"https://40.69.23.78:8888/manager/v1/network","authorized":false,"agent":false,"x":360,"y":560,"wires":[["44019fa7.9db84"]]},{"id":"eb2ed046.82bc","type":"inject","z":"9b476ca.8e1019","name":"insert","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":130,"y":660,"wires":[["897a5bdd.1152d8"]]},{"id":"897a5bdd.1152d8","type":"https-node","z":"9b476ca.8e1019","name":"Get motes","method":"GET","ret":"obj","url":"https://40.69.23.78:8888/manager/v1/motes","authorized":false,"agent":false,"x":370,"y":660,"wires":[["44019fa7.9db84"]]},{"id":"326506a1.31135a","type":"function","z":"9b476ca.8e1019","name":"VManager Notifications","func":"var request = global.get('request');\n\nrequest({ \n    method: 'GET',\n    uri: 'https://40.69.23.78:8888/manager/v1/notifications',\n    //uri: 'https://localhost:8888/manager/v1/network',\n    //uri: 'https://jigsaw.w3.org/HTTP/ChunkedScript',\n    headers: {Authorization: 'Basic ZHVzdDpkdXN0'},\n    gzip: true\n},\n\n\nfunction (error, response, body) {\n      console.log('Most probably the stream has been ended ...')\n    }\n  )\n  .on('data', function(data) {\n    // decompressed data as it is received\n    console.log('decompressed chunk arrived: ' + data)\n    node.send({payload: data});\n})","outputs":1,"noerr":0,"initialize":"","finalize":"","x":410,"y":200,"wires":[["a86ffd3b.44d8d"]],"icon":"font-awesome/fa-american-sign-language-interpreting"},{"id":"77c4579.bf0eba8","type":"inject","z":"9b476ca.8e1019","name":"start","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"","payloadType":"date","x":130,"y":320,"wires":[["1fad6f7e.e1ebc1"]]},{"id":"a86ffd3b.44d8d","type":"function","z":"9b476ca.8e1019","name":"toString","func":"msg.payload = msg.payload.toString('utf8')\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":630,"y":200,"wires":[["40a9c9e0.33a2a8"]]},{"id":"40a9c9e0.33a2a8","type":"json","z":"9b476ca.8e1019","name":"","property":"payload","action":"","pretty":false,"x":810,"y":200,"wires":[["fa754ad1.144fb8","3c392571.5ba8ca","e56c3c22.4f446","47162a48.79e4a4","144980fc.746dbf"]]},{"id":"3c392571.5ba8ca","type":"switch","z":"9b476ca.8e1019","name":"","property":"payload.type","propertyType":"msg","rules":[{"t":"eq","v":"dataPacketReceived","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":990,"y":760,"wires":[["2a87bf69.3ada6","25944581.72913a"]]},{"id":"fa754ad1.144fb8","type":"debug","z":"9b476ca.8e1019","name":"all","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1050,"y":100,"wires":[]},{"id":"1fad6f7e.e1ebc1","type":"multipart-decoder","z":"9b476ca.8e1019","name":"","ret":"txt","url":"https://40.69.23.78:8888/manager/v1/notifications","tls":"954d544d.71dcb8","delay":0,"maximum":1000000,"blockSize":1,"x":390,"y":320,"wires":[["326506a1.31135a"]]},{"id":"25944581.72913a","type":"debug","z":"9b476ca.8e1019","name":"data","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1150,"y":600,"wires":[]},{"id":"2a87bf69.3ada6","type":"function","z":"9b476ca.8e1019","name":"VManager to Azure","func":"msg.payload.data = Buffer.from(msg.payload.payload, 'base64').toString('hex')\n\nvar time_diff = flow.get('time_diff') || 0;\n\nif (msg.payload.data.substring(0,2) == \"07\") { //is AUX datapaket\n\n    \nvar aux_is_signedint = parseInt(msg.payload.data.substring(16,18),16).toString(2).split('').map(x => x === '1');\nvar num_aux = (msg.payload.data.length - 18) / 4;\nvar aux_data = [];\n\nvar i;\nfor (i = 0; i < num_aux; i++) { \n    if (aux_is_signedint[i]) {\n        aux_data[i] = Math.round((hexToSignedInt(msg.payload.data.substring(18+4*i+2,18+4*i+4)+msg.payload.data.substring(18+4*i,18+4*i+2)))*1000)/1000; //*2.5/65536 kommentert ut utregning til volt\n    } else {\n        aux_data[i] = Math.round((parseInt(msg.payload.data.substring(18+4*i+2,18+4*i+4)+msg.payload.data.substring(18+4*i,18+4*i+2),16))*1000)/1000; //*2.5/65536 kommentert ut utregning til volt for å test triggnivå\n    }\n}\n\n\nvar aux_msg = {\n\n                payload:    \n\n\n                             {config:    {type:parseInt(msg.payload.data.substring(2,3),16),\n                                        sw:parseInt(msg.payload.data.substring(3,4),16),\n                                        hw:parseInt(msg.payload.data.substring(4,5),16),\n                                        radio:parseInt(msg.payload.data.substring(5,6),16)},\n                                    \n                            state:     {charge_enabled: ((parseInt(msg.payload.data.substring(6,8),16) & 1) == 1) ? 1 : 0,\n                                        fast_charge: ((parseInt(msg.payload.data.substring(6,8),16) & 2) == 2) ? 1 : 0,\n                                        acmp1_out: ((parseInt(msg.payload.data.substring(6,8),16) & 4) == 4) ? 1 : 0,\n                                        acmp2_out: ((parseInt(msg.payload.data.substring(6,8),16) & 8) == 8) ? 1 : 0,\n                                        acmp_vddref: ((parseInt(msg.payload.data.substring(6,8),16) & 16) == 16) ? 1 : 0},\n                            \n                            battery: Math.round((parseInt(msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16)*(3*2.5/65536)+0.69)*1000)/1000,\n                            temperature: hexToSignedInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14),16)/100,\n                            aux: aux_data,\n                            \n                        //    packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"aux_data\"\n                            },\n                        \n\n};\n            \n\nreturn [aux_msg,null,null,null,null];\n\n} \n\nelse if (msg.payload.data.substring(0,2) == \"00\"){  //is SVV avalanch packet\n\n \nvar svv_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46))),\n                            G4_std: Math.round(parseFloatHex(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_max: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G3_max: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G4_max: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78),16),\n                            G2_min: parseInt(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82),16),\n                            G3_min: parseInt(msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86),16),\n                            G4_min: parseInt(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(98,100) + msg.payload.data.substring(96,98),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102),16),\n                            G4_maxS: parseInt(msg.payload.data.substring(106,108) + msg.payload.data.substring(104,106),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(110,112) + msg.payload.data.substring(108,110),16),\n                            G2_minS: parseInt(msg.payload.data.substring(114,116) + msg.payload.data.substring(112,114),16),\n                            G3_minS: parseInt(msg.payload.data.substring(118,120) + msg.payload.data.substring(116,118),16),\n                            G4_minS: parseInt(msg.payload.data.substring(122,124) + msg.payload.data.substring(120,122),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n\n                        //    packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"event_svv\"\n                            },\n                            \n\n};  \n\n \n  \nreturn [null,svv_msg,null,null,null];\n\n} \n\nelse if (msg.payload.data.substring(0,2) == \"0a\") {  //is event packet\n\nif (msg.payload.data.length == 170){ var event_msg = {payload:   //4 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G4_std: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            G3_mean: Math.round(parseFloatHex(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92))),\n                            G4_mean: Math.round(parseFloatHex(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(108,110) + msg.payload.data.substring(106,108),16),\n                            G2_max: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                            G3_max: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n                            G4_max: parseInt(msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(124,126) + msg.payload.data.substring(122,124),16),\n                            G2_min: parseInt(msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128),16),\n                            G3_min: parseInt(msg.payload.data.substring(132,134) + msg.payload.data.substring(130,132),16),\n                            G4_min: parseInt(msg.payload.data.substring(136,138) + msg.payload.data.substring(134,136),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(140,142) + msg.payload.data.substring(138,140),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(144,146) + msg.payload.data.substring(142,144),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(148,150) + msg.payload.data.substring(146,148),16),\n                            G4_maxS: parseInt(msg.payload.data.substring(152,154) + msg.payload.data.substring(150,152),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(156,158) + msg.payload.data.substring(154,156),16),\n                            G2_minS: parseInt(msg.payload.data.substring(160,162) + msg.payload.data.substring(158,160),16),\n                            G3_minS: parseInt(msg.payload.data.substring(164,166) + msg.payload.data.substring(162,164),16),\n                            G4_minS: parseInt(msg.payload.data.substring(168,170) + msg.payload.data.substring(166,168),16),\n                            \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                          //  calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + (parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000))) + parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16) / prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n\n                        //    packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"event\"\n                            },\n                            \n\n} \n\n} \nelse if (msg.payload.data.length == 138){ var event_msg = {payload:   //3 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            G3_std: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G3_mean: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            G2_max: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96),16),\n                            G3_max: parseInt(msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            \n                            G1_min: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104),16),\n                            G2_min: parseInt(msg.payload.data.substring(108,110) + msg.payload.data.substring(106,108),16),\n                            G3_min: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120),16),\n                            G3_maxS: parseInt(msg.payload.data.substring(124,126) + msg.payload.data.substring(122,124),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128),16),\n                            G2_minS: parseInt(msg.payload.data.substring(132,134) + msg.payload.data.substring(130,132),16),\n                            G3_minS: parseInt(msg.payload.data.substring(136,138) + msg.payload.data.substring(134,136),16),\n                           \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                          //  calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + (parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000))) + parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16) / prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n\n                        //    packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"event\"\n                            },\n                            \n\n} \n\n} \nelse if (msg.payload.data.length == 106){var event_msg = {payload:  //2 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76),16),\n                            G2_max: parseInt(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80),16),\n                           \n                            G1_min: parseInt(msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84),16),\n                            G2_min: parseInt(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96),16),\n                          \n                            G1_minS: parseInt(msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            G2_minS: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104),16),\n                        \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                          //  calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + (parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000))) + parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16) / prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n\n                        //    packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"event_jbv\"\n                            },\n\n\n}\n\n\n} \nelse if (msg.payload.data.length == 74) {var event_msg = {payload:  //1 channels\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60),16),\n                           \n                            G1_min: parseInt(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64),16),\n                           \n                            G1_maxS: parseInt(msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68),16),\n                            \n                            G1_minS: parseInt(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72),16),\n                            \n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n                            trigg_offset: parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16),\n                            prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40),16),\n                            \n                            \n                            calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)) + 1000 * ((parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16)) / (parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n                         \n                          //  calc_timestamp: Math.round(((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + (parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000))) + parseInt(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28),16) / prev_sps: parseInt(msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36),16)/100))), //starttid for dataset - msec since 1 january 1970\n\n                        //    packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"event\"\n                            },\n\n\n}\n}\nreturn [null,event_msg,null,null,null];\n\n} \n\nelse if (msg.payload.data.substring(0,2) == \"08\") { //is JBV avalanch packet\n\nif (msg.payload.data.length <= 92){var jbv_msg = {payload:{           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: parseInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: parseInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: parseInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n                      \n                         //   packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"event_jbv\"\n                            },\n                            \n\n        }      \n     \n } \n else {var jbv_msg = {payload: {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: parseInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: parseInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: parseInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: parseInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n                      \n                            trigg_offset: parseInt(msg.payload.data.substring(98,100) + msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94),16),\n                            prev_sps: parseInt(msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102),16)/100,\n                            flash_ID: parseInt(msg.payload.data.substring(106,108) + msg.payload.data.substring(104,106),16),\n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(122,124) + msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120) + msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116) + msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112) + msg.payload.data.substring(108,110),16)*1000 + parseInt(msg.payload.data.substring(130,132) + msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128) + msg.payload.data.substring(124,126),16)/1000)), //starttid for dataset - msec since 1 january 1970\n\n                            //  calc_timestamp_check: Math.round((parseInt(msg.payload.data.substring(122,124) + msg.payload.data.substring(120,122) + msg.payload.data.substring(118,120) + msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116) + msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112) + msg.payload.data.substring(108,110),16)*1000 + parseInt(msg.payload.data.substring(130,132) + msg.payload.data.substring(128,130) + msg.payload.data.substring(126,128) + msg.payload.data.substring(124,126),16)/1000) + time_diff + 1000 * ((parseInt(msg.payload.data.substring(98,100) + msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94),16)) / (parseInt(msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102),16)/100))), //starttid for dataset - msec since 1 january 1970\n \n                            //   packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"event_jbv\"\n                            },\n                            \n\n    } \n\n}\n  \nreturn [null,jbv_msg,null,null,null]; \n\n} \n\nelse if (msg.payload.data.substring(0,2) == \"09\") { //is JBV diff avalanch packet\n\n \n \n \n var jbv_diff_msg = {payload:\n \n\n                {           \n                    \n                            G1_std: Math.round(parseFloatHex(msg.payload.data.substring(34,36) + msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30))),\n                            G2_std: Math.round(parseFloatHex(msg.payload.data.substring(42,44) + msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38))),\n                            \n                            G1_mean: Math.round(parseFloatHex(msg.payload.data.substring(82,84) + msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78))),\n                            G2_mean: Math.round(parseFloatHex(msg.payload.data.substring(90,92) + msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86))),\n                            \n                            G1_max: hexToSignedInt(msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46),16),\n                            G2_max: hexToSignedInt(msg.payload.data.substring(50,52) + msg.payload.data.substring(48,50),16),\n                            G1_min: hexToSignedInt(msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54),16),\n                            G2_min: hexToSignedInt(msg.payload.data.substring(58,60) + msg.payload.data.substring(56,58),16),\n                            \n                            G1_maxS: parseInt(msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62),16),\n                            G2_maxS: parseInt(msg.payload.data.substring(66,68) + msg.payload.data.substring(64,66),16),\n                            G1_minS: parseInt(msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70),16),\n                            G2_minS: parseInt(msg.payload.data.substring(74,76) + msg.payload.data.substring(72,74),16),\n                            \n                            calc_timestamp: Math.round((parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16)*1000 + parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16)/1000)), //starttid for dataset - msec since 1 january 1970\n\n                         //   packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"event_jbv\"\n                            },\n \n    \n};  \n\n \n  \nreturn [null,jbv_diff_msg,null,null,null];  \n\n} \n\nelse if (msg.payload.data.substring(0,2) == \"03\") { //is Recent event packet\n\n \n var recent_event_msg = {payload:\n \n\n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            sps: parseInt(msg.payload.data.substring(32,34)+msg.payload.data.substring(30,32),16)/100,\n                            num_samples: parseInt(msg.payload.data.substring(36,38)+msg.payload.data.substring(34,36),16),\n                            \n                            trigg_timestamp: Math.round((parseInt(msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20) + msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12) + msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8),16)*1000 + parseInt(msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28) + msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24),16)/1000)), //starttid for dataset - msec since 1 january 1970\n\n                          //  packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"recent_event\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,recent_event_msg,null,null];      \n\n} \n\nelse if (msg.payload.data.substring(0,2) == \"06\") { //is raw dat packet\n\n    \nvar num_raw = (msg.payload.data.length - 24) / 4;\nvar raw_data = [];\n\nvar i;\nfor (i = 0; i < num_raw; i++) { \n\n        raw_data[i] = parseInt(msg.payload.data.substring(24+4*i+2,24+4*i+4)+msg.payload.data.substring(24+4*i,24+4*i+2),16);\n\n}\n \n var raw_data_msg = {payload:\n \n                \n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            channels: parseInt(msg.payload.data.substring(6,8),16),\n                            \n                            scan_start: parseInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14)+msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16),\n                            scan_stop: parseInt(msg.payload.data.substring(22,24)+msg.payload.data.substring(20,22)+msg.payload.data.substring(18,20)+msg.payload.data.substring(16,18),16),\n                            \n                            samples: raw_data,\n                            \n                         //   packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"raw_data\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,null,raw_data_msg,null];  \n\n} \n\nelse if (msg.payload.data.substring(0,2) == \"0a\") { //is raw diff dat packet\n\n    \nvar num_raw = (msg.payload.data.length - 24) / 4;\nvar raw_data = [];\n\nvar i;\nfor (i = 0; i < num_raw; i++) { \n\n        raw_data[i] = hexToSignedInt(msg.payload.data.substring(24+4*i+2,24+4*i+4)+msg.payload.data.substring(24+4*i,24+4*i+2),16);\n\n}\n \n var raw_data_diff_msg = {payload:\n \n                \n                {\n                    \n                            flash_ID: parseInt(msg.payload.data.substring(4,6)+msg.payload.data.substring(2,4),16),\n                            channels: parseInt(msg.payload.data.substring(6,8),16),\n                            \n                            scan_start: parseInt(msg.payload.data.substring(14,16)+msg.payload.data.substring(12,14)+msg.payload.data.substring(10,12)+msg.payload.data.substring(8,10),16),\n                            scan_stop: parseInt(msg.payload.data.substring(22,24)+msg.payload.data.substring(20,22)+msg.payload.data.substring(18,20)+msg.payload.data.substring(16,18),16),\n                            \n                            samples: raw_data,\n                            \n                          //  packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"raw_data\"\n                            },\n                            \n\n };    \n\n\nreturn [null,null,null,raw_data_diff_msg,null];  \n\n} \n\nelse if (msg.payload.data.substring(0,2) == \"04\") { //is adjustable param pacjet\n\n \nvar par_msg = {payload:\n \n\n                {           \n                    \n                            Min_samples: parseInt(msg.payload.data.substring(8,10) + msg.payload.data.substring(6,8) + msg.payload.data.substring(4,6) + msg.payload.data.substring(2,4),16),\n                            Sample_cont: parseInt(msg.payload.data.substring(16,18) + msg.payload.data.substring(14,16) + msg.payload.data.substring(12,14) + msg.payload.data.substring(10,12),16),\n                            Max_samples: parseInt(msg.payload.data.substring(24,26) + msg.payload.data.substring(22,24) + msg.payload.data.substring(20,22) + msg.payload.data.substring(18,20),16),\n                            \n                            \n                            \n                            G1_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(32,34) + msg.payload.data.substring(30,32) + msg.payload.data.substring(28,30) + msg.payload.data.substring(26,28))),\n                            G2_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(40,42) + msg.payload.data.substring(38,40) + msg.payload.data.substring(36,38) + msg.payload.data.substring(34,36))),\n                            \n                            G3_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(48,50) + msg.payload.data.substring(46,48) + msg.payload.data.substring(44,46) + msg.payload.data.substring(42,44))),\n                            G4_std_lim: Math.round(parseFloatHex(msg.payload.data.substring(56,58) + msg.payload.data.substring(54,56) + msg.payload.data.substring(52,54) + msg.payload.data.substring(50,52))),\n                            \n                            G1_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(64,66) + msg.payload.data.substring(62,64) + msg.payload.data.substring(60,62) + msg.payload.data.substring(58,60))),\n                            G2_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(72,74) + msg.payload.data.substring(70,72) + msg.payload.data.substring(68,70) + msg.payload.data.substring(66,68))),\n                            \n                            G3_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(80,82) + msg.payload.data.substring(78,80) + msg.payload.data.substring(76,78) + msg.payload.data.substring(74,76))),\n                            G4_cont_lim: Math.round(parseFloatHex(msg.payload.data.substring(88,90) + msg.payload.data.substring(86,88) + msg.payload.data.substring(84,86) + msg.payload.data.substring(82,84))),\n                            \n                            Trig_level: parseInt(msg.payload.data.substring(96,98) + msg.payload.data.substring(94,96) + msg.payload.data.substring(92,94) + msg.payload.data.substring(90,92),16),\n                            Start_delay: parseInt(msg.payload.data.substring(104,106) + msg.payload.data.substring(102,104) + msg.payload.data.substring(100,102) + msg.payload.data.substring(98,100),16),\n                            \n                            Trig_ch0: parseInt(msg.payload.data.substring(106,108),16),\n                            Trig_ch1: parseInt(msg.payload.data.substring(108,110),16),\n                            \n                            Amp_trig: parseInt(msg.payload.data.substring(112,114) + msg.payload.data.substring(110,112),16),\n                            Amp_logging: parseInt(msg.payload.data.substring(116,118) + msg.payload.data.substring(114,116),16),\n          \n                          //  packet_sent: Math.round((parseInt(msg.payload.timestamp.substring(0,16),16)*1000 + parseInt(msg.payload.timestamp.substring(16),16)/1000) + time_diff), //tidspungt når pakke ble sendt - msec since 1 january 1970\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            \n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"prosessing_params\"\n                            },\n                            \n\n};\n\n \n  \nreturn [null,null,null,null,par_msg];\n}\n\n\n\n\nfunction hexToSignedInt(hex) {\n    if (hex.length % 2 !== 0) {\n        hex = \"0\" + hex;\n    }\n    var num = parseInt(hex, 16);\n    var maxVal = Math.pow(2, hex.length / 2 * 8);\n    if (num > maxVal / 2 - 1) {\n        num = num - maxVal;\n    }\n    return num;\n}\n\nfunction parseFloatHex(str) {\n    var float = 0, sign, order, mantiss,exp,\n    int = 0, multi = 1;\n    int = parseInt(str,16);\n    sign = (int>>>31)?-1:1;\n    exp = (int >>> 23 & 0xff) - 127;\n    mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n    for (i=0; i<mantissa.length; i+=1){\n        float += parseInt(mantissa[i])? Math.pow(2,exp):0;\n        exp--;\n    }\n    return float*sign;\n}","outputs":"5","noerr":0,"initialize":"","finalize":"","x":1210,"y":760,"wires":[["e9613a40.3060a8","cb5e2bc6.878378","5d962160.e4b15","fc5386ba.cf7678"],["ceef6a1a.442e88","75000f6b.56973","5d962160.e4b15","fc5386ba.cf7678"],["85a72b44.cd2aa8","4be73c31.6442d4","5d962160.e4b15","fc5386ba.cf7678"],["f90ed164.945ca","a4d0f7c6.303718","5d962160.e4b15","fc5386ba.cf7678"],["aab1d1ac.8579f","63907306.2a4bcc","5d962160.e4b15","fc5386ba.cf7678"]]},{"id":"e9613a40.3060a8","type":"debug","z":"9b476ca.8e1019","name":"AUX","active":true,"console":"false","complete":"payload","x":1530,"y":600,"wires":[]},{"id":"ceef6a1a.442e88","type":"debug","z":"9b476ca.8e1019","name":"Avalanch","active":true,"console":"false","complete":"payload","x":1540.8854751586914,"y":717.8772926330566,"wires":[]},{"id":"85a72b44.cd2aa8","type":"debug","z":"9b476ca.8e1019","name":"Last Event","active":false,"console":"false","complete":"payload","x":1539.4566459655762,"y":807.8771743774414,"wires":[]},{"id":"f90ed164.945ca","type":"debug","z":"9b476ca.8e1019","name":"Raw data","active":false,"console":"false","complete":"payload","x":1540,"y":900,"wires":[]},{"id":"aab1d1ac.8579f","type":"debug","z":"9b476ca.8e1019","name":"Params","active":false,"console":"false","complete":"payload","x":1540,"y":980,"wires":[]},{"id":"4be73c31.6442d4","type":"link out","z":"9b476ca.8e1019","name":"event out","links":["abc21667.c76518","12375f24.9c9e51"],"x":1501.0841426849365,"y":759.7440452575684,"wires":[]},{"id":"63907306.2a4bcc","type":"link out","z":"9b476ca.8e1019","name":"param out","links":["e3ebf16f.ef114","cdcc7c8b.d269a","bf213e07.ea94a","81800535.82adc8","4d2f8398.5690dc"],"x":1495,"y":940,"wires":[]},{"id":"cb5e2bc6.878378","type":"link out","z":"9b476ca.8e1019","name":"aux out","links":["59a0d8e5.1cfbe8","1a74f0d2.dfa4bf","b408a04c.2e498","bda49025.4de18"],"x":1488.7065658569336,"y":552.7738742828369,"wires":[]},{"id":"99b5811b.bdadb","type":"https-node","z":"9b476ca.8e1019","name":"Get time","method":"GET","ret":"obj","url":"https://40.69.23.78:8888/manager/v1/system/info","authorized":false,"agent":true,"x":360,"y":760,"wires":[["44019fa7.9db84","54ced8cd.39edb8"]]},{"id":"ab3c1ef3.cfdee","type":"inject","z":"9b476ca.8e1019","name":"insert","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"86400","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"","payloadType":"date","x":130,"y":760,"wires":[["99b5811b.bdadb"]]},{"id":"54ced8cd.39edb8","type":"function","z":"9b476ca.8e1019","name":"set TimeDiff","func":"network_time = Date.parse(msg.payload.curSysTime) \ngateway_time = new Date().getTime(); //msec since 1 january 1970  \ntime_diff = gateway_time - network_time;\n\nflow.set('time_diff',time_diff);\n\nvar time_msg = {payload:{\n\n     network_time: network_time,\n     gateway_time: gateway_time,\n     time_diff: time_diff}};\n\nreturn time_msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":590,"y":760,"wires":[["44019fa7.9db84"]]},{"id":"75000f6b.56973","type":"link out","z":"9b476ca.8e1019","name":"avalanch out","links":["cc6ea129.8a322","14e3d371.41a11d","63e855dd.99f84c","fa75e733.07b3e8"],"x":1495,"y":660,"wires":[]},{"id":"a4d0f7c6.303718","type":"link out","z":"9b476ca.8e1019","name":"raw out","links":["485b9db6.366034","fcccd3f7.9128","c49a3557.04c7f8","4700f728.157688"],"x":1525,"y":860,"wires":[]},{"id":"c63c4c02.7b5d1","type":"debug","z":"9b476ca.8e1019","name":"health","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1550,"y":100,"wires":[]},{"id":"e56c3c22.4f446","type":"switch","z":"9b476ca.8e1019","name":"","property":"payload.type","propertyType":"msg","rules":[{"t":"eq","v":"deviceHealthReport","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":1070,"y":200,"wires":[["2e9bc5d0.724cda"]]},{"id":"640a4bd6.37d1e4","type":"function","z":"9b476ca.8e1019","name":"Motestate to Azure","func":"var time_diff = flow.get('time_diff') || 0;\n\nvar mote_msg = {\n\n                payload:    \n\n\n                            {state: msg.payload.state,\n                            reason: msg.payload.reason,\n                            type: msg.payload.type,\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"moteStateChanged\",\n                            macAddress: msg.payload.macAddress\n                            },\n                        \n\n};\n            \n\nreturn [mote_msg];\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1290,"y":280,"wires":[["df01a9a1.6174a8","833a6e70.e068f","fc5386ba.cf7678","5d962160.e4b15"]]},{"id":"df01a9a1.6174a8","type":"debug","z":"9b476ca.8e1019","name":"state","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1550,"y":260,"wires":[]},{"id":"833a6e70.e068f","type":"link out","z":"9b476ca.8e1019","name":"state out","links":["dc3479c8.5d8f98","49488b49.c5aac4","13e9f96e.64e077","cd0bc339.06e48"],"x":1535,"y":300,"wires":[]},{"id":"832675be.b81228","type":"function","z":"9b476ca.8e1019","name":"NeighborHealth to Azure","func":"var time_diff = flow.get('time_diff') || 0;\n \nvar adress = [];\nvar rssi = [];\n\n \nfor (i = 0; i < msg.payload.connectedNeighbors.length; i++) { \n \n//msg.payload.connectedNeighbors[i].mac_adress = msg.payload.connectedNeighbors[i].macAddress.replace(/-/g, \"\")\n\nadress[i] = msg.payload.connectedNeighbors[i].macAddress.replace(/-/g, \"\")\nrssi[i] = msg.payload.connectedNeighbors[i].rssi\n \n}\n    \nvar mote_msg = {\n\n                payload:    \n\n\n                            {//connectedNeighbors: msg.payload.connectedNeighbors,\n                            neighbor_mac_adress: adress,\n                            neighbor_rssi: rssi,\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"neighborHealthReport\",\n                            macAddress: msg.payload.macAddress\n                            },\n                        \n\n};\n            \n\nreturn [mote_msg];\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1270,"y":240,"wires":[["4a6da095.99094","60b95068.6ced9"]]},{"id":"4a6da095.99094","type":"debug","z":"9b476ca.8e1019","name":"mote","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1550,"y":180,"wires":[]},{"id":"2e9bc5d0.724cda","type":"function","z":"9b476ca.8e1019","name":"DeviceHealth to Azure","func":"var time_diff = flow.get('time_diff') || 0;\n \n\nvar mote_msg = {\n\n                payload:    \n\n\n                            {mote_voltage: msg.payload.voltage/1000,\n                            mote_temperature: msg.payload.temperature,\n                            packet_sent: Date.parse(msg.payload.sysTime) + time_diff,\n                            mac_adress: msg.payload.macAddress.replace(/-/g, \"\"),\n                            packet_type: \"deviceHealthReport\",\n                            macAddress: msg.payload.macAddress\n                            },\n                        \n\n};\n            \n\nreturn [mote_msg];\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1280,"y":200,"wires":[["c63c4c02.7b5d1","e58f3723.1a2c78"]]},{"id":"47162a48.79e4a4","type":"switch","z":"9b476ca.8e1019","name":"","property":"payload.type","propertyType":"msg","rules":[{"t":"eq","v":"neighborHealthReport","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":1070,"y":240,"wires":[["832675be.b81228"]]},{"id":"144980fc.746dbf","type":"switch","z":"9b476ca.8e1019","name":"","property":"payload.type","propertyType":"msg","rules":[{"t":"eq","v":"moteStateChanged","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":1070,"y":280,"wires":[["640a4bd6.37d1e4"]]},{"id":"60b95068.6ced9","type":"link out","z":"9b476ca.8e1019","name":"neighbor out","links":["c8a9ef.a233161","595b00bf.2aab5","adcdcacf.512528","7bb745cd.f32afc"],"x":1535,"y":220,"wires":[]},{"id":"e58f3723.1a2c78","type":"link out","z":"9b476ca.8e1019","name":"devicehealth out","links":["cb3678ae.cb75c8","cd23bcc0.d79c8","d5c100da.17e89"],"x":1515,"y":140,"wires":[]},{"id":"5d962160.e4b15","type":"mqtt out","z":"9b476ca.8e1019","name":"MQTT to Azure bn-msd-dev","topic":"devices/vermadev/messages/events/$.ct=application%2Fjson&$.ce=utf-8","qos":"1","retain":"false","broker":"1bf837c.57a5bc8","x":1580,"y":380,"wires":[]},{"id":"fc5386ba.cf7678","type":"mqtt out","z":"9b476ca.8e1019","name":"MQTT to Azure bn-msd-prod","topic":"devices/verma/messages/events/$.ct=application%2Fjson&$.ce=utf-8","qos":"1","retain":"false","broker":"b80123b4.04c1b","x":1580,"y":460,"wires":[]},{"id":"954d544d.71dcb8","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":true},{"id":"1bf837c.57a5bc8","type":"mqtt-broker","z":"","name":"","broker":"bn-msd-sensorreceiver-iot-dev.azure-devices.net","port":"8883","tls":"e11fdf56.8a5ca","clientid":"vermadev","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":"","closeTopic":"","closePayload":"","willTopic":"","willQos":"0","willRetain":"false","willPayload":""},{"id":"b80123b4.04c1b","type":"mqtt-broker","z":"","name":"","broker":"bn-msd-sensorreceiver-iot.azure-devices.net","port":"8883","tls":"954d544d.71dcb8","clientid":"verma","usetls":true,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"e11fdf56.8a5ca","type":"tls-config","z":"","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":true}]